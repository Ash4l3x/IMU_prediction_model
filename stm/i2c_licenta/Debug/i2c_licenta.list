
i2c_licenta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c10  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08008de0  08008de0  00009de0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009188  08009188  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009188  08009188  0000a188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009190  08009190  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009190  08009190  0000a190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009194  08009194  0000a194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009198  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001d4  0800936c  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  0800936c  0000b3e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0b8  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d77  00000000  00000000  000172bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  00019038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000884  00000000  00000000  00019b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022608  00000000  00000000  0001a3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebbc  00000000  00000000  0003c9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd846  00000000  00000000  0004b568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118dae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e9c  00000000  00000000  00118df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0011cc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008dc8 	.word	0x08008dc8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08008dc8 	.word	0x08008dc8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <main>:
void Read_Gyroscope(I2C_HandleTypeDef *hi2c, uint16_t sensor_address, float *gyro_data);
void I2C_Scan(I2C_HandleTypeDef *i2c);
void calibrate_sensor(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart, uint16_t sensor_address);
void get_info(I2C_HandleTypeDef *hi2c, uint16_t sensor_address);

int main(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
    HAL_Init();
 8000f7e:	f000 fd31 	bl	80019e4 <HAL_Init>
    SystemClock_Config();
 8000f82:	f000 fa1f 	bl	80013c4 <SystemClock_Config>
    MX_GPIO_Init();
 8000f86:	f000 fad5 	bl	8001534 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000f8a:	f000 faa5 	bl	80014d8 <MX_I2C1_Init>
    MX_USART2_UART_Init();
 8000f8e:	f000 fa79 	bl	8001484 <MX_USART2_UART_Init>

    I2C_Scan(&hi2c1);
 8000f92:	4817      	ldr	r0, [pc, #92]	@ (8000ff0 <main+0x78>)
 8000f94:	f000 f830 	bl	8000ff8 <I2C_Scan>
    HAL_Delay(200);
 8000f98:	20c8      	movs	r0, #200	@ 0xc8
 8000f9a:	f000 fd95 	bl	8001ac8 <HAL_Delay>
    BNO055_Init(&hi2c1);
 8000f9e:	4814      	ldr	r0, [pc, #80]	@ (8000ff0 <main+0x78>)
 8000fa0:	f000 f856 	bl	8001050 <BNO055_Init>
    HAL_Delay(500);
 8000fa4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fa8:	f000 fd8e 	bl	8001ac8 <HAL_Delay>

    while (1) {
        if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE)) {
 8000fac:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <main+0x7c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0320 	and.w	r3, r3, #32
 8000fb6:	2b20      	cmp	r3, #32
 8000fb8:	d116      	bne.n	8000fe8 <main+0x70>
            char command;
            HAL_UART_Receive(&huart2, (uint8_t *)&command, 1, HAL_MAX_DELAY);
 8000fba:	1df9      	adds	r1, r7, #7
 8000fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <main+0x7c>)
 8000fc4:	f004 fcf3 	bl	80059ae <HAL_UART_Receive>
            if (command == '1') {
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b31      	cmp	r3, #49	@ 0x31
 8000fcc:	d105      	bne.n	8000fda <main+0x62>
            	calibrate_sensor(&hi2c1, &huart2, BNO055_ADDRESS);
 8000fce:	2229      	movs	r2, #41	@ 0x29
 8000fd0:	4908      	ldr	r1, [pc, #32]	@ (8000ff4 <main+0x7c>)
 8000fd2:	4807      	ldr	r0, [pc, #28]	@ (8000ff0 <main+0x78>)
 8000fd4:	f000 f9a0 	bl	8001318 <calibrate_sensor>
 8000fd8:	e006      	b.n	8000fe8 <main+0x70>
            } else if (command == '2') {
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b32      	cmp	r3, #50	@ 0x32
 8000fde:	d103      	bne.n	8000fe8 <main+0x70>
                get_info(&hi2c1, BNO055_ADDRESS);
 8000fe0:	2129      	movs	r1, #41	@ 0x29
 8000fe2:	4803      	ldr	r0, [pc, #12]	@ (8000ff0 <main+0x78>)
 8000fe4:	f000 f9c0 	bl	8001368 <get_info>
            }
        }
        HAL_Delay(100); // Delay to avoid flooding the serial output
 8000fe8:	2064      	movs	r0, #100	@ 0x64
 8000fea:	f000 fd6d 	bl	8001ac8 <HAL_Delay>
        if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE)) {
 8000fee:	e7dd      	b.n	8000fac <main+0x34>
 8000ff0:	200001f0 	.word	0x200001f0
 8000ff4:	20000244 	.word	0x20000244

08000ff8 <I2C_Scan>:
    }
}

void I2C_Scan(I2C_HandleTypeDef *i2c) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08c      	sub	sp, #48	@ 0x30
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
    uint8_t address;
    for (address = 1; address < 128; address++) {
 8001000:	2301      	movs	r3, #1
 8001002:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001006:	e017      	b.n	8001038 <I2C_Scan+0x40>
        if (HAL_I2C_IsDeviceReady(i2c, (address << 1), 1, 10) == HAL_OK) {
 8001008:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800100c:	b29b      	uxth	r3, r3
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	b299      	uxth	r1, r3
 8001012:	230a      	movs	r3, #10
 8001014:	2201      	movs	r2, #1
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f001 fcd6 	bl	80029c8 <HAL_I2C_IsDeviceReady>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d105      	bne.n	800102e <I2C_Scan+0x36>
            char msg[32];
            sprintf(msg, "I2C device found at address:");
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	4909      	ldr	r1, [pc, #36]	@ (800104c <I2C_Scan+0x54>)
 8001028:	4618      	mov	r0, r3
 800102a:	f005 fda1 	bl	8006b70 <siprintf>
    for (address = 1; address < 128; address++) {
 800102e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001032:	3301      	adds	r3, #1
 8001034:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001038:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800103c:	2b00      	cmp	r3, #0
 800103e:	dae3      	bge.n	8001008 <I2C_Scan+0x10>
        }
    }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3730      	adds	r7, #48	@ 0x30
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	08008de0 	.word	0x08008de0

08001050 <BNO055_Init>:


void BNO055_Init(I2C_HandleTypeDef *hi2c) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af04      	add	r7, sp, #16
 8001056:	6078      	str	r0, [r7, #4]
    uint8_t config_data = OPERATION_MODE_CONFIG;
 8001058:	2300      	movs	r3, #0
 800105a:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef ret;

    // Set operation mode to CONFIG
    ret = HAL_I2C_Mem_Write(hi2c, BNO055_ADDRESS << 1, BNO055_OPR_MODE_ADDR, I2C_MEMADD_SIZE_8BIT, &config_data, 1, 100);
 800105c:	2364      	movs	r3, #100	@ 0x64
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	2301      	movs	r3, #1
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	f107 030e 	add.w	r3, r7, #14
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	223d      	movs	r2, #61	@ 0x3d
 800106e:	2152      	movs	r1, #82	@ 0x52
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f001 f97d 	bl	8002370 <HAL_I2C_Mem_Write>
 8001076:	4603      	mov	r3, r0
 8001078:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d15f      	bne.n	8001140 <BNO055_Init+0xf0>
        // Handle write error
        return;
    }
    HAL_Delay(100);
 8001080:	2064      	movs	r0, #100	@ 0x64
 8001082:	f000 fd21 	bl	8001ac8 <HAL_Delay>

    // Set power mode to NORMAL
    uint8_t power_mode = POWER_MODE_NORMAL;
 8001086:	2300      	movs	r3, #0
 8001088:	737b      	strb	r3, [r7, #13]
    ret = HAL_I2C_Mem_Write(hi2c, BNO055_ADDRESS << 1, BNO055_PWR_MODE_ADDR, I2C_MEMADD_SIZE_8BIT, &power_mode, 1, 100);
 800108a:	2364      	movs	r3, #100	@ 0x64
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	2301      	movs	r3, #1
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f107 030d 	add.w	r3, r7, #13
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	223e      	movs	r2, #62	@ 0x3e
 800109c:	2152      	movs	r1, #82	@ 0x52
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f001 f966 	bl	8002370 <HAL_I2C_Mem_Write>
 80010a4:	4603      	mov	r3, r0
 80010a6:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d14a      	bne.n	8001144 <BNO055_Init+0xf4>
        // Handle write error
        return;
    }
    HAL_Delay(100);
 80010ae:	2064      	movs	r0, #100	@ 0x64
 80010b0:	f000 fd0a 	bl	8001ac8 <HAL_Delay>

    // Enable external crystal oscillator
    uint8_t sys_trigger = 0x80;
 80010b4:	2380      	movs	r3, #128	@ 0x80
 80010b6:	733b      	strb	r3, [r7, #12]
    ret = HAL_I2C_Mem_Write(hi2c, BNO055_ADDRESS << 1, BNO055_SYS_TRIGGER_ADDR, I2C_MEMADD_SIZE_8BIT, &sys_trigger, 1, 100);
 80010b8:	2364      	movs	r3, #100	@ 0x64
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	223f      	movs	r2, #63	@ 0x3f
 80010ca:	2152      	movs	r1, #82	@ 0x52
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f001 f94f 	bl	8002370 <HAL_I2C_Mem_Write>
 80010d2:	4603      	mov	r3, r0
 80010d4:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d135      	bne.n	8001148 <BNO055_Init+0xf8>
        // Handle write error
        return;
    }
    HAL_Delay(100);
 80010dc:	2064      	movs	r0, #100	@ 0x64
 80010de:	f000 fcf3 	bl	8001ac8 <HAL_Delay>

    // Set units selection
    uint8_t unit_sel = UNIT_SEL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	72fb      	strb	r3, [r7, #11]
    ret = HAL_I2C_Mem_Write(hi2c, BNO055_ADDRESS << 1, BNO055_UNIT_SEL_ADDR, I2C_MEMADD_SIZE_8BIT, &unit_sel, 1, 100);
 80010e6:	2364      	movs	r3, #100	@ 0x64
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	2301      	movs	r3, #1
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	f107 030b 	add.w	r3, r7, #11
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	223b      	movs	r2, #59	@ 0x3b
 80010f8:	2152      	movs	r1, #82	@ 0x52
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f001 f938 	bl	8002370 <HAL_I2C_Mem_Write>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d120      	bne.n	800114c <BNO055_Init+0xfc>
        // Handle write error
        return;
    }
    HAL_Delay(100);
 800110a:	2064      	movs	r0, #100	@ 0x64
 800110c:	f000 fcdc 	bl	8001ac8 <HAL_Delay>

    // Set operation mode to NDOF
    config_data = OPERATION_MODE_NDOF;
 8001110:	230c      	movs	r3, #12
 8001112:	73bb      	strb	r3, [r7, #14]
    ret = HAL_I2C_Mem_Write(hi2c, BNO055_ADDRESS << 1, BNO055_OPR_MODE_ADDR, I2C_MEMADD_SIZE_8BIT, &config_data, 1, 100);
 8001114:	2364      	movs	r3, #100	@ 0x64
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	2301      	movs	r3, #1
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	f107 030e 	add.w	r3, r7, #14
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	223d      	movs	r2, #61	@ 0x3d
 8001126:	2152      	movs	r1, #82	@ 0x52
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f001 f921 	bl	8002370 <HAL_I2C_Mem_Write>
 800112e:	4603      	mov	r3, r0
 8001130:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10b      	bne.n	8001150 <BNO055_Init+0x100>
        // Handle write error
        return;
    }
    HAL_Delay(100);
 8001138:	2064      	movs	r0, #100	@ 0x64
 800113a:	f000 fcc5 	bl	8001ac8 <HAL_Delay>
 800113e:	e008      	b.n	8001152 <BNO055_Init+0x102>
        return;
 8001140:	bf00      	nop
 8001142:	e006      	b.n	8001152 <BNO055_Init+0x102>
        return;
 8001144:	bf00      	nop
 8001146:	e004      	b.n	8001152 <BNO055_Init+0x102>
        return;
 8001148:	bf00      	nop
 800114a:	e002      	b.n	8001152 <BNO055_Init+0x102>
        return;
 800114c:	bf00      	nop
 800114e:	e000      	b.n	8001152 <BNO055_Init+0x102>
        return;
 8001150:	bf00      	nop
}
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <Read_Accelerometer>:


void Read_Accelerometer(I2C_HandleTypeDef *hi2c, uint16_t sensor_address, float *accel_data) {
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b08b      	sub	sp, #44	@ 0x2c
 800115c:	af04      	add	r7, sp, #16
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	460b      	mov	r3, r1
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	817b      	strh	r3, [r7, #10]
    uint8_t buffer[6];
    HAL_StatusTypeDef ret;

    ret = HAL_I2C_Mem_Read(hi2c, sensor_address << 1, BNO055_ACCEL_DATA_X_LSB_ADDR, I2C_MEMADD_SIZE_8BIT, buffer, 6, 100);
 8001166:	897b      	ldrh	r3, [r7, #10]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	b299      	uxth	r1, r3
 800116c:	2364      	movs	r3, #100	@ 0x64
 800116e:	9302      	str	r3, [sp, #8]
 8001170:	2306      	movs	r3, #6
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	2208      	movs	r2, #8
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f001 f9f0 	bl	8002564 <HAL_I2C_Mem_Read>
 8001184:	4603      	mov	r3, r0
 8001186:	75fb      	strb	r3, [r7, #23]
    if (ret == HAL_OK) {
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d14b      	bne.n	8001226 <Read_Accelerometer+0xce>
        accel_data[0] = (int16_t)((buffer[1] << 8) | buffer[0]) / 100.0; // X-axis
 800118e:	7c7b      	ldrb	r3, [r7, #17]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	b21a      	sxth	r2, r3
 8001194:	7c3b      	ldrb	r3, [r7, #16]
 8001196:	b21b      	sxth	r3, r3
 8001198:	4313      	orrs	r3, r2
 800119a:	b21b      	sxth	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9e1 	bl	8000564 <__aeabi_i2d>
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <Read_Accelerometer+0xdc>)
 80011a8:	f7ff fb70 	bl	800088c <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fd18 	bl	8000be8 <__aeabi_d2f>
 80011b8:	4602      	mov	r2, r0
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	601a      	str	r2, [r3, #0]
        accel_data[1] = (int16_t)((buffer[3] << 8) | buffer[2]) / 100.0; // Y-axis
 80011be:	7cfb      	ldrb	r3, [r7, #19]
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	7cbb      	ldrb	r3, [r7, #18]
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f9c9 	bl	8000564 <__aeabi_i2d>
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <Read_Accelerometer+0xdc>)
 80011d8:	f7ff fb58 	bl	800088c <__aeabi_ddiv>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	1d1c      	adds	r4, r3, #4
 80011e8:	f7ff fcfe 	bl	8000be8 <__aeabi_d2f>
 80011ec:	4603      	mov	r3, r0
 80011ee:	6023      	str	r3, [r4, #0]
        accel_data[2] = (int16_t)((buffer[5] << 8) | buffer[4]) / 100.0; // Z-axis
 80011f0:	7d7b      	ldrb	r3, [r7, #21]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	7d3b      	ldrb	r3, [r7, #20]
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f9b0 	bl	8000564 <__aeabi_i2d>
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <Read_Accelerometer+0xdc>)
 800120a:	f7ff fb3f 	bl	800088c <__aeabi_ddiv>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f103 0408 	add.w	r4, r3, #8
 800121c:	f7ff fce4 	bl	8000be8 <__aeabi_d2f>
 8001220:	4603      	mov	r3, r0
 8001222:	6023      	str	r3, [r4, #0]
    } else {
        Error_Handler();
    }
}
 8001224:	e001      	b.n	800122a <Read_Accelerometer+0xd2>
        Error_Handler();
 8001226:	f000 f9c9 	bl	80015bc <Error_Handler>
}
 800122a:	bf00      	nop
 800122c:	371c      	adds	r7, #28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd90      	pop	{r4, r7, pc}
 8001232:	bf00      	nop
 8001234:	40590000 	.word	0x40590000

08001238 <Read_Gyroscope>:

void Read_Gyroscope(I2C_HandleTypeDef *hi2c, uint16_t sensor_address, float *gyro_data) {
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b08b      	sub	sp, #44	@ 0x2c
 800123c:	af04      	add	r7, sp, #16
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	460b      	mov	r3, r1
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	817b      	strh	r3, [r7, #10]
    uint8_t buffer[6];
    HAL_StatusTypeDef ret;

    ret = HAL_I2C_Mem_Read(hi2c, sensor_address << 1, BNO055_GYRO_DATA_X_LSB_ADDR, I2C_MEMADD_SIZE_8BIT, buffer, 6, 100);
 8001246:	897b      	ldrh	r3, [r7, #10]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	b299      	uxth	r1, r3
 800124c:	2364      	movs	r3, #100	@ 0x64
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	2306      	movs	r3, #6
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	2214      	movs	r2, #20
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f001 f980 	bl	8002564 <HAL_I2C_Mem_Read>
 8001264:	4603      	mov	r3, r0
 8001266:	75fb      	strb	r3, [r7, #23]
    if (ret == HAL_OK) {
 8001268:	7dfb      	ldrb	r3, [r7, #23]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d14b      	bne.n	8001306 <Read_Gyroscope+0xce>
        gyro_data[0] = (int16_t)((buffer[1] << 8) | buffer[0]) / 16.0; // X-axis
 800126e:	7c7b      	ldrb	r3, [r7, #17]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b21a      	sxth	r2, r3
 8001274:	7c3b      	ldrb	r3, [r7, #16]
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b21b      	sxth	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f971 	bl	8000564 <__aeabi_i2d>
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b23      	ldr	r3, [pc, #140]	@ (8001314 <Read_Gyroscope+0xdc>)
 8001288:	f7ff fb00 	bl	800088c <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f7ff fca8 	bl	8000be8 <__aeabi_d2f>
 8001298:	4602      	mov	r2, r0
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	601a      	str	r2, [r3, #0]
        gyro_data[1] = (int16_t)((buffer[3] << 8) | buffer[2]) / 16.0; // Y-axis
 800129e:	7cfb      	ldrb	r3, [r7, #19]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	7cbb      	ldrb	r3, [r7, #18]
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff f959 	bl	8000564 <__aeabi_i2d>
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <Read_Gyroscope+0xdc>)
 80012b8:	f7ff fae8 	bl	800088c <__aeabi_ddiv>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4610      	mov	r0, r2
 80012c2:	4619      	mov	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	1d1c      	adds	r4, r3, #4
 80012c8:	f7ff fc8e 	bl	8000be8 <__aeabi_d2f>
 80012cc:	4603      	mov	r3, r0
 80012ce:	6023      	str	r3, [r4, #0]
        gyro_data[2] = (int16_t)((buffer[5] << 8) | buffer[4]) / 16.0; // Z-axis
 80012d0:	7d7b      	ldrb	r3, [r7, #21]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	7d3b      	ldrb	r3, [r7, #20]
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4313      	orrs	r3, r2
 80012dc:	b21b      	sxth	r3, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f940 	bl	8000564 <__aeabi_i2d>
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <Read_Gyroscope+0xdc>)
 80012ea:	f7ff facf 	bl	800088c <__aeabi_ddiv>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f103 0408 	add.w	r4, r3, #8
 80012fc:	f7ff fc74 	bl	8000be8 <__aeabi_d2f>
 8001300:	4603      	mov	r3, r0
 8001302:	6023      	str	r3, [r4, #0]
    } else {
        Error_Handler();
    }
}
 8001304:	e001      	b.n	800130a <Read_Gyroscope+0xd2>
        Error_Handler();
 8001306:	f000 f959 	bl	80015bc <Error_Handler>
}
 800130a:	bf00      	nop
 800130c:	371c      	adds	r7, #28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd90      	pop	{r4, r7, pc}
 8001312:	bf00      	nop
 8001314:	40300000 	.word	0x40300000

08001318 <calibrate_sensor>:

void calibrate_sensor(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart, uint16_t sensor_address) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	@ 0x28
 800131c:	af04      	add	r7, sp, #16
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	4613      	mov	r3, r2
 8001324:	80fb      	strh	r3, [r7, #6]
    uint8_t calib_data[1];
    HAL_StatusTypeDef ret;

    // Read the calibration status register (BNO055_CALIB_STAT_ADDR is 0x35)
    ret = HAL_I2C_Mem_Read(hi2c, sensor_address << 1, 0x35, I2C_MEMADD_SIZE_8BIT, calib_data, 1, 100);
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	b299      	uxth	r1, r3
 800132c:	2364      	movs	r3, #100	@ 0x64
 800132e:	9302      	str	r3, [sp, #8]
 8001330:	2301      	movs	r3, #1
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2301      	movs	r3, #1
 800133c:	2235      	movs	r2, #53	@ 0x35
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f001 f910 	bl	8002564 <HAL_I2C_Mem_Read>
 8001344:	4603      	mov	r3, r0
 8001346:	75fb      	strb	r3, [r7, #23]
    if (ret != HAL_OK) {
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d108      	bne.n	8001360 <calibrate_sensor+0x48>
        return;
    }

    // Transmit the calibration status over UART
    HAL_UART_Transmit(huart, calib_data, 1, HAL_MAX_DELAY);
 800134e:	f107 0114 	add.w	r1, r7, #20
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	2201      	movs	r2, #1
 8001358:	68b8      	ldr	r0, [r7, #8]
 800135a:	f004 fa9d 	bl	8005898 <HAL_UART_Transmit>
 800135e:	e000      	b.n	8001362 <calibrate_sensor+0x4a>
        return;
 8001360:	bf00      	nop
}
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <get_info>:


void get_info(I2C_HandleTypeDef *hi2c, uint16_t sensor_address) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b08e      	sub	sp, #56	@ 0x38
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
    float accel_data[3];
    float gyro_data[3];

    Read_Accelerometer(hi2c, sensor_address, accel_data);
 8001374:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001378:	887b      	ldrh	r3, [r7, #2]
 800137a:	4619      	mov	r1, r3
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff feeb 	bl	8001158 <Read_Accelerometer>
    Read_Gyroscope(hi2c, sensor_address, gyro_data);
 8001382:	f107 0220 	add.w	r2, r7, #32
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	4619      	mov	r1, r3
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ff54 	bl	8001238 <Read_Gyroscope>

    float data[6] = {accel_data[0], accel_data[1], accel_data[2], gyro_data[0], gyro_data[1], gyro_data[2]};
 8001390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	6a3b      	ldr	r3, [r7, #32]
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a2:	61bb      	str	r3, [r7, #24]
 80013a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a6:	61fb      	str	r3, [r7, #28]

	HAL_UART_Transmit(&huart2, (uint8_t *)data, sizeof(data), HAL_MAX_DELAY);
 80013a8:	f107 0108 	add.w	r1, r7, #8
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	2218      	movs	r2, #24
 80013b2:	4803      	ldr	r0, [pc, #12]	@ (80013c0 <get_info+0x58>)
 80013b4:	f004 fa70 	bl	8005898 <HAL_UART_Transmit>
}
 80013b8:	bf00      	nop
 80013ba:	3738      	adds	r7, #56	@ 0x38
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000244 	.word	0x20000244

080013c4 <SystemClock_Config>:

void SystemClock_Config(void) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b094      	sub	sp, #80	@ 0x50
 80013c8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	2234      	movs	r2, #52	@ 0x34
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f005 fc2f 	bl	8006c36 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	4b23      	ldr	r3, [pc, #140]	@ (800147c <SystemClock_Config+0xb8>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f0:	4a22      	ldr	r2, [pc, #136]	@ (800147c <SystemClock_Config+0xb8>)
 80013f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f8:	4b20      	ldr	r3, [pc, #128]	@ (800147c <SystemClock_Config+0xb8>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001404:	2300      	movs	r3, #0
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	4b1d      	ldr	r3, [pc, #116]	@ (8001480 <SystemClock_Config+0xbc>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001410:	4a1b      	ldr	r2, [pc, #108]	@ (8001480 <SystemClock_Config+0xbc>)
 8001412:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <SystemClock_Config+0xbc>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001424:	2302      	movs	r3, #2
 8001426:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001428:	2301      	movs	r3, #1
 800142a:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800142c:	2310      	movs	r3, #16
 800142e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001430:	2300      	movs	r3, #0
 8001432:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4618      	mov	r0, r3
 800143a:	f003 ff3f 	bl	80052bc <HAL_RCC_OscConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x84>
        Error_Handler();
 8001444:	f000 f8ba 	bl	80015bc <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001448:	230f      	movs	r3, #15
 800144a:	60bb      	str	r3, [r7, #8]
                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800145c:	f107 0308 	add.w	r3, r7, #8
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f003 fc66 	bl	8004d34 <HAL_RCC_ClockConfig>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SystemClock_Config+0xae>
        Error_Handler();
 800146e:	f000 f8a5 	bl	80015bc <Error_Handler>
    }
}
 8001472:	bf00      	nop
 8001474:	3750      	adds	r7, #80	@ 0x50
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	40007000 	.word	0x40007000

08001484 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void) {
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8001488:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <MX_USART2_UART_Init+0x4c>)
 800148a:	4a12      	ldr	r2, [pc, #72]	@ (80014d4 <MX_USART2_UART_Init+0x50>)
 800148c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800148e:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <MX_USART2_UART_Init+0x4c>)
 8001490:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001494:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001496:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <MX_USART2_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800149c:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <MX_USART2_UART_Init+0x4c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <MX_USART2_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80014a8:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <MX_USART2_UART_Init+0x4c>)
 80014aa:	220c      	movs	r2, #12
 80014ac:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ae:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <MX_USART2_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <MX_USART2_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 80014ba:	4805      	ldr	r0, [pc, #20]	@ (80014d0 <MX_USART2_UART_Init+0x4c>)
 80014bc:	f004 f99c 	bl	80057f8 <HAL_UART_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_USART2_UART_Init+0x46>
        Error_Handler();
 80014c6:	f000 f879 	bl	80015bc <Error_Handler>
    }
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000244 	.word	0x20000244
 80014d4:	40004400 	.word	0x40004400

080014d8 <MX_I2C1_Init>:

static void MX_I2C1_Init(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 80014dc:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <MX_I2C1_Init+0x50>)
 80014de:	4a13      	ldr	r2, [pc, #76]	@ (800152c <MX_I2C1_Init+0x54>)
 80014e0:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 80014e2:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <MX_I2C1_Init+0x50>)
 80014e4:	4a12      	ldr	r2, [pc, #72]	@ (8001530 <MX_I2C1_Init+0x58>)
 80014e6:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <MX_I2C1_Init+0x50>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <MX_I2C1_Init+0x50>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <MX_I2C1_Init+0x50>)
 80014f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014fa:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <MX_I2C1_Init+0x50>)
 80014fe:	2200      	movs	r2, #0
 8001500:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <MX_I2C1_Init+0x50>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001508:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <MX_I2C1_Init+0x50>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <MX_I2C1_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001514:	4804      	ldr	r0, [pc, #16]	@ (8001528 <MX_I2C1_Init+0x50>)
 8001516:	f000 fdd1 	bl	80020bc <HAL_I2C_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_I2C1_Init+0x4c>
        Error_Handler();
 8001520:	f000 f84c 	bl	80015bc <Error_Handler>
    }
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200001f0 	.word	0x200001f0
 800152c:	40005400 	.word	0x40005400
 8001530:	00061a80 	.word	0x00061a80

08001534 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <MX_GPIO_Init+0x84>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a1d      	ldr	r2, [pc, #116]	@ (80015b8 <MX_GPIO_Init+0x84>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <MX_GPIO_Init+0x84>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <MX_GPIO_Init+0x84>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	4a16      	ldr	r2, [pc, #88]	@ (80015b8 <MX_GPIO_Init+0x84>)
 8001560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001564:	6313      	str	r3, [r2, #48]	@ 0x30
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <MX_GPIO_Init+0x84>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <MX_GPIO_Init+0x84>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	4a0f      	ldr	r2, [pc, #60]	@ (80015b8 <MX_GPIO_Init+0x84>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6313      	str	r3, [r2, #48]	@ 0x30
 8001582:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <MX_GPIO_Init+0x84>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <MX_GPIO_Init+0x84>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	4a08      	ldr	r2, [pc, #32]	@ (80015b8 <MX_GPIO_Init+0x84>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6313      	str	r3, [r2, #48]	@ 0x30
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_GPIO_Init+0x84>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800

080015bc <Error_Handler>:

void Error_Handler(void) {
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	bf00      	nop
    __disable_irq();
    while (1) {
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <Error_Handler+0x8>

080015c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <HAL_MspInit+0x4c>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001614 <HAL_MspInit+0x4c>)
 80015d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015de:	4b0d      	ldr	r3, [pc, #52]	@ (8001614 <HAL_MspInit+0x4c>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <HAL_MspInit+0x4c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	4a08      	ldr	r2, [pc, #32]	@ (8001614 <HAL_MspInit+0x4c>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015fa:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <HAL_MspInit+0x4c>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800

08001618 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	@ 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a21      	ldr	r2, [pc, #132]	@ (80016bc <HAL_I2C_MspInit+0xa4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d13b      	bne.n	80016b2 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b20      	ldr	r3, [pc, #128]	@ (80016c0 <HAL_I2C_MspInit+0xa8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a1f      	ldr	r2, [pc, #124]	@ (80016c0 <HAL_I2C_MspInit+0xa8>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b1d      	ldr	r3, [pc, #116]	@ (80016c0 <HAL_I2C_MspInit+0xa8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001656:	23c0      	movs	r3, #192	@ 0xc0
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165a:	2312      	movs	r3, #18
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001666:	2304      	movs	r3, #4
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	4814      	ldr	r0, [pc, #80]	@ (80016c4 <HAL_I2C_MspInit+0xac>)
 8001672:	f000 fb8f 	bl	8001d94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <HAL_I2C_MspInit+0xa8>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	4a10      	ldr	r2, [pc, #64]	@ (80016c0 <HAL_I2C_MspInit+0xa8>)
 8001680:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001684:	6413      	str	r3, [r2, #64]	@ 0x40
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <HAL_I2C_MspInit+0xa8>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2100      	movs	r1, #0
 8001696:	201f      	movs	r0, #31
 8001698:	f000 fb15 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800169c:	201f      	movs	r0, #31
 800169e:	f000 fb2e 	bl	8001cfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	2020      	movs	r0, #32
 80016a8:	f000 fb0d 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016ac:	2020      	movs	r0, #32
 80016ae:	f000 fb26 	bl	8001cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016b2:	bf00      	nop
 80016b4:	3728      	adds	r7, #40	@ 0x28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40005400 	.word	0x40005400
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020400 	.word	0x40020400

080016c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	@ 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a19      	ldr	r2, [pc, #100]	@ (800174c <HAL_UART_MspInit+0x84>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d12b      	bne.n	8001742 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <HAL_UART_MspInit+0x88>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	4a17      	ldr	r2, [pc, #92]	@ (8001750 <HAL_UART_MspInit+0x88>)
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <HAL_UART_MspInit+0x88>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <HAL_UART_MspInit+0x88>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	4a10      	ldr	r2, [pc, #64]	@ (8001750 <HAL_UART_MspInit+0x88>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6313      	str	r3, [r2, #48]	@ 0x30
 8001716:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <HAL_UART_MspInit+0x88>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001722:	230c      	movs	r3, #12
 8001724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001732:	2307      	movs	r3, #7
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	@ (8001754 <HAL_UART_MspInit+0x8c>)
 800173e:	f000 fb29 	bl	8001d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	@ 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40004400 	.word	0x40004400
 8001750:	40023800 	.word	0x40023800
 8001754:	40020000 	.word	0x40020000

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <NMI_Handler+0x4>

08001760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <HardFault_Handler+0x4>

08001768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <MemManage_Handler+0x4>

08001770 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <UsageFault_Handler+0x4>

08001780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ae:	f000 f96b 	bl	8001a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <I2C1_EV_IRQHandler+0x10>)
 80017be:	f001 fa31 	bl	8002c24 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200001f0 	.word	0x200001f0

080017cc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017d0:	4802      	ldr	r0, [pc, #8]	@ (80017dc <I2C1_ER_IRQHandler+0x10>)
 80017d2:	f001 fb7a 	bl	8002eca <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200001f0 	.word	0x200001f0

080017e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return 1;
 80017e4:	2301      	movs	r3, #1
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_kill>:

int _kill(int pid, int sig)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017fa:	f005 fa6f 	bl	8006cdc <__errno>
 80017fe:	4603      	mov	r3, r0
 8001800:	2216      	movs	r2, #22
 8001802:	601a      	str	r2, [r3, #0]
  return -1;
 8001804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <_exit>:

void _exit (int status)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ffe7 	bl	80017f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001822:	bf00      	nop
 8001824:	e7fd      	b.n	8001822 <_exit+0x12>

08001826 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e00a      	b.n	800184e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001838:	f3af 8000 	nop.w
 800183c:	4601      	mov	r1, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	60ba      	str	r2, [r7, #8]
 8001844:	b2ca      	uxtb	r2, r1
 8001846:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3301      	adds	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	dbf0      	blt.n	8001838 <_read+0x12>
  }

  return len;
 8001856:	687b      	ldr	r3, [r7, #4]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	e009      	b.n	8001886 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	60ba      	str	r2, [r7, #8]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3301      	adds	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	429a      	cmp	r2, r3
 800188c:	dbf1      	blt.n	8001872 <_write+0x12>
  }
  return len;
 800188e:	687b      	ldr	r3, [r7, #4]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_close>:

int _close(int file)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018c0:	605a      	str	r2, [r3, #4]
  return 0;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <_isatty>:

int _isatty(int file)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018d8:	2301      	movs	r3, #1
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b085      	sub	sp, #20
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001908:	4a14      	ldr	r2, [pc, #80]	@ (800195c <_sbrk+0x5c>)
 800190a:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <_sbrk+0x60>)
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001914:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800191c:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <_sbrk+0x64>)
 800191e:	4a12      	ldr	r2, [pc, #72]	@ (8001968 <_sbrk+0x68>)
 8001920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <_sbrk+0x64>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	429a      	cmp	r2, r3
 800192e:	d207      	bcs.n	8001940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001930:	f005 f9d4 	bl	8006cdc <__errno>
 8001934:	4603      	mov	r3, r0
 8001936:	220c      	movs	r2, #12
 8001938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193a:	f04f 33ff 	mov.w	r3, #4294967295
 800193e:	e009      	b.n	8001954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001940:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <_sbrk+0x64>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001946:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	4a05      	ldr	r2, [pc, #20]	@ (8001964 <_sbrk+0x64>)
 8001950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001952:	68fb      	ldr	r3, [r7, #12]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20020000 	.word	0x20020000
 8001960:	00000400 	.word	0x00000400
 8001964:	2000028c 	.word	0x2000028c
 8001968:	200003e0 	.word	0x200003e0

0800196c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <SystemInit+0x20>)
 8001972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001976:	4a05      	ldr	r2, [pc, #20]	@ (800198c <SystemInit+0x20>)
 8001978:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800197c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001990:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/  bl  SystemInit
 8001994:	f7ff ffea 	bl	800196c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001998:	480c      	ldr	r0, [pc, #48]	@ (80019cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800199a:	490d      	ldr	r1, [pc, #52]	@ (80019d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800199c:	4a0d      	ldr	r2, [pc, #52]	@ (80019d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a0:	e002      	b.n	80019a8 <LoopCopyDataInit>

080019a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a6:	3304      	adds	r3, #4

080019a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ac:	d3f9      	bcc.n	80019a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ae:	4a0a      	ldr	r2, [pc, #40]	@ (80019d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019b0:	4c0a      	ldr	r4, [pc, #40]	@ (80019dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b4:	e001      	b.n	80019ba <LoopFillZerobss>

080019b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b8:	3204      	adds	r2, #4

080019ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019bc:	d3fb      	bcc.n	80019b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019be:	f005 f993 	bl	8006ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c2:	f7ff fad9 	bl	8000f78 <main>
  bx  lr    
 80019c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80019d4:	08009198 	.word	0x08009198
  ldr r2, =_sbss
 80019d8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80019dc:	200003e0 	.word	0x200003e0

080019e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e0:	e7fe      	b.n	80019e0 <ADC_IRQHandler>
	...

080019e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <HAL_Init+0x40>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001a24 <HAL_Init+0x40>)
 80019ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <HAL_Init+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001a24 <HAL_Init+0x40>)
 80019fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a00:	4b08      	ldr	r3, [pc, #32]	@ (8001a24 <HAL_Init+0x40>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a07      	ldr	r2, [pc, #28]	@ (8001a24 <HAL_Init+0x40>)
 8001a06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a0c:	2003      	movs	r0, #3
 8001a0e:	f000 f94f 	bl	8001cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a12:	200f      	movs	r0, #15
 8001a14:	f000 f808 	bl	8001a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a18:	f7ff fdd6 	bl	80015c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023c00 	.word	0x40023c00

08001a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a30:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <HAL_InitTick+0x54>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <HAL_InitTick+0x58>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f967 	bl	8001d1a <HAL_SYSTICK_Config>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00e      	b.n	8001a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d80a      	bhi.n	8001a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295
 8001a64:	f000 f92f 	bl	8001cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a68:	4a06      	ldr	r2, [pc, #24]	@ (8001a84 <HAL_InitTick+0x5c>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	20000008 	.word	0x20000008
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <HAL_IncTick+0x20>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <HAL_IncTick+0x24>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a04      	ldr	r2, [pc, #16]	@ (8001aac <HAL_IncTick+0x24>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000008 	.word	0x20000008
 8001aac:	20000290 	.word	0x20000290

08001ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	@ (8001ac4 <HAL_GetTick+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000290 	.word	0x20000290

08001ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff ffee 	bl	8001ab0 <HAL_GetTick>
 8001ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d005      	beq.n	8001aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <HAL_Delay+0x44>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aee:	bf00      	nop
 8001af0:	f7ff ffde 	bl	8001ab0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d8f7      	bhi.n	8001af0 <HAL_Delay+0x28>
  {
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000008 	.word	0x20000008

08001b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b42:	4a04      	ldr	r2, [pc, #16]	@ (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	60d3      	str	r3, [r2, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	db0b      	blt.n	8001b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	f003 021f 	and.w	r2, r3, #31
 8001b8c:	4907      	ldr	r1, [pc, #28]	@ (8001bac <__NVIC_EnableIRQ+0x38>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	2001      	movs	r0, #1
 8001b96:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000e100 	.word	0xe000e100

08001bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db0a      	blt.n	8001bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	490c      	ldr	r1, [pc, #48]	@ (8001bfc <__NVIC_SetPriority+0x4c>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd8:	e00a      	b.n	8001bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4908      	ldr	r1, [pc, #32]	@ (8001c00 <__NVIC_SetPriority+0x50>)
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3b04      	subs	r3, #4
 8001be8:	0112      	lsls	r2, r2, #4
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	440b      	add	r3, r1
 8001bee:	761a      	strb	r2, [r3, #24]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000e100 	.word	0xe000e100
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	@ 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f1c3 0307 	rsb	r3, r3, #7
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	bf28      	it	cs
 8001c22:	2304      	movcs	r3, #4
 8001c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d902      	bls.n	8001c34 <NVIC_EncodePriority+0x30>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3b03      	subs	r3, #3
 8001c32:	e000      	b.n	8001c36 <NVIC_EncodePriority+0x32>
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	401a      	ands	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43d9      	mvns	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	4313      	orrs	r3, r2
         );
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3724      	adds	r7, #36	@ 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c7c:	d301      	bcc.n	8001c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00f      	b.n	8001ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c82:	4a0a      	ldr	r2, [pc, #40]	@ (8001cac <SysTick_Config+0x40>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f7ff ff8e 	bl	8001bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <SysTick_Config+0x40>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9a:	4b04      	ldr	r3, [pc, #16]	@ (8001cac <SysTick_Config+0x40>)
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff29 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd8:	f7ff ff3e 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	6978      	ldr	r0, [r7, #20]
 8001ce4:	f7ff ff8e 	bl	8001c04 <NVIC_EncodePriority>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff5d 	bl	8001bb0 <__NVIC_SetPriority>
}
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff31 	bl	8001b74 <__NVIC_EnableIRQ>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ffa2 	bl	8001c6c <SysTick_Config>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d004      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2280      	movs	r2, #128	@ 0x80
 8001d4a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e00c      	b.n	8001d6a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2205      	movs	r2, #5
 8001d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0201 	bic.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d84:	b2db      	uxtb	r3, r3
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	@ 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
 8001dae:	e165      	b.n	800207c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001db0:	2201      	movs	r2, #1
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	f040 8154 	bne.w	8002076 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d005      	beq.n	8001de6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d130      	bne.n	8001e48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	2203      	movs	r2, #3
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f003 0201 	and.w	r2, r3, #1
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d017      	beq.n	8001e84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d123      	bne.n	8001ed8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	08da      	lsrs	r2, r3, #3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3208      	adds	r2, #8
 8001e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	220f      	movs	r2, #15
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	08da      	lsrs	r2, r3, #3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3208      	adds	r2, #8
 8001ed2:	69b9      	ldr	r1, [r7, #24]
 8001ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0203 	and.w	r2, r3, #3
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80ae 	beq.w	8002076 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	4b5d      	ldr	r3, [pc, #372]	@ (8002094 <HAL_GPIO_Init+0x300>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f22:	4a5c      	ldr	r2, [pc, #368]	@ (8002094 <HAL_GPIO_Init+0x300>)
 8001f24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f2a:	4b5a      	ldr	r3, [pc, #360]	@ (8002094 <HAL_GPIO_Init+0x300>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f36:	4a58      	ldr	r2, [pc, #352]	@ (8002098 <HAL_GPIO_Init+0x304>)
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	220f      	movs	r2, #15
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4f      	ldr	r2, [pc, #316]	@ (800209c <HAL_GPIO_Init+0x308>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d025      	beq.n	8001fae <HAL_GPIO_Init+0x21a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4e      	ldr	r2, [pc, #312]	@ (80020a0 <HAL_GPIO_Init+0x30c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d01f      	beq.n	8001faa <HAL_GPIO_Init+0x216>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a4d      	ldr	r2, [pc, #308]	@ (80020a4 <HAL_GPIO_Init+0x310>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d019      	beq.n	8001fa6 <HAL_GPIO_Init+0x212>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a4c      	ldr	r2, [pc, #304]	@ (80020a8 <HAL_GPIO_Init+0x314>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d013      	beq.n	8001fa2 <HAL_GPIO_Init+0x20e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a4b      	ldr	r2, [pc, #300]	@ (80020ac <HAL_GPIO_Init+0x318>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00d      	beq.n	8001f9e <HAL_GPIO_Init+0x20a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a4a      	ldr	r2, [pc, #296]	@ (80020b0 <HAL_GPIO_Init+0x31c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d007      	beq.n	8001f9a <HAL_GPIO_Init+0x206>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a49      	ldr	r2, [pc, #292]	@ (80020b4 <HAL_GPIO_Init+0x320>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d101      	bne.n	8001f96 <HAL_GPIO_Init+0x202>
 8001f92:	2306      	movs	r3, #6
 8001f94:	e00c      	b.n	8001fb0 <HAL_GPIO_Init+0x21c>
 8001f96:	2307      	movs	r3, #7
 8001f98:	e00a      	b.n	8001fb0 <HAL_GPIO_Init+0x21c>
 8001f9a:	2305      	movs	r3, #5
 8001f9c:	e008      	b.n	8001fb0 <HAL_GPIO_Init+0x21c>
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x21c>
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e004      	b.n	8001fb0 <HAL_GPIO_Init+0x21c>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e002      	b.n	8001fb0 <HAL_GPIO_Init+0x21c>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_GPIO_Init+0x21c>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	f002 0203 	and.w	r2, r2, #3
 8001fb6:	0092      	lsls	r2, r2, #2
 8001fb8:	4093      	lsls	r3, r2
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc0:	4935      	ldr	r1, [pc, #212]	@ (8002098 <HAL_GPIO_Init+0x304>)
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	089b      	lsrs	r3, r3, #2
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fce:	4b3a      	ldr	r3, [pc, #232]	@ (80020b8 <HAL_GPIO_Init+0x324>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ff2:	4a31      	ldr	r2, [pc, #196]	@ (80020b8 <HAL_GPIO_Init+0x324>)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ff8:	4b2f      	ldr	r3, [pc, #188]	@ (80020b8 <HAL_GPIO_Init+0x324>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800201c:	4a26      	ldr	r2, [pc, #152]	@ (80020b8 <HAL_GPIO_Init+0x324>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002022:	4b25      	ldr	r3, [pc, #148]	@ (80020b8 <HAL_GPIO_Init+0x324>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002046:	4a1c      	ldr	r2, [pc, #112]	@ (80020b8 <HAL_GPIO_Init+0x324>)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800204c:	4b1a      	ldr	r3, [pc, #104]	@ (80020b8 <HAL_GPIO_Init+0x324>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002070:	4a11      	ldr	r2, [pc, #68]	@ (80020b8 <HAL_GPIO_Init+0x324>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3301      	adds	r3, #1
 800207a:	61fb      	str	r3, [r7, #28]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	2b0f      	cmp	r3, #15
 8002080:	f67f ae96 	bls.w	8001db0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3724      	adds	r7, #36	@ 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
 8002098:	40013800 	.word	0x40013800
 800209c:	40020000 	.word	0x40020000
 80020a0:	40020400 	.word	0x40020400
 80020a4:	40020800 	.word	0x40020800
 80020a8:	40020c00 	.word	0x40020c00
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40021400 	.word	0x40021400
 80020b4:	40021800 	.word	0x40021800
 80020b8:	40013c00 	.word	0x40013c00

080020bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e12b      	b.n	8002326 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff fa98 	bl	8001618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2224      	movs	r2, #36	@ 0x24
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0201 	bic.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800210e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800211e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002120:	f002 fefa 	bl	8004f18 <HAL_RCC_GetPCLK1Freq>
 8002124:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4a81      	ldr	r2, [pc, #516]	@ (8002330 <HAL_I2C_Init+0x274>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d807      	bhi.n	8002140 <HAL_I2C_Init+0x84>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4a80      	ldr	r2, [pc, #512]	@ (8002334 <HAL_I2C_Init+0x278>)
 8002134:	4293      	cmp	r3, r2
 8002136:	bf94      	ite	ls
 8002138:	2301      	movls	r3, #1
 800213a:	2300      	movhi	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	e006      	b.n	800214e <HAL_I2C_Init+0x92>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4a7d      	ldr	r2, [pc, #500]	@ (8002338 <HAL_I2C_Init+0x27c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	bf94      	ite	ls
 8002148:	2301      	movls	r3, #1
 800214a:	2300      	movhi	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e0e7      	b.n	8002326 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4a78      	ldr	r2, [pc, #480]	@ (800233c <HAL_I2C_Init+0x280>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	0c9b      	lsrs	r3, r3, #18
 8002160:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	430a      	orrs	r2, r1
 8002174:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4a6a      	ldr	r2, [pc, #424]	@ (8002330 <HAL_I2C_Init+0x274>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d802      	bhi.n	8002190 <HAL_I2C_Init+0xd4>
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	3301      	adds	r3, #1
 800218e:	e009      	b.n	80021a4 <HAL_I2C_Init+0xe8>
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	4a69      	ldr	r2, [pc, #420]	@ (8002340 <HAL_I2C_Init+0x284>)
 800219c:	fba2 2303 	umull	r2, r3, r2, r3
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	3301      	adds	r3, #1
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	430b      	orrs	r3, r1
 80021aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80021b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	495c      	ldr	r1, [pc, #368]	@ (8002330 <HAL_I2C_Init+0x274>)
 80021c0:	428b      	cmp	r3, r1
 80021c2:	d819      	bhi.n	80021f8 <HAL_I2C_Init+0x13c>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1e59      	subs	r1, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80021d2:	1c59      	adds	r1, r3, #1
 80021d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021d8:	400b      	ands	r3, r1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_I2C_Init+0x138>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1e59      	subs	r1, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ec:	3301      	adds	r3, #1
 80021ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f2:	e051      	b.n	8002298 <HAL_I2C_Init+0x1dc>
 80021f4:	2304      	movs	r3, #4
 80021f6:	e04f      	b.n	8002298 <HAL_I2C_Init+0x1dc>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d111      	bne.n	8002224 <HAL_I2C_Init+0x168>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	1e58      	subs	r0, r3, #1
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6859      	ldr	r1, [r3, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	440b      	add	r3, r1
 800220e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002212:	3301      	adds	r3, #1
 8002214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002218:	2b00      	cmp	r3, #0
 800221a:	bf0c      	ite	eq
 800221c:	2301      	moveq	r3, #1
 800221e:	2300      	movne	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	e012      	b.n	800224a <HAL_I2C_Init+0x18e>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1e58      	subs	r0, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	0099      	lsls	r1, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	fbb0 f3f3 	udiv	r3, r0, r3
 800223a:	3301      	adds	r3, #1
 800223c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf0c      	ite	eq
 8002244:	2301      	moveq	r3, #1
 8002246:	2300      	movne	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_I2C_Init+0x196>
 800224e:	2301      	movs	r3, #1
 8002250:	e022      	b.n	8002298 <HAL_I2C_Init+0x1dc>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10e      	bne.n	8002278 <HAL_I2C_Init+0x1bc>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1e58      	subs	r0, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6859      	ldr	r1, [r3, #4]
 8002262:	460b      	mov	r3, r1
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	440b      	add	r3, r1
 8002268:	fbb0 f3f3 	udiv	r3, r0, r3
 800226c:	3301      	adds	r3, #1
 800226e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002276:	e00f      	b.n	8002298 <HAL_I2C_Init+0x1dc>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1e58      	subs	r0, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6859      	ldr	r1, [r3, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	0099      	lsls	r1, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	fbb0 f3f3 	udiv	r3, r0, r3
 800228e:	3301      	adds	r3, #1
 8002290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002294:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	6809      	ldr	r1, [r1, #0]
 800229c:	4313      	orrs	r3, r2
 800229e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69da      	ldr	r2, [r3, #28]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6911      	ldr	r1, [r2, #16]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68d2      	ldr	r2, [r2, #12]
 80022d2:	4311      	orrs	r1, r2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	430b      	orrs	r3, r1
 80022da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	000186a0 	.word	0x000186a0
 8002334:	001e847f 	.word	0x001e847f
 8002338:	003d08ff 	.word	0x003d08ff
 800233c:	431bde83 	.word	0x431bde83
 8002340:	10624dd3 	.word	0x10624dd3

08002344 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002356:	2b80      	cmp	r3, #128	@ 0x80
 8002358:	d103      	bne.n	8002362 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
  }
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af02      	add	r7, sp, #8
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	4608      	mov	r0, r1
 800237a:	4611      	mov	r1, r2
 800237c:	461a      	mov	r2, r3
 800237e:	4603      	mov	r3, r0
 8002380:	817b      	strh	r3, [r7, #10]
 8002382:	460b      	mov	r3, r1
 8002384:	813b      	strh	r3, [r7, #8]
 8002386:	4613      	mov	r3, r2
 8002388:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800238a:	f7ff fb91 	bl	8001ab0 <HAL_GetTick>
 800238e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b20      	cmp	r3, #32
 800239a:	f040 80d9 	bne.w	8002550 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	2319      	movs	r3, #25
 80023a4:	2201      	movs	r2, #1
 80023a6:	496d      	ldr	r1, [pc, #436]	@ (800255c <HAL_I2C_Mem_Write+0x1ec>)
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f002 fa3f 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80023b4:	2302      	movs	r3, #2
 80023b6:	e0cc      	b.n	8002552 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_I2C_Mem_Write+0x56>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e0c5      	b.n	8002552 <HAL_I2C_Mem_Write+0x1e2>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d007      	beq.n	80023ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2221      	movs	r2, #33	@ 0x21
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2240      	movs	r2, #64	@ 0x40
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a3a      	ldr	r2, [r7, #32]
 8002416:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800241c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4a4d      	ldr	r2, [pc, #308]	@ (8002560 <HAL_I2C_Mem_Write+0x1f0>)
 800242c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800242e:	88f8      	ldrh	r0, [r7, #6]
 8002430:	893a      	ldrh	r2, [r7, #8]
 8002432:	8979      	ldrh	r1, [r7, #10]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	4603      	mov	r3, r0
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f001 ffce 	bl	80043e0 <I2C_RequestMemoryWrite>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d052      	beq.n	80024f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e081      	b.n	8002552 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f002 fb04 	bl	8004a60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00d      	beq.n	800247a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	2b04      	cmp	r3, #4
 8002464:	d107      	bne.n	8002476 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002474:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e06b      	b.n	8002552 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	781a      	ldrb	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d11b      	bne.n	80024f0 <HAL_I2C_Mem_Write+0x180>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d017      	beq.n	80024f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c4:	781a      	ldrb	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1aa      	bne.n	800244e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f002 faf7 	bl	8004af0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00d      	beq.n	8002524 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	2b04      	cmp	r3, #4
 800250e:	d107      	bne.n	8002520 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800251e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e016      	b.n	8002552 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	e000      	b.n	8002552 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002550:	2302      	movs	r3, #2
  }
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	00100002 	.word	0x00100002
 8002560:	ffff0000 	.word	0xffff0000

08002564 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08c      	sub	sp, #48	@ 0x30
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	4608      	mov	r0, r1
 800256e:	4611      	mov	r1, r2
 8002570:	461a      	mov	r2, r3
 8002572:	4603      	mov	r3, r0
 8002574:	817b      	strh	r3, [r7, #10]
 8002576:	460b      	mov	r3, r1
 8002578:	813b      	strh	r3, [r7, #8]
 800257a:	4613      	mov	r3, r2
 800257c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800257e:	f7ff fa97 	bl	8001ab0 <HAL_GetTick>
 8002582:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b20      	cmp	r3, #32
 800258e:	f040 8214 	bne.w	80029ba <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	2319      	movs	r3, #25
 8002598:	2201      	movs	r2, #1
 800259a:	497b      	ldr	r1, [pc, #492]	@ (8002788 <HAL_I2C_Mem_Read+0x224>)
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f002 f945 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80025a8:	2302      	movs	r3, #2
 80025aa:	e207      	b.n	80029bc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d101      	bne.n	80025ba <HAL_I2C_Mem_Read+0x56>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e200      	b.n	80029bc <HAL_I2C_Mem_Read+0x458>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d007      	beq.n	80025e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2222      	movs	r2, #34	@ 0x22
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2240      	movs	r2, #64	@ 0x40
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800260a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002610:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4a5b      	ldr	r2, [pc, #364]	@ (800278c <HAL_I2C_Mem_Read+0x228>)
 8002620:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002622:	88f8      	ldrh	r0, [r7, #6]
 8002624:	893a      	ldrh	r2, [r7, #8]
 8002626:	8979      	ldrh	r1, [r7, #10]
 8002628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	4603      	mov	r3, r0
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f001 ff6a 	bl	800450c <I2C_RequestMemoryRead>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e1bc      	b.n	80029bc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002646:	2b00      	cmp	r3, #0
 8002648:	d113      	bne.n	8002672 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800264a:	2300      	movs	r3, #0
 800264c:	623b      	str	r3, [r7, #32]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	623b      	str	r3, [r7, #32]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	623b      	str	r3, [r7, #32]
 800265e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	e190      	b.n	8002994 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002676:	2b01      	cmp	r3, #1
 8002678:	d11b      	bne.n	80026b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002688:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	61fb      	str	r3, [r7, #28]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	e170      	b.n	8002994 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d11b      	bne.n	80026f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026da:	2300      	movs	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	61bb      	str	r3, [r7, #24]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	e150      	b.n	8002994 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002708:	e144      	b.n	8002994 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270e:	2b03      	cmp	r3, #3
 8002710:	f200 80f1 	bhi.w	80028f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002718:	2b01      	cmp	r3, #1
 800271a:	d123      	bne.n	8002764 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800271e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f002 fa5f 	bl	8004be4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e145      	b.n	80029bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002762:	e117      	b.n	8002994 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002768:	2b02      	cmp	r3, #2
 800276a:	d14e      	bne.n	800280a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800276c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002772:	2200      	movs	r2, #0
 8002774:	4906      	ldr	r1, [pc, #24]	@ (8002790 <HAL_I2C_Mem_Read+0x22c>)
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f002 f858 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e11a      	b.n	80029bc <HAL_I2C_Mem_Read+0x458>
 8002786:	bf00      	nop
 8002788:	00100002 	.word	0x00100002
 800278c:	ffff0000 	.word	0xffff0000
 8002790:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002808:	e0c4      	b.n	8002994 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002810:	2200      	movs	r2, #0
 8002812:	496c      	ldr	r1, [pc, #432]	@ (80029c4 <HAL_I2C_Mem_Read+0x460>)
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f002 f809 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0cb      	b.n	80029bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800286c:	2200      	movs	r2, #0
 800286e:	4955      	ldr	r1, [pc, #340]	@ (80029c4 <HAL_I2C_Mem_Read+0x460>)
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f001 ffdb 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e09d      	b.n	80029bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800288e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028f4:	e04e      	b.n	8002994 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f002 f972 	bl	8004be4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e058      	b.n	80029bc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b04      	cmp	r3, #4
 8002948:	d124      	bne.n	8002994 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294e:	2b03      	cmp	r3, #3
 8002950:	d107      	bne.n	8002962 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002960:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002998:	2b00      	cmp	r3, #0
 800299a:	f47f aeb6 	bne.w	800270a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e000      	b.n	80029bc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80029ba:	2302      	movs	r3, #2
  }
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3728      	adds	r7, #40	@ 0x28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	00010004 	.word	0x00010004

080029c8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	@ 0x28
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	460b      	mov	r3, r1
 80029d6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80029d8:	f7ff f86a 	bl	8001ab0 <HAL_GetTick>
 80029dc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b20      	cmp	r3, #32
 80029ec:	f040 8111 	bne.w	8002c12 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	2319      	movs	r3, #25
 80029f6:	2201      	movs	r2, #1
 80029f8:	4988      	ldr	r1, [pc, #544]	@ (8002c1c <HAL_I2C_IsDeviceReady+0x254>)
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f001 ff16 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002a06:	2302      	movs	r3, #2
 8002a08:	e104      	b.n	8002c14 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_I2C_IsDeviceReady+0x50>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e0fd      	b.n	8002c14 <HAL_I2C_IsDeviceReady+0x24c>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d007      	beq.n	8002a3e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2224      	movs	r2, #36	@ 0x24
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4a70      	ldr	r2, [pc, #448]	@ (8002c20 <HAL_I2C_IsDeviceReady+0x258>)
 8002a60:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a70:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f001 fed4 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00d      	beq.n	8002aa6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a98:	d103      	bne.n	8002aa2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aa0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e0b6      	b.n	8002c14 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aa6:	897b      	ldrh	r3, [r7, #10]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ab4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002ab6:	f7fe fffb 	bl	8001ab0 <HAL_GetTick>
 8002aba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	bf0c      	ite	eq
 8002aca:	2301      	moveq	r3, #1
 8002acc:	2300      	movne	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002adc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ae0:	bf0c      	ite	eq
 8002ae2:	2301      	moveq	r3, #1
 8002ae4:	2300      	movne	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002aea:	e025      	b.n	8002b38 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002aec:	f7fe ffe0 	bl	8001ab0 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d302      	bcc.n	8002b02 <HAL_I2C_IsDeviceReady+0x13a>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d103      	bne.n	8002b0a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	22a0      	movs	r2, #160	@ 0xa0
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	bf0c      	ite	eq
 8002b18:	2301      	moveq	r3, #1
 8002b1a:	2300      	movne	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b2e:	bf0c      	ite	eq
 8002b30:	2301      	moveq	r3, #1
 8002b32:	2300      	movne	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b42:	d005      	beq.n	8002b50 <HAL_I2C_IsDeviceReady+0x188>
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d102      	bne.n	8002b50 <HAL_I2C_IsDeviceReady+0x188>
 8002b4a:	7dbb      	ldrb	r3, [r7, #22]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0cd      	beq.n	8002aec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d129      	bne.n	8002bba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b74:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b76:	2300      	movs	r3, #0
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	2319      	movs	r3, #25
 8002b92:	2201      	movs	r2, #1
 8002b94:	4921      	ldr	r1, [pc, #132]	@ (8002c1c <HAL_I2C_IsDeviceReady+0x254>)
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f001 fe48 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e036      	b.n	8002c14 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e02c      	b.n	8002c14 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bd2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	2319      	movs	r3, #25
 8002bda:	2201      	movs	r2, #1
 8002bdc:	490f      	ldr	r1, [pc, #60]	@ (8002c1c <HAL_I2C_IsDeviceReady+0x254>)
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f001 fe24 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e012      	b.n	8002c14 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	f4ff af32 	bcc.w	8002a62 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002c12:	2302      	movs	r3, #2
  }
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3720      	adds	r7, #32
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	00100002 	.word	0x00100002
 8002c20:	ffff0000 	.word	0xffff0000

08002c24 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c44:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c4c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	2b10      	cmp	r3, #16
 8002c52:	d003      	beq.n	8002c5c <HAL_I2C_EV_IRQHandler+0x38>
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	2b40      	cmp	r3, #64	@ 0x40
 8002c58:	f040 80b1 	bne.w	8002dbe <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10d      	bne.n	8002c92 <HAL_I2C_EV_IRQHandler+0x6e>
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002c7c:	d003      	beq.n	8002c86 <HAL_I2C_EV_IRQHandler+0x62>
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002c84:	d101      	bne.n	8002c8a <HAL_I2C_EV_IRQHandler+0x66>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <HAL_I2C_EV_IRQHandler+0x68>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	f000 8114 	beq.w	8002eba <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00b      	beq.n	8002cb4 <HAL_I2C_EV_IRQHandler+0x90>
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d006      	beq.n	8002cb4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f002 f828 	bl	8004cfc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 fd7a 	bl	80037a6 <I2C_Master_SB>
 8002cb2:	e083      	b.n	8002dbc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d008      	beq.n	8002cd0 <HAL_I2C_EV_IRQHandler+0xac>
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 fdf2 	bl	80038b2 <I2C_Master_ADD10>
 8002cce:	e075      	b.n	8002dbc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d008      	beq.n	8002cec <HAL_I2C_EV_IRQHandler+0xc8>
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fe0e 	bl	8003906 <I2C_Master_ADDR>
 8002cea:	e067      	b.n	8002dbc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d036      	beq.n	8002d64 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d04:	f000 80db 	beq.w	8002ebe <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00d      	beq.n	8002d2e <HAL_I2C_EV_IRQHandler+0x10a>
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_I2C_EV_IRQHandler+0x10a>
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d103      	bne.n	8002d2e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f9d6 	bl	80030d8 <I2C_MasterTransmit_TXE>
 8002d2c:	e046      	b.n	8002dbc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80c2 	beq.w	8002ebe <HAL_I2C_EV_IRQHandler+0x29a>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80bc 	beq.w	8002ebe <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002d46:	7bbb      	ldrb	r3, [r7, #14]
 8002d48:	2b21      	cmp	r3, #33	@ 0x21
 8002d4a:	d103      	bne.n	8002d54 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fa5f 	bl	8003210 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d52:	e0b4      	b.n	8002ebe <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b40      	cmp	r3, #64	@ 0x40
 8002d58:	f040 80b1 	bne.w	8002ebe <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 facd 	bl	80032fc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d62:	e0ac      	b.n	8002ebe <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d72:	f000 80a4 	beq.w	8002ebe <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00d      	beq.n	8002d9c <HAL_I2C_EV_IRQHandler+0x178>
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d008      	beq.n	8002d9c <HAL_I2C_EV_IRQHandler+0x178>
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d103      	bne.n	8002d9c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 fb49 	bl	800342c <I2C_MasterReceive_RXNE>
 8002d9a:	e00f      	b.n	8002dbc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 808b 	beq.w	8002ebe <HAL_I2C_EV_IRQHandler+0x29a>
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 8085 	beq.w	8002ebe <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fc01 	bl	80035bc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dba:	e080      	b.n	8002ebe <HAL_I2C_EV_IRQHandler+0x29a>
 8002dbc:	e07f      	b.n	8002ebe <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d004      	beq.n	8002dd0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	e007      	b.n	8002de0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d011      	beq.n	8002e0e <HAL_I2C_EV_IRQHandler+0x1ea>
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00c      	beq.n	8002e0e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002e04:	69b9      	ldr	r1, [r7, #24]
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 ffcc 	bl	8003da4 <I2C_Slave_ADDR>
 8002e0c:	e05a      	b.n	8002ec4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f003 0310 	and.w	r3, r3, #16
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_I2C_EV_IRQHandler+0x206>
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f001 f806 	bl	8003e34 <I2C_Slave_STOPF>
 8002e28:	e04c      	b.n	8002ec4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e2a:	7bbb      	ldrb	r3, [r7, #14]
 8002e2c:	2b21      	cmp	r3, #33	@ 0x21
 8002e2e:	d002      	beq.n	8002e36 <HAL_I2C_EV_IRQHandler+0x212>
 8002e30:	7bbb      	ldrb	r3, [r7, #14]
 8002e32:	2b29      	cmp	r3, #41	@ 0x29
 8002e34:	d120      	bne.n	8002e78 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00d      	beq.n	8002e5c <HAL_I2C_EV_IRQHandler+0x238>
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <HAL_I2C_EV_IRQHandler+0x238>
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d103      	bne.n	8002e5c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fee7 	bl	8003c28 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e5a:	e032      	b.n	8002ec2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d02d      	beq.n	8002ec2 <HAL_I2C_EV_IRQHandler+0x29e>
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d028      	beq.n	8002ec2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 ff16 	bl	8003ca2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e76:	e024      	b.n	8002ec2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00d      	beq.n	8002e9e <HAL_I2C_EV_IRQHandler+0x27a>
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_I2C_EV_IRQHandler+0x27a>
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d103      	bne.n	8002e9e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 ff24 	bl	8003ce4 <I2C_SlaveReceive_RXNE>
 8002e9c:	e012      	b.n	8002ec4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00d      	beq.n	8002ec4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 ff54 	bl	8003d60 <I2C_SlaveReceive_BTF>
 8002eb8:	e004      	b.n	8002ec4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002eba:	bf00      	nop
 8002ebc:	e002      	b.n	8002ec4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ebe:	bf00      	nop
 8002ec0:	e000      	b.n	8002ec4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ec2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002ec4:	3720      	adds	r7, #32
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b08a      	sub	sp, #40	@ 0x28
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002eec:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00d      	beq.n	8002f14 <HAL_I2C_ER_IRQHandler+0x4a>
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d008      	beq.n	8002f14 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002f12:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00d      	beq.n	8002f3a <HAL_I2C_ER_IRQHandler+0x70>
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	f043 0302 	orr.w	r3, r3, #2
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002f38:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d03e      	beq.n	8002fc2 <HAL_I2C_ER_IRQHandler+0xf8>
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d039      	beq.n	8002fc2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8002f4e:	7efb      	ldrb	r3, [r7, #27]
 8002f50:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f60:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002f68:	7ebb      	ldrb	r3, [r7, #26]
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	d112      	bne.n	8002f94 <HAL_I2C_ER_IRQHandler+0xca>
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10f      	bne.n	8002f94 <HAL_I2C_ER_IRQHandler+0xca>
 8002f74:	7cfb      	ldrb	r3, [r7, #19]
 8002f76:	2b21      	cmp	r3, #33	@ 0x21
 8002f78:	d008      	beq.n	8002f8c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002f7a:	7cfb      	ldrb	r3, [r7, #19]
 8002f7c:	2b29      	cmp	r3, #41	@ 0x29
 8002f7e:	d005      	beq.n	8002f8c <HAL_I2C_ER_IRQHandler+0xc2>
 8002f80:	7cfb      	ldrb	r3, [r7, #19]
 8002f82:	2b28      	cmp	r3, #40	@ 0x28
 8002f84:	d106      	bne.n	8002f94 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b21      	cmp	r3, #33	@ 0x21
 8002f8a:	d103      	bne.n	8002f94 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f001 f881 	bl	8004094 <I2C_Slave_AF>
 8002f92:	e016      	b.n	8002fc2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f9c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	f043 0304 	orr.w	r3, r3, #4
 8002fa4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fa6:	7efb      	ldrb	r3, [r7, #27]
 8002fa8:	2b10      	cmp	r3, #16
 8002faa:	d002      	beq.n	8002fb2 <HAL_I2C_ER_IRQHandler+0xe8>
 8002fac:	7efb      	ldrb	r3, [r7, #27]
 8002fae:	2b40      	cmp	r3, #64	@ 0x40
 8002fb0:	d107      	bne.n	8002fc2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00d      	beq.n	8002fe8 <HAL_I2C_ER_IRQHandler+0x11e>
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	f043 0308 	orr.w	r3, r3, #8
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002fe6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f001 f8be 	bl	800417c <I2C_ITError>
  }
}
 8003000:	bf00      	nop
 8003002:	3728      	adds	r7, #40	@ 0x28
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	70fb      	strb	r3, [r7, #3]
 8003064:	4613      	mov	r3, r2
 8003066:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d150      	bne.n	80031a0 <I2C_MasterTransmit_TXE+0xc8>
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	2b21      	cmp	r3, #33	@ 0x21
 8003102:	d14d      	bne.n	80031a0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b08      	cmp	r3, #8
 8003108:	d01d      	beq.n	8003146 <I2C_MasterTransmit_TXE+0x6e>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b20      	cmp	r3, #32
 800310e:	d01a      	beq.n	8003146 <I2C_MasterTransmit_TXE+0x6e>
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003116:	d016      	beq.n	8003146 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003126:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2211      	movs	r2, #17
 800312c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff ff62 	bl	8003008 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003144:	e060      	b.n	8003208 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003154:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003164:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b40      	cmp	r3, #64	@ 0x40
 800317e:	d107      	bne.n	8003190 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff ff7d 	bl	8003088 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800318e:	e03b      	b.n	8003208 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff35 	bl	8003008 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800319e:	e033      	b.n	8003208 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	2b21      	cmp	r3, #33	@ 0x21
 80031a4:	d005      	beq.n	80031b2 <I2C_MasterTransmit_TXE+0xda>
 80031a6:	7bbb      	ldrb	r3, [r7, #14]
 80031a8:	2b40      	cmp	r3, #64	@ 0x40
 80031aa:	d12d      	bne.n	8003208 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	2b22      	cmp	r3, #34	@ 0x22
 80031b0:	d12a      	bne.n	8003208 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d108      	bne.n	80031ce <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ca:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80031cc:	e01c      	b.n	8003208 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b40      	cmp	r3, #64	@ 0x40
 80031d8:	d103      	bne.n	80031e2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f88e 	bl	80032fc <I2C_MemoryTransmit_TXE_BTF>
}
 80031e0:	e012      	b.n	8003208 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e6:	781a      	ldrb	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003206:	e7ff      	b.n	8003208 <I2C_MasterTransmit_TXE+0x130>
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b21      	cmp	r3, #33	@ 0x21
 8003228:	d164      	bne.n	80032f4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800322e:	b29b      	uxth	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	d012      	beq.n	800325a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003238:	781a      	ldrb	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003258:	e04c      	b.n	80032f4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b08      	cmp	r3, #8
 800325e:	d01d      	beq.n	800329c <I2C_MasterTransmit_BTF+0x8c>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b20      	cmp	r3, #32
 8003264:	d01a      	beq.n	800329c <I2C_MasterTransmit_BTF+0x8c>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800326c:	d016      	beq.n	800329c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800327c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2211      	movs	r2, #17
 8003282:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff feb7 	bl	8003008 <HAL_I2C_MasterTxCpltCallback>
}
 800329a:	e02b      	b.n	80032f4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032aa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ba:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b40      	cmp	r3, #64	@ 0x40
 80032d4:	d107      	bne.n	80032e6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff fed2 	bl	8003088 <HAL_I2C_MemTxCpltCallback>
}
 80032e4:	e006      	b.n	80032f4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff fe8a 	bl	8003008 <HAL_I2C_MasterTxCpltCallback>
}
 80032f4:	bf00      	nop
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800330a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003310:	2b00      	cmp	r3, #0
 8003312:	d11d      	bne.n	8003350 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d10b      	bne.n	8003334 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003320:	b2da      	uxtb	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800332c:	1c9a      	adds	r2, r3, #2
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003332:	e077      	b.n	8003424 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003338:	b29b      	uxth	r3, r3
 800333a:	121b      	asrs	r3, r3, #8
 800333c:	b2da      	uxtb	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800334e:	e069      	b.n	8003424 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003354:	2b01      	cmp	r3, #1
 8003356:	d10b      	bne.n	8003370 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800335c:	b2da      	uxtb	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800336e:	e059      	b.n	8003424 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003374:	2b02      	cmp	r3, #2
 8003376:	d152      	bne.n	800341e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	2b22      	cmp	r3, #34	@ 0x22
 800337c:	d10d      	bne.n	800339a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800338c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003398:	e044      	b.n	8003424 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d015      	beq.n	80033d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	2b21      	cmp	r3, #33	@ 0x21
 80033a8:	d112      	bne.n	80033d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ae:	781a      	ldrb	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80033ce:	e029      	b.n	8003424 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d124      	bne.n	8003424 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b21      	cmp	r3, #33	@ 0x21
 80033de:	d121      	bne.n	8003424 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033ee:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff fe36 	bl	8003088 <HAL_I2C_MemTxCpltCallback>
}
 800341c:	e002      	b.n	8003424 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fe ff90 	bl	8002344 <I2C_Flush_DR>
}
 8003424:	bf00      	nop
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b22      	cmp	r3, #34	@ 0x22
 800343e:	f040 80b9 	bne.w	80035b4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003446:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b03      	cmp	r3, #3
 8003454:	d921      	bls.n	800349a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b03      	cmp	r3, #3
 8003484:	f040 8096 	bne.w	80035b4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003496:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003498:	e08c      	b.n	80035b4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d07f      	beq.n	80035a2 <I2C_MasterReceive_RXNE+0x176>
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d002      	beq.n	80034ae <I2C_MasterReceive_RXNE+0x82>
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d179      	bne.n	80035a2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f001 fb66 	bl	8004b80 <I2C_WaitOnSTOPRequestThroughIT>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d14c      	bne.n	8003554 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034c8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034d8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b40      	cmp	r3, #64	@ 0x40
 8003512:	d10a      	bne.n	800352a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff fdba 	bl	800309c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003528:	e044      	b.n	80035b4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d002      	beq.n	800353e <I2C_MasterReceive_RXNE+0x112>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b20      	cmp	r3, #32
 800353c:	d103      	bne.n	8003546 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	@ 0x30
 8003544:	e002      	b.n	800354c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2212      	movs	r2, #18
 800354a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff fd65 	bl	800301c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003552:	e02f      	b.n	80035b4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003562:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff fd88 	bl	80030b0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035a0:	e008      	b.n	80035b4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035b0:	605a      	str	r2, [r3, #4]
}
 80035b2:	e7ff      	b.n	80035b4 <I2C_MasterReceive_RXNE+0x188>
 80035b4:	bf00      	nop
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d11b      	bne.n	800360c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035e2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800360a:	e0c8      	b.n	800379e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b03      	cmp	r3, #3
 8003614:	d129      	bne.n	800366a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003624:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2b04      	cmp	r3, #4
 800362a:	d00a      	beq.n	8003642 <I2C_MasterReceive_BTF+0x86>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d007      	beq.n	8003642 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003640:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003668:	e099      	b.n	800379e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	f040 8081 	bne.w	8003778 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d002      	beq.n	8003682 <I2C_MasterReceive_BTF+0xc6>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b10      	cmp	r3, #16
 8003680:	d108      	bne.n	8003694 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	e019      	b.n	80036c8 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2b04      	cmp	r3, #4
 8003698:	d002      	beq.n	80036a0 <I2C_MasterReceive_BTF+0xe4>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d108      	bne.n	80036b2 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	e00a      	b.n	80036c8 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b10      	cmp	r3, #16
 80036b6:	d007      	beq.n	80036c8 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003722:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b40      	cmp	r3, #64	@ 0x40
 8003736:	d10a      	bne.n	800374e <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff fca8 	bl	800309c <HAL_I2C_MemRxCpltCallback>
}
 800374c:	e027      	b.n	800379e <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2b08      	cmp	r3, #8
 800375a:	d002      	beq.n	8003762 <I2C_MasterReceive_BTF+0x1a6>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b20      	cmp	r3, #32
 8003760:	d103      	bne.n	800376a <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	631a      	str	r2, [r3, #48]	@ 0x30
 8003768:	e002      	b.n	8003770 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2212      	movs	r2, #18
 800376e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff fc53 	bl	800301c <HAL_I2C_MasterRxCpltCallback>
}
 8003776:	e012      	b.n	800379e <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691a      	ldr	r2, [r3, #16]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b40      	cmp	r3, #64	@ 0x40
 80037b8:	d117      	bne.n	80037ea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	461a      	mov	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037d2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80037d4:	e067      	b.n	80038a6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	611a      	str	r2, [r3, #16]
}
 80037e8:	e05d      	b.n	80038a6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037f2:	d133      	bne.n	800385c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b21      	cmp	r3, #33	@ 0x21
 80037fe:	d109      	bne.n	8003814 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003804:	b2db      	uxtb	r3, r3
 8003806:	461a      	mov	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003810:	611a      	str	r2, [r3, #16]
 8003812:	e008      	b.n	8003826 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	b2da      	uxtb	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800382a:	2b00      	cmp	r3, #0
 800382c:	d004      	beq.n	8003838 <I2C_Master_SB+0x92>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d108      	bne.n	800384a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383c:	2b00      	cmp	r3, #0
 800383e:	d032      	beq.n	80038a6 <I2C_Master_SB+0x100>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003846:	2b00      	cmp	r3, #0
 8003848:	d02d      	beq.n	80038a6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003858:	605a      	str	r2, [r3, #4]
}
 800385a:	e024      	b.n	80038a6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10e      	bne.n	8003882 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003868:	b29b      	uxth	r3, r3
 800386a:	11db      	asrs	r3, r3, #7
 800386c:	b2db      	uxtb	r3, r3
 800386e:	f003 0306 	and.w	r3, r3, #6
 8003872:	b2db      	uxtb	r3, r3
 8003874:	f063 030f 	orn	r3, r3, #15
 8003878:	b2da      	uxtb	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	611a      	str	r2, [r3, #16]
}
 8003880:	e011      	b.n	80038a6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003886:	2b01      	cmp	r3, #1
 8003888:	d10d      	bne.n	80038a6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388e:	b29b      	uxth	r3, r3
 8003890:	11db      	asrs	r3, r3, #7
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f003 0306 	and.w	r3, r3, #6
 8003898:	b2db      	uxtb	r3, r3
 800389a:	f063 030e 	orn	r3, r3, #14
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	611a      	str	r2, [r3, #16]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d004      	beq.n	80038d8 <I2C_Master_ADD10+0x26>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d108      	bne.n	80038ea <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00c      	beq.n	80038fa <I2C_Master_ADD10+0x48>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d007      	beq.n	80038fa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038f8:	605a      	str	r2, [r3, #4]
  }
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003906:	b480      	push	{r7}
 8003908:	b091      	sub	sp, #68	@ 0x44
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003914:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003922:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b22      	cmp	r3, #34	@ 0x22
 800392e:	f040 8169 	bne.w	8003c04 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10f      	bne.n	800395a <I2C_Master_ADDR+0x54>
 800393a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800393e:	2b40      	cmp	r3, #64	@ 0x40
 8003940:	d10b      	bne.n	800395a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003942:	2300      	movs	r3, #0
 8003944:	633b      	str	r3, [r7, #48]	@ 0x30
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	633b      	str	r3, [r7, #48]	@ 0x30
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	633b      	str	r3, [r7, #48]	@ 0x30
 8003956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003958:	e160      	b.n	8003c1c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800395e:	2b00      	cmp	r3, #0
 8003960:	d11d      	bne.n	800399e <I2C_Master_ADDR+0x98>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800396a:	d118      	bne.n	800399e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396c:	2300      	movs	r3, #0
 800396e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003990:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	651a      	str	r2, [r3, #80]	@ 0x50
 800399c:	e13e      	b.n	8003c1c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d113      	bne.n	80039d0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a8:	2300      	movs	r3, #0
 80039aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	e115      	b.n	8003bfc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	f040 808a 	bne.w	8003af0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80039dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039de:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039e2:	d137      	bne.n	8003a54 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039f2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a02:	d113      	bne.n	8003a2c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a12:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a14:	2300      	movs	r3, #0
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2a:	e0e7      	b.n	8003bfc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	623b      	str	r3, [r7, #32]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	623b      	str	r3, [r7, #32]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	623b      	str	r3, [r7, #32]
 8003a40:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e0d3      	b.n	8003bfc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d02e      	beq.n	8003ab8 <I2C_Master_ADDR+0x1b2>
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d02b      	beq.n	8003ab8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a62:	2b12      	cmp	r3, #18
 8003a64:	d102      	bne.n	8003a6c <I2C_Master_ADDR+0x166>
 8003a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d125      	bne.n	8003ab8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d00e      	beq.n	8003a90 <I2C_Master_ADDR+0x18a>
 8003a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d00b      	beq.n	8003a90 <I2C_Master_ADDR+0x18a>
 8003a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a7a:	2b10      	cmp	r3, #16
 8003a7c:	d008      	beq.n	8003a90 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	e007      	b.n	8003aa0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a9e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61fb      	str	r3, [r7, #28]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	61fb      	str	r3, [r7, #28]
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	e0a1      	b.n	8003bfc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ac6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	61bb      	str	r3, [r7, #24]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	61bb      	str	r3, [r7, #24]
 8003adc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	e085      	b.n	8003bfc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d14d      	bne.n	8003b96 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d016      	beq.n	8003b2e <I2C_Master_ADDR+0x228>
 8003b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d013      	beq.n	8003b2e <I2C_Master_ADDR+0x228>
 8003b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b08:	2b10      	cmp	r3, #16
 8003b0a:	d010      	beq.n	8003b2e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b1a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	e007      	b.n	8003b3e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b3c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b4c:	d117      	bne.n	8003b7e <I2C_Master_ADDR+0x278>
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b54:	d00b      	beq.n	8003b6e <I2C_Master_ADDR+0x268>
 8003b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d008      	beq.n	8003b6e <I2C_Master_ADDR+0x268>
 8003b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d005      	beq.n	8003b6e <I2C_Master_ADDR+0x268>
 8003b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b64:	2b10      	cmp	r3, #16
 8003b66:	d002      	beq.n	8003b6e <I2C_Master_ADDR+0x268>
 8003b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6a:	2b20      	cmp	r3, #32
 8003b6c:	d107      	bne.n	8003b7e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b7c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	e032      	b.n	8003bfc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ba4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bb4:	d117      	bne.n	8003be6 <I2C_Master_ADDR+0x2e0>
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bbc:	d00b      	beq.n	8003bd6 <I2C_Master_ADDR+0x2d0>
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d008      	beq.n	8003bd6 <I2C_Master_ADDR+0x2d0>
 8003bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d005      	beq.n	8003bd6 <I2C_Master_ADDR+0x2d0>
 8003bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bcc:	2b10      	cmp	r3, #16
 8003bce:	d002      	beq.n	8003bd6 <I2C_Master_ADDR+0x2d0>
 8003bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d107      	bne.n	8003be6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003be4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003c02:	e00b      	b.n	8003c1c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
}
 8003c1a:	e7ff      	b.n	8003c1c <I2C_Master_ADDR+0x316>
 8003c1c:	bf00      	nop
 8003c1e:	3744      	adds	r7, #68	@ 0x44
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c36:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d02b      	beq.n	8003c9a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c46:	781a      	ldrb	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d114      	bne.n	8003c9a <I2C_SlaveTransmit_TXE+0x72>
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	2b29      	cmp	r3, #41	@ 0x29
 8003c74:	d111      	bne.n	8003c9a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c84:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2221      	movs	r2, #33	@ 0x21
 8003c8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2228      	movs	r2, #40	@ 0x28
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff f9cb 	bl	8003030 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d011      	beq.n	8003cd8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	781a      	ldrb	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cf2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d02c      	beq.n	8003d58 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d114      	bne.n	8003d58 <I2C_SlaveReceive_RXNE+0x74>
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d32:	d111      	bne.n	8003d58 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d42:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2222      	movs	r2, #34	@ 0x22
 8003d48:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2228      	movs	r2, #40	@ 0x28
 8003d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff f976 	bl	8003044 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d012      	beq.n	8003d98 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003dae:	2300      	movs	r3, #0
 8003db0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003dbe:	2b28      	cmp	r3, #40	@ 0x28
 8003dc0:	d125      	bne.n	8003e0e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dd0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d103      	bne.n	8003df2 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	81bb      	strh	r3, [r7, #12]
 8003df0:	e002      	b.n	8003df8 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003e00:	89ba      	ldrh	r2, [r7, #12]
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	4619      	mov	r1, r3
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff f926 	bl	8003058 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003e0c:	e00e      	b.n	8003e2c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e42:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e52:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003e54:	2300      	movs	r3, #0
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	60bb      	str	r3, [r7, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0201 	orr.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e80:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e90:	d172      	bne.n	8003f78 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
 8003e94:	2b22      	cmp	r3, #34	@ 0x22
 8003e96:	d002      	beq.n	8003e9e <I2C_Slave_STOPF+0x6a>
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
 8003e9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e9c:	d135      	bne.n	8003f0a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	f043 0204 	orr.w	r2, r3, #4
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ed0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fd ff4d 	bl	8001d76 <HAL_DMA_GetState>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d049      	beq.n	8003f76 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee6:	4a69      	ldr	r2, [pc, #420]	@ (800408c <I2C_Slave_STOPF+0x258>)
 8003ee8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fd ff1f 	bl	8001d32 <HAL_DMA_Abort_IT>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d03d      	beq.n	8003f76 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f04:	4610      	mov	r0, r2
 8003f06:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f08:	e035      	b.n	8003f76 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	f043 0204 	orr.w	r2, r3, #4
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f3c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fd ff17 	bl	8001d76 <HAL_DMA_GetState>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d014      	beq.n	8003f78 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f52:	4a4e      	ldr	r2, [pc, #312]	@ (800408c <I2C_Slave_STOPF+0x258>)
 8003f54:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fd fee9 	bl	8001d32 <HAL_DMA_Abort_IT>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d008      	beq.n	8003f78 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f70:	4610      	mov	r0, r2
 8003f72:	4798      	blx	r3
 8003f74:	e000      	b.n	8003f78 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f76:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d03e      	beq.n	8004000 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d112      	bne.n	8003fb6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc0:	2b40      	cmp	r3, #64	@ 0x40
 8003fc2:	d112      	bne.n	8003fea <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691a      	ldr	r2, [r3, #16]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	f043 0204 	orr.w	r2, r3, #4
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f8b7 	bl	800417c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800400e:	e039      	b.n	8004084 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	2b2a      	cmp	r3, #42	@ 0x2a
 8004014:	d109      	bne.n	800402a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2228      	movs	r2, #40	@ 0x28
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff f80d 	bl	8003044 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b28      	cmp	r3, #40	@ 0x28
 8004034:	d111      	bne.n	800405a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a15      	ldr	r2, [pc, #84]	@ (8004090 <I2C_Slave_STOPF+0x25c>)
 800403a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff f80e 	bl	8003074 <HAL_I2C_ListenCpltCallback>
}
 8004058:	e014      	b.n	8004084 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405e:	2b22      	cmp	r3, #34	@ 0x22
 8004060:	d002      	beq.n	8004068 <I2C_Slave_STOPF+0x234>
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	2b22      	cmp	r3, #34	@ 0x22
 8004066:	d10d      	bne.n	8004084 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fe ffe0 	bl	8003044 <HAL_I2C_SlaveRxCpltCallback>
}
 8004084:	bf00      	nop
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	080046dd 	.word	0x080046dd
 8004090:	ffff0000 	.word	0xffff0000

08004094 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040a2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d002      	beq.n	80040b6 <I2C_Slave_AF+0x22>
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b20      	cmp	r3, #32
 80040b4:	d129      	bne.n	800410a <I2C_Slave_AF+0x76>
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	2b28      	cmp	r3, #40	@ 0x28
 80040ba:	d126      	bne.n	800410a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a2e      	ldr	r2, [pc, #184]	@ (8004178 <I2C_Slave_AF+0xe4>)
 80040c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040d0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040da:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ea:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fe ffb6 	bl	8003074 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004108:	e031      	b.n	800416e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800410a:	7bfb      	ldrb	r3, [r7, #15]
 800410c:	2b21      	cmp	r3, #33	@ 0x21
 800410e:	d129      	bne.n	8004164 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a19      	ldr	r2, [pc, #100]	@ (8004178 <I2C_Slave_AF+0xe4>)
 8004114:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2221      	movs	r2, #33	@ 0x21
 800411a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800413a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004144:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004154:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7fe f8f4 	bl	8002344 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7fe ff67 	bl	8003030 <HAL_I2C_SlaveTxCpltCallback>
}
 8004162:	e004      	b.n	800416e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800416c:	615a      	str	r2, [r3, #20]
}
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	ffff0000 	.word	0xffff0000

0800417c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800418a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004192:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004194:	7bbb      	ldrb	r3, [r7, #14]
 8004196:	2b10      	cmp	r3, #16
 8004198:	d002      	beq.n	80041a0 <I2C_ITError+0x24>
 800419a:	7bbb      	ldrb	r3, [r7, #14]
 800419c:	2b40      	cmp	r3, #64	@ 0x40
 800419e:	d10a      	bne.n	80041b6 <I2C_ITError+0x3a>
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	2b22      	cmp	r3, #34	@ 0x22
 80041a4:	d107      	bne.n	80041b6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041b4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
 80041b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041bc:	2b28      	cmp	r3, #40	@ 0x28
 80041be:	d107      	bne.n	80041d0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2228      	movs	r2, #40	@ 0x28
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80041ce:	e015      	b.n	80041fc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041de:	d00a      	beq.n	80041f6 <I2C_ITError+0x7a>
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
 80041e2:	2b60      	cmp	r3, #96	@ 0x60
 80041e4:	d007      	beq.n	80041f6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004206:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800420a:	d162      	bne.n	80042d2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800421a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004220:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b01      	cmp	r3, #1
 8004228:	d020      	beq.n	800426c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422e:	4a6a      	ldr	r2, [pc, #424]	@ (80043d8 <I2C_ITError+0x25c>)
 8004230:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004236:	4618      	mov	r0, r3
 8004238:	f7fd fd7b 	bl	8001d32 <HAL_DMA_Abort_IT>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 8089 	beq.w	8004356 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0201 	bic.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004266:	4610      	mov	r0, r2
 8004268:	4798      	blx	r3
 800426a:	e074      	b.n	8004356 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004270:	4a59      	ldr	r2, [pc, #356]	@ (80043d8 <I2C_ITError+0x25c>)
 8004272:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004278:	4618      	mov	r0, r3
 800427a:	f7fd fd5a 	bl	8001d32 <HAL_DMA_Abort_IT>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d068      	beq.n	8004356 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428e:	2b40      	cmp	r3, #64	@ 0x40
 8004290:	d10b      	bne.n	80042aa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0201 	bic.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80042cc:	4610      	mov	r0, r2
 80042ce:	4798      	blx	r3
 80042d0:	e041      	b.n	8004356 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b60      	cmp	r3, #96	@ 0x60
 80042dc:	d125      	bne.n	800432a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f6:	2b40      	cmp	r3, #64	@ 0x40
 80042f8:	d10b      	bne.n	8004312 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0201 	bic.w	r2, r2, #1
 8004320:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fe fece 	bl	80030c4 <HAL_I2C_AbortCpltCallback>
 8004328:	e015      	b.n	8004356 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004334:	2b40      	cmp	r3, #64	@ 0x40
 8004336:	d10b      	bne.n	8004350 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7fe fead 	bl	80030b0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10e      	bne.n	8004384 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004376:	2b00      	cmp	r3, #0
 8004378:	d104      	bne.n	8004384 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004392:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800439a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d113      	bne.n	80043d0 <I2C_ITError+0x254>
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	2b28      	cmp	r3, #40	@ 0x28
 80043ac:	d110      	bne.n	80043d0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a0a      	ldr	r2, [pc, #40]	@ (80043dc <I2C_ITError+0x260>)
 80043b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7fe fe52 	bl	8003074 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043d0:	bf00      	nop
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	080046dd 	.word	0x080046dd
 80043dc:	ffff0000 	.word	0xffff0000

080043e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	4608      	mov	r0, r1
 80043ea:	4611      	mov	r1, r2
 80043ec:	461a      	mov	r2, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	817b      	strh	r3, [r7, #10]
 80043f2:	460b      	mov	r3, r1
 80043f4:	813b      	strh	r3, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004408:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	2200      	movs	r2, #0
 8004412:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 fa08 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00d      	beq.n	800443e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800442c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004430:	d103      	bne.n	800443a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004438:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e05f      	b.n	80044fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800443e:	897b      	ldrh	r3, [r7, #10]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	461a      	mov	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800444c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	6a3a      	ldr	r2, [r7, #32]
 8004452:	492d      	ldr	r1, [pc, #180]	@ (8004508 <I2C_RequestMemoryWrite+0x128>)
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 fa63 	bl	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e04c      	b.n	80044fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800447a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800447c:	6a39      	ldr	r1, [r7, #32]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 faee 	bl	8004a60 <I2C_WaitOnTXEFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00d      	beq.n	80044a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	2b04      	cmp	r3, #4
 8004490:	d107      	bne.n	80044a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e02b      	b.n	80044fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d105      	bne.n	80044b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044ac:	893b      	ldrh	r3, [r7, #8]
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	611a      	str	r2, [r3, #16]
 80044b6:	e021      	b.n	80044fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044b8:	893b      	ldrh	r3, [r7, #8]
 80044ba:	0a1b      	lsrs	r3, r3, #8
 80044bc:	b29b      	uxth	r3, r3
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044c8:	6a39      	ldr	r1, [r7, #32]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 fac8 	bl	8004a60 <I2C_WaitOnTXEFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00d      	beq.n	80044f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d107      	bne.n	80044ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e005      	b.n	80044fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044f2:	893b      	ldrh	r3, [r7, #8]
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	00010002 	.word	0x00010002

0800450c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af02      	add	r7, sp, #8
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	4608      	mov	r0, r1
 8004516:	4611      	mov	r1, r2
 8004518:	461a      	mov	r2, r3
 800451a:	4603      	mov	r3, r0
 800451c:	817b      	strh	r3, [r7, #10]
 800451e:	460b      	mov	r3, r1
 8004520:	813b      	strh	r3, [r7, #8]
 8004522:	4613      	mov	r3, r2
 8004524:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004534:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004544:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	2200      	movs	r2, #0
 800454e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 f96a 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00d      	beq.n	800457a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004568:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800456c:	d103      	bne.n	8004576 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004574:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e0aa      	b.n	80046d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800457a:	897b      	ldrh	r3, [r7, #10]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	461a      	mov	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004588:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	6a3a      	ldr	r2, [r7, #32]
 800458e:	4952      	ldr	r1, [pc, #328]	@ (80046d8 <I2C_RequestMemoryRead+0x1cc>)
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 f9c5 	bl	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e097      	b.n	80046d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a0:	2300      	movs	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b8:	6a39      	ldr	r1, [r7, #32]
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 fa50 	bl	8004a60 <I2C_WaitOnTXEFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00d      	beq.n	80045e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d107      	bne.n	80045de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e076      	b.n	80046d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045e2:	88fb      	ldrh	r3, [r7, #6]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d105      	bne.n	80045f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045e8:	893b      	ldrh	r3, [r7, #8]
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	611a      	str	r2, [r3, #16]
 80045f2:	e021      	b.n	8004638 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045f4:	893b      	ldrh	r3, [r7, #8]
 80045f6:	0a1b      	lsrs	r3, r3, #8
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004604:	6a39      	ldr	r1, [r7, #32]
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 fa2a 	bl	8004a60 <I2C_WaitOnTXEFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00d      	beq.n	800462e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004616:	2b04      	cmp	r3, #4
 8004618:	d107      	bne.n	800462a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004628:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e050      	b.n	80046d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800462e:	893b      	ldrh	r3, [r7, #8]
 8004630:	b2da      	uxtb	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800463a:	6a39      	ldr	r1, [r7, #32]
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 fa0f 	bl	8004a60 <I2C_WaitOnTXEFlagUntilTimeout>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00d      	beq.n	8004664 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464c:	2b04      	cmp	r3, #4
 800464e:	d107      	bne.n	8004660 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800465e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e035      	b.n	80046d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004672:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	2200      	movs	r2, #0
 800467c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 f8d3 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00d      	beq.n	80046a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800469a:	d103      	bne.n	80046a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e013      	b.n	80046d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046a8:	897b      	ldrh	r3, [r7, #10]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	6a3a      	ldr	r2, [r7, #32]
 80046bc:	4906      	ldr	r1, [pc, #24]	@ (80046d8 <I2C_RequestMemoryRead+0x1cc>)
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f92e 	bl	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	00010002 	.word	0x00010002

080046dc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046f4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80046f6:	4b4b      	ldr	r3, [pc, #300]	@ (8004824 <I2C_DMAAbort+0x148>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	08db      	lsrs	r3, r3, #3
 80046fc:	4a4a      	ldr	r2, [pc, #296]	@ (8004828 <I2C_DMAAbort+0x14c>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	0a1a      	lsrs	r2, r3, #8
 8004704:	4613      	mov	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	00da      	lsls	r2, r3, #3
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	f043 0220 	orr.w	r2, r3, #32
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004722:	e00a      	b.n	800473a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3b01      	subs	r3, #1
 8004728:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004734:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004738:	d0ea      	beq.n	8004710 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004746:	2200      	movs	r2, #0
 8004748:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004756:	2200      	movs	r2, #0
 8004758:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004768:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2200      	movs	r2, #0
 800476e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800477c:	2200      	movs	r2, #0
 800477e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478c:	2200      	movs	r2, #0
 800478e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0201 	bic.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b60      	cmp	r3, #96	@ 0x60
 80047aa:	d10e      	bne.n	80047ca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2200      	movs	r2, #0
 80047c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80047c2:	6978      	ldr	r0, [r7, #20]
 80047c4:	f7fe fc7e 	bl	80030c4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047c8:	e027      	b.n	800481a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047ca:	7cfb      	ldrb	r3, [r7, #19]
 80047cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80047d0:	2b28      	cmp	r3, #40	@ 0x28
 80047d2:	d117      	bne.n	8004804 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2200      	movs	r2, #0
 80047f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2228      	movs	r2, #40	@ 0x28
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004802:	e007      	b.n	8004814 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004814:	6978      	ldr	r0, [r7, #20]
 8004816:	f7fe fc4b 	bl	80030b0 <HAL_I2C_ErrorCallback>
}
 800481a:	bf00      	nop
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20000000 	.word	0x20000000
 8004828:	14f8b589 	.word	0x14f8b589

0800482c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	4613      	mov	r3, r2
 800483a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800483c:	e048      	b.n	80048d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004844:	d044      	beq.n	80048d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004846:	f7fd f933 	bl	8001ab0 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d302      	bcc.n	800485c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d139      	bne.n	80048d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	0c1b      	lsrs	r3, r3, #16
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b01      	cmp	r3, #1
 8004864:	d10d      	bne.n	8004882 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	43da      	mvns	r2, r3
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4013      	ands	r3, r2
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	bf0c      	ite	eq
 8004878:	2301      	moveq	r3, #1
 800487a:	2300      	movne	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	461a      	mov	r2, r3
 8004880:	e00c      	b.n	800489c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	43da      	mvns	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	4013      	ands	r3, r2
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	bf0c      	ite	eq
 8004894:	2301      	moveq	r3, #1
 8004896:	2300      	movne	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	461a      	mov	r2, r3
 800489c:	79fb      	ldrb	r3, [r7, #7]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d116      	bne.n	80048d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048bc:	f043 0220 	orr.w	r2, r3, #32
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e023      	b.n	8004918 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	0c1b      	lsrs	r3, r3, #16
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d10d      	bne.n	80048f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	43da      	mvns	r2, r3
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	4013      	ands	r3, r2
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	bf0c      	ite	eq
 80048ec:	2301      	moveq	r3, #1
 80048ee:	2300      	movne	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	461a      	mov	r2, r3
 80048f4:	e00c      	b.n	8004910 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	43da      	mvns	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	4013      	ands	r3, r2
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	bf0c      	ite	eq
 8004908:	2301      	moveq	r3, #1
 800490a:	2300      	movne	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	461a      	mov	r2, r3
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	429a      	cmp	r2, r3
 8004914:	d093      	beq.n	800483e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800492e:	e071      	b.n	8004a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800493a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800493e:	d123      	bne.n	8004988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800494e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004958:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004974:	f043 0204 	orr.w	r2, r3, #4
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e067      	b.n	8004a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	d041      	beq.n	8004a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004990:	f7fd f88e 	bl	8001ab0 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	429a      	cmp	r2, r3
 800499e:	d302      	bcc.n	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d136      	bne.n	8004a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	0c1b      	lsrs	r3, r3, #16
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d10c      	bne.n	80049ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	43da      	mvns	r2, r3
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4013      	ands	r3, r2
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	bf14      	ite	ne
 80049c2:	2301      	movne	r3, #1
 80049c4:	2300      	moveq	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	e00b      	b.n	80049e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	43da      	mvns	r2, r3
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4013      	ands	r3, r2
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d016      	beq.n	8004a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a00:	f043 0220 	orr.w	r2, r3, #32
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e021      	b.n	8004a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	0c1b      	lsrs	r3, r3, #16
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d10c      	bne.n	8004a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	43da      	mvns	r2, r3
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	bf14      	ite	ne
 8004a30:	2301      	movne	r3, #1
 8004a32:	2300      	moveq	r3, #0
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	e00b      	b.n	8004a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	43da      	mvns	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4013      	ands	r3, r2
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	bf14      	ite	ne
 8004a4a:	2301      	movne	r3, #1
 8004a4c:	2300      	moveq	r3, #0
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f47f af6d 	bne.w	8004930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a6c:	e034      	b.n	8004ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f915 	bl	8004c9e <I2C_IsAcknowledgeFailed>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e034      	b.n	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a84:	d028      	beq.n	8004ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a86:	f7fd f813 	bl	8001ab0 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d302      	bcc.n	8004a9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d11d      	bne.n	8004ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa6:	2b80      	cmp	r3, #128	@ 0x80
 8004aa8:	d016      	beq.n	8004ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac4:	f043 0220 	orr.w	r2, r3, #32
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e007      	b.n	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ae2:	2b80      	cmp	r3, #128	@ 0x80
 8004ae4:	d1c3      	bne.n	8004a6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004afc:	e034      	b.n	8004b68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 f8cd 	bl	8004c9e <I2C_IsAcknowledgeFailed>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e034      	b.n	8004b78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d028      	beq.n	8004b68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b16:	f7fc ffcb 	bl	8001ab0 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d302      	bcc.n	8004b2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d11d      	bne.n	8004b68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d016      	beq.n	8004b68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b54:	f043 0220 	orr.w	r2, r3, #32
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e007      	b.n	8004b78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d1c3      	bne.n	8004afe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b8c:	4b13      	ldr	r3, [pc, #76]	@ (8004bdc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	08db      	lsrs	r3, r3, #3
 8004b92:	4a13      	ldr	r2, [pc, #76]	@ (8004be0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	0a1a      	lsrs	r2, r3, #8
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d107      	bne.n	8004bbe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb2:	f043 0220 	orr.w	r2, r3, #32
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e008      	b.n	8004bd0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bcc:	d0e9      	beq.n	8004ba2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	20000000 	.word	0x20000000
 8004be0:	14f8b589 	.word	0x14f8b589

08004be4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bf0:	e049      	b.n	8004c86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d119      	bne.n	8004c34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0210 	mvn.w	r2, #16
 8004c08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e030      	b.n	8004c96 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c34:	f7fc ff3c 	bl	8001ab0 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d302      	bcc.n	8004c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d11d      	bne.n	8004c86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c54:	2b40      	cmp	r3, #64	@ 0x40
 8004c56:	d016      	beq.n	8004c86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c72:	f043 0220 	orr.w	r2, r3, #32
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e007      	b.n	8004c96 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c90:	2b40      	cmp	r3, #64	@ 0x40
 8004c92:	d1ae      	bne.n	8004bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb4:	d11b      	bne.n	8004cee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cbe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cda:	f043 0204 	orr.w	r2, r3, #4
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e000      	b.n	8004cf0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d08:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004d0c:	d103      	bne.n	8004d16 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d14:	e007      	b.n	8004d26 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004d1e:	d102      	bne.n	8004d26 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2208      	movs	r2, #8
 8004d24:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
	...

08004d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0cc      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d48:	4b68      	ldr	r3, [pc, #416]	@ (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d90c      	bls.n	8004d70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d56:	4b65      	ldr	r3, [pc, #404]	@ (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5e:	4b63      	ldr	r3, [pc, #396]	@ (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d001      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e0b8      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d020      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d88:	4b59      	ldr	r3, [pc, #356]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	4a58      	ldr	r2, [pc, #352]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004da0:	4b53      	ldr	r3, [pc, #332]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	4a52      	ldr	r2, [pc, #328]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004daa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dac:	4b50      	ldr	r3, [pc, #320]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	494d      	ldr	r1, [pc, #308]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d044      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d107      	bne.n	8004de2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dd2:	4b47      	ldr	r3, [pc, #284]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d119      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e07f      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d003      	beq.n	8004df2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d107      	bne.n	8004e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e06f      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e02:	4b3b      	ldr	r3, [pc, #236]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e067      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e12:	4b37      	ldr	r3, [pc, #220]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f023 0203 	bic.w	r2, r3, #3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	4934      	ldr	r1, [pc, #208]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e24:	f7fc fe44 	bl	8001ab0 <HAL_GetTick>
 8004e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e2c:	f7fc fe40 	bl	8001ab0 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e04f      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e42:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 020c 	and.w	r2, r3, #12
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d1eb      	bne.n	8004e2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e54:	4b25      	ldr	r3, [pc, #148]	@ (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 030f 	and.w	r3, r3, #15
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d20c      	bcs.n	8004e7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e62:	4b22      	ldr	r3, [pc, #136]	@ (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e6a:	4b20      	ldr	r3, [pc, #128]	@ (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d001      	beq.n	8004e7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e032      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d008      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e88:	4b19      	ldr	r3, [pc, #100]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	4916      	ldr	r1, [pc, #88]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ea6:	4b12      	ldr	r3, [pc, #72]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	490e      	ldr	r1, [pc, #56]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eba:	f000 f855 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	091b      	lsrs	r3, r3, #4
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	490a      	ldr	r1, [pc, #40]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8004ecc:	5ccb      	ldrb	r3, [r1, r3]
 8004ece:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed2:	4a09      	ldr	r2, [pc, #36]	@ (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ed6:	4b09      	ldr	r3, [pc, #36]	@ (8004efc <HAL_RCC_ClockConfig+0x1c8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fc fda4 	bl	8001a28 <HAL_InitTick>

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40023c00 	.word	0x40023c00
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	08008e00 	.word	0x08008e00
 8004ef8:	20000000 	.word	0x20000000
 8004efc:	20000004 	.word	0x20000004

08004f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f04:	4b03      	ldr	r3, [pc, #12]	@ (8004f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f06:	681b      	ldr	r3, [r3, #0]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	20000000 	.word	0x20000000

08004f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f1c:	f7ff fff0 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004f20:	4602      	mov	r2, r0
 8004f22:	4b05      	ldr	r3, [pc, #20]	@ (8004f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	0a9b      	lsrs	r3, r3, #10
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	4903      	ldr	r1, [pc, #12]	@ (8004f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f2e:	5ccb      	ldrb	r3, [r1, r3]
 8004f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	08008e10 	.word	0x08008e10

08004f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f44:	f7ff ffdc 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	4b05      	ldr	r3, [pc, #20]	@ (8004f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	0b5b      	lsrs	r3, r3, #13
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	4903      	ldr	r1, [pc, #12]	@ (8004f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f56:	5ccb      	ldrb	r3, [r1, r3]
 8004f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40023800 	.word	0x40023800
 8004f64:	08008e10 	.word	0x08008e10

08004f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f6c:	b0a6      	sub	sp, #152	@ 0x98
 8004f6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f8e:	4bc8      	ldr	r3, [pc, #800]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 030c 	and.w	r3, r3, #12
 8004f96:	2b0c      	cmp	r3, #12
 8004f98:	f200 817e 	bhi.w	8005298 <HAL_RCC_GetSysClockFreq+0x330>
 8004f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	08004fd9 	.word	0x08004fd9
 8004fa8:	08005299 	.word	0x08005299
 8004fac:	08005299 	.word	0x08005299
 8004fb0:	08005299 	.word	0x08005299
 8004fb4:	08004fe1 	.word	0x08004fe1
 8004fb8:	08005299 	.word	0x08005299
 8004fbc:	08005299 	.word	0x08005299
 8004fc0:	08005299 	.word	0x08005299
 8004fc4:	08004fe9 	.word	0x08004fe9
 8004fc8:	08005299 	.word	0x08005299
 8004fcc:	08005299 	.word	0x08005299
 8004fd0:	08005299 	.word	0x08005299
 8004fd4:	08005153 	.word	0x08005153
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fd8:	4bb6      	ldr	r3, [pc, #728]	@ (80052b4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004fda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8004fde:	e15f      	b.n	80052a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fe0:	4bb5      	ldr	r3, [pc, #724]	@ (80052b8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004fe2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004fe6:	e15b      	b.n	80052a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fe8:	4bb1      	ldr	r3, [pc, #708]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ff0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ff4:	4bae      	ldr	r3, [pc, #696]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d031      	beq.n	8005064 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005000:	4bab      	ldr	r3, [pc, #684]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	099b      	lsrs	r3, r3, #6
 8005006:	2200      	movs	r2, #0
 8005008:	66bb      	str	r3, [r7, #104]	@ 0x68
 800500a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800500c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800500e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005012:	663b      	str	r3, [r7, #96]	@ 0x60
 8005014:	2300      	movs	r3, #0
 8005016:	667b      	str	r3, [r7, #100]	@ 0x64
 8005018:	4ba7      	ldr	r3, [pc, #668]	@ (80052b8 <HAL_RCC_GetSysClockFreq+0x350>)
 800501a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800501e:	462a      	mov	r2, r5
 8005020:	fb03 f202 	mul.w	r2, r3, r2
 8005024:	2300      	movs	r3, #0
 8005026:	4621      	mov	r1, r4
 8005028:	fb01 f303 	mul.w	r3, r1, r3
 800502c:	4413      	add	r3, r2
 800502e:	4aa2      	ldr	r2, [pc, #648]	@ (80052b8 <HAL_RCC_GetSysClockFreq+0x350>)
 8005030:	4621      	mov	r1, r4
 8005032:	fba1 1202 	umull	r1, r2, r1, r2
 8005036:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005038:	460a      	mov	r2, r1
 800503a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800503c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800503e:	4413      	add	r3, r2
 8005040:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005042:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005046:	2200      	movs	r2, #0
 8005048:	65bb      	str	r3, [r7, #88]	@ 0x58
 800504a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800504c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005050:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005054:	f7fb fe18 	bl	8000c88 <__aeabi_uldivmod>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4613      	mov	r3, r2
 800505e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005062:	e064      	b.n	800512e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005064:	4b92      	ldr	r3, [pc, #584]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	099b      	lsrs	r3, r3, #6
 800506a:	2200      	movs	r2, #0
 800506c:	653b      	str	r3, [r7, #80]	@ 0x50
 800506e:	657a      	str	r2, [r7, #84]	@ 0x54
 8005070:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005076:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005078:	2300      	movs	r3, #0
 800507a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800507c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005080:	4622      	mov	r2, r4
 8005082:	462b      	mov	r3, r5
 8005084:	f04f 0000 	mov.w	r0, #0
 8005088:	f04f 0100 	mov.w	r1, #0
 800508c:	0159      	lsls	r1, r3, #5
 800508e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005092:	0150      	lsls	r0, r2, #5
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4621      	mov	r1, r4
 800509a:	1a51      	subs	r1, r2, r1
 800509c:	6139      	str	r1, [r7, #16]
 800509e:	4629      	mov	r1, r5
 80050a0:	eb63 0301 	sbc.w	r3, r3, r1
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050b2:	4659      	mov	r1, fp
 80050b4:	018b      	lsls	r3, r1, #6
 80050b6:	4651      	mov	r1, sl
 80050b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050bc:	4651      	mov	r1, sl
 80050be:	018a      	lsls	r2, r1, #6
 80050c0:	4651      	mov	r1, sl
 80050c2:	ebb2 0801 	subs.w	r8, r2, r1
 80050c6:	4659      	mov	r1, fp
 80050c8:	eb63 0901 	sbc.w	r9, r3, r1
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050e0:	4690      	mov	r8, r2
 80050e2:	4699      	mov	r9, r3
 80050e4:	4623      	mov	r3, r4
 80050e6:	eb18 0303 	adds.w	r3, r8, r3
 80050ea:	60bb      	str	r3, [r7, #8]
 80050ec:	462b      	mov	r3, r5
 80050ee:	eb49 0303 	adc.w	r3, r9, r3
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005100:	4629      	mov	r1, r5
 8005102:	028b      	lsls	r3, r1, #10
 8005104:	4621      	mov	r1, r4
 8005106:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800510a:	4621      	mov	r1, r4
 800510c:	028a      	lsls	r2, r1, #10
 800510e:	4610      	mov	r0, r2
 8005110:	4619      	mov	r1, r3
 8005112:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005116:	2200      	movs	r2, #0
 8005118:	643b      	str	r3, [r7, #64]	@ 0x40
 800511a:	647a      	str	r2, [r7, #68]	@ 0x44
 800511c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005120:	f7fb fdb2 	bl	8000c88 <__aeabi_uldivmod>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4613      	mov	r3, r2
 800512a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800512e:	4b60      	ldr	r3, [pc, #384]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	0c1b      	lsrs	r3, r3, #16
 8005134:	f003 0303 	and.w	r3, r3, #3
 8005138:	3301      	adds	r3, #1
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8005140:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005144:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005148:	fbb2 f3f3 	udiv	r3, r2, r3
 800514c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005150:	e0a6      	b.n	80052a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005152:	4b57      	ldr	r3, [pc, #348]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800515a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800515e:	4b54      	ldr	r3, [pc, #336]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d02a      	beq.n	80051c0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800516a:	4b51      	ldr	r3, [pc, #324]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x348>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	099b      	lsrs	r3, r3, #6
 8005170:	2200      	movs	r2, #0
 8005172:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005174:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005178:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800517c:	2100      	movs	r1, #0
 800517e:	4b4e      	ldr	r3, [pc, #312]	@ (80052b8 <HAL_RCC_GetSysClockFreq+0x350>)
 8005180:	fb03 f201 	mul.w	r2, r3, r1
 8005184:	2300      	movs	r3, #0
 8005186:	fb00 f303 	mul.w	r3, r0, r3
 800518a:	4413      	add	r3, r2
 800518c:	4a4a      	ldr	r2, [pc, #296]	@ (80052b8 <HAL_RCC_GetSysClockFreq+0x350>)
 800518e:	fba0 1202 	umull	r1, r2, r0, r2
 8005192:	677a      	str	r2, [r7, #116]	@ 0x74
 8005194:	460a      	mov	r2, r1
 8005196:	673a      	str	r2, [r7, #112]	@ 0x70
 8005198:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800519a:	4413      	add	r3, r2
 800519c:	677b      	str	r3, [r7, #116]	@ 0x74
 800519e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051a2:	2200      	movs	r2, #0
 80051a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80051a6:	637a      	str	r2, [r7, #52]	@ 0x34
 80051a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80051ac:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80051b0:	f7fb fd6a 	bl	8000c88 <__aeabi_uldivmod>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4613      	mov	r3, r2
 80051ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80051be:	e05b      	b.n	8005278 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c0:	4b3b      	ldr	r3, [pc, #236]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x348>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	099b      	lsrs	r3, r3, #6
 80051c6:	2200      	movs	r2, #0
 80051c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d2:	623b      	str	r3, [r7, #32]
 80051d4:	2300      	movs	r3, #0
 80051d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80051d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051dc:	4642      	mov	r2, r8
 80051de:	464b      	mov	r3, r9
 80051e0:	f04f 0000 	mov.w	r0, #0
 80051e4:	f04f 0100 	mov.w	r1, #0
 80051e8:	0159      	lsls	r1, r3, #5
 80051ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051ee:	0150      	lsls	r0, r2, #5
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4641      	mov	r1, r8
 80051f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80051fa:	4649      	mov	r1, r9
 80051fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800520c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005210:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005214:	ebb2 040a 	subs.w	r4, r2, sl
 8005218:	eb63 050b 	sbc.w	r5, r3, fp
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	00eb      	lsls	r3, r5, #3
 8005226:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800522a:	00e2      	lsls	r2, r4, #3
 800522c:	4614      	mov	r4, r2
 800522e:	461d      	mov	r5, r3
 8005230:	4643      	mov	r3, r8
 8005232:	18e3      	adds	r3, r4, r3
 8005234:	603b      	str	r3, [r7, #0]
 8005236:	464b      	mov	r3, r9
 8005238:	eb45 0303 	adc.w	r3, r5, r3
 800523c:	607b      	str	r3, [r7, #4]
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	e9d7 4500 	ldrd	r4, r5, [r7]
 800524a:	4629      	mov	r1, r5
 800524c:	028b      	lsls	r3, r1, #10
 800524e:	4621      	mov	r1, r4
 8005250:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005254:	4621      	mov	r1, r4
 8005256:	028a      	lsls	r2, r1, #10
 8005258:	4610      	mov	r0, r2
 800525a:	4619      	mov	r1, r3
 800525c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005260:	2200      	movs	r2, #0
 8005262:	61bb      	str	r3, [r7, #24]
 8005264:	61fa      	str	r2, [r7, #28]
 8005266:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800526a:	f7fb fd0d 	bl	8000c88 <__aeabi_uldivmod>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	4613      	mov	r3, r2
 8005274:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005278:	4b0d      	ldr	r3, [pc, #52]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x348>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	0f1b      	lsrs	r3, r3, #28
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8005286:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800528a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800528e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005292:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005296:	e003      	b.n	80052a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005298:	4b06      	ldr	r3, [pc, #24]	@ (80052b4 <HAL_RCC_GetSysClockFreq+0x34c>)
 800529a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800529e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3798      	adds	r7, #152	@ 0x98
 80052a8:	46bd      	mov	sp, r7
 80052aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ae:	bf00      	nop
 80052b0:	40023800 	.word	0x40023800
 80052b4:	00f42400 	.word	0x00f42400
 80052b8:	017d7840 	.word	0x017d7840

080052bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e28d      	b.n	80057ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 8083 	beq.w	80053e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80052dc:	4b94      	ldr	r3, [pc, #592]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f003 030c 	and.w	r3, r3, #12
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d019      	beq.n	800531c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80052e8:	4b91      	ldr	r3, [pc, #580]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d106      	bne.n	8005302 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80052f4:	4b8e      	ldr	r3, [pc, #568]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005300:	d00c      	beq.n	800531c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005302:	4b8b      	ldr	r3, [pc, #556]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800530a:	2b0c      	cmp	r3, #12
 800530c:	d112      	bne.n	8005334 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800530e:	4b88      	ldr	r3, [pc, #544]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005316:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800531a:	d10b      	bne.n	8005334 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800531c:	4b84      	ldr	r3, [pc, #528]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d05b      	beq.n	80053e0 <HAL_RCC_OscConfig+0x124>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d157      	bne.n	80053e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e25a      	b.n	80057ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800533c:	d106      	bne.n	800534c <HAL_RCC_OscConfig+0x90>
 800533e:	4b7c      	ldr	r3, [pc, #496]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a7b      	ldr	r2, [pc, #492]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 8005344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	e01d      	b.n	8005388 <HAL_RCC_OscConfig+0xcc>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005354:	d10c      	bne.n	8005370 <HAL_RCC_OscConfig+0xb4>
 8005356:	4b76      	ldr	r3, [pc, #472]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a75      	ldr	r2, [pc, #468]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 800535c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	4b73      	ldr	r3, [pc, #460]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a72      	ldr	r2, [pc, #456]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 8005368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	e00b      	b.n	8005388 <HAL_RCC_OscConfig+0xcc>
 8005370:	4b6f      	ldr	r3, [pc, #444]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a6e      	ldr	r2, [pc, #440]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 8005376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	4b6c      	ldr	r3, [pc, #432]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a6b      	ldr	r2, [pc, #428]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 8005382:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d013      	beq.n	80053b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005390:	f7fc fb8e 	bl	8001ab0 <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005398:	f7fc fb8a 	bl	8001ab0 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b64      	cmp	r3, #100	@ 0x64
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e21f      	b.n	80057ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053aa:	4b61      	ldr	r3, [pc, #388]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0f0      	beq.n	8005398 <HAL_RCC_OscConfig+0xdc>
 80053b6:	e014      	b.n	80053e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b8:	f7fc fb7a 	bl	8001ab0 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053c0:	f7fc fb76 	bl	8001ab0 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b64      	cmp	r3, #100	@ 0x64
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e20b      	b.n	80057ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053d2:	4b57      	ldr	r3, [pc, #348]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f0      	bne.n	80053c0 <HAL_RCC_OscConfig+0x104>
 80053de:	e000      	b.n	80053e2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d06f      	beq.n	80054ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80053ee:	4b50      	ldr	r3, [pc, #320]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 030c 	and.w	r3, r3, #12
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d017      	beq.n	800542a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80053fa:	4b4d      	ldr	r3, [pc, #308]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005402:	2b08      	cmp	r3, #8
 8005404:	d105      	bne.n	8005412 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005406:	4b4a      	ldr	r3, [pc, #296]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005412:	4b47      	ldr	r3, [pc, #284]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800541a:	2b0c      	cmp	r3, #12
 800541c:	d11c      	bne.n	8005458 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800541e:	4b44      	ldr	r3, [pc, #272]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d116      	bne.n	8005458 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800542a:	4b41      	ldr	r3, [pc, #260]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <HAL_RCC_OscConfig+0x186>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d001      	beq.n	8005442 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e1d3      	b.n	80057ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005442:	4b3b      	ldr	r3, [pc, #236]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	4937      	ldr	r1, [pc, #220]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 8005452:	4313      	orrs	r3, r2
 8005454:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005456:	e03a      	b.n	80054ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d020      	beq.n	80054a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005460:	4b34      	ldr	r3, [pc, #208]	@ (8005534 <HAL_RCC_OscConfig+0x278>)
 8005462:	2201      	movs	r2, #1
 8005464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005466:	f7fc fb23 	bl	8001ab0 <HAL_GetTick>
 800546a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800546c:	e008      	b.n	8005480 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800546e:	f7fc fb1f 	bl	8001ab0 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e1b4      	b.n	80057ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005480:	4b2b      	ldr	r3, [pc, #172]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0f0      	beq.n	800546e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548c:	4b28      	ldr	r3, [pc, #160]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	4925      	ldr	r1, [pc, #148]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 800549c:	4313      	orrs	r3, r2
 800549e:	600b      	str	r3, [r1, #0]
 80054a0:	e015      	b.n	80054ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054a2:	4b24      	ldr	r3, [pc, #144]	@ (8005534 <HAL_RCC_OscConfig+0x278>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f7fc fb02 	bl	8001ab0 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054b0:	f7fc fafe 	bl	8001ab0 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e193      	b.n	80057ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f0      	bne.n	80054b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d036      	beq.n	8005548 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d016      	beq.n	8005510 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054e2:	4b15      	ldr	r3, [pc, #84]	@ (8005538 <HAL_RCC_OscConfig+0x27c>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e8:	f7fc fae2 	bl	8001ab0 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054f0:	f7fc fade 	bl	8001ab0 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e173      	b.n	80057ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005502:	4b0b      	ldr	r3, [pc, #44]	@ (8005530 <HAL_RCC_OscConfig+0x274>)
 8005504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0f0      	beq.n	80054f0 <HAL_RCC_OscConfig+0x234>
 800550e:	e01b      	b.n	8005548 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005510:	4b09      	ldr	r3, [pc, #36]	@ (8005538 <HAL_RCC_OscConfig+0x27c>)
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005516:	f7fc facb 	bl	8001ab0 <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800551c:	e00e      	b.n	800553c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800551e:	f7fc fac7 	bl	8001ab0 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d907      	bls.n	800553c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e15c      	b.n	80057ea <HAL_RCC_OscConfig+0x52e>
 8005530:	40023800 	.word	0x40023800
 8005534:	42470000 	.word	0x42470000
 8005538:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800553c:	4b8a      	ldr	r3, [pc, #552]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 800553e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1ea      	bne.n	800551e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 8097 	beq.w	8005684 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005556:	2300      	movs	r3, #0
 8005558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800555a:	4b83      	ldr	r3, [pc, #524]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 800555c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10f      	bne.n	8005586 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005566:	2300      	movs	r3, #0
 8005568:	60bb      	str	r3, [r7, #8]
 800556a:	4b7f      	ldr	r3, [pc, #508]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 800556c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556e:	4a7e      	ldr	r2, [pc, #504]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 8005570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005574:	6413      	str	r3, [r2, #64]	@ 0x40
 8005576:	4b7c      	ldr	r3, [pc, #496]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 8005578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800557e:	60bb      	str	r3, [r7, #8]
 8005580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005582:	2301      	movs	r3, #1
 8005584:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005586:	4b79      	ldr	r3, [pc, #484]	@ (800576c <HAL_RCC_OscConfig+0x4b0>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800558e:	2b00      	cmp	r3, #0
 8005590:	d118      	bne.n	80055c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005592:	4b76      	ldr	r3, [pc, #472]	@ (800576c <HAL_RCC_OscConfig+0x4b0>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a75      	ldr	r2, [pc, #468]	@ (800576c <HAL_RCC_OscConfig+0x4b0>)
 8005598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800559c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800559e:	f7fc fa87 	bl	8001ab0 <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a4:	e008      	b.n	80055b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a6:	f7fc fa83 	bl	8001ab0 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d901      	bls.n	80055b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e118      	b.n	80057ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b8:	4b6c      	ldr	r3, [pc, #432]	@ (800576c <HAL_RCC_OscConfig+0x4b0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0f0      	beq.n	80055a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d106      	bne.n	80055da <HAL_RCC_OscConfig+0x31e>
 80055cc:	4b66      	ldr	r3, [pc, #408]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 80055ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d0:	4a65      	ldr	r2, [pc, #404]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 80055d2:	f043 0301 	orr.w	r3, r3, #1
 80055d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80055d8:	e01c      	b.n	8005614 <HAL_RCC_OscConfig+0x358>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	2b05      	cmp	r3, #5
 80055e0:	d10c      	bne.n	80055fc <HAL_RCC_OscConfig+0x340>
 80055e2:	4b61      	ldr	r3, [pc, #388]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 80055e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e6:	4a60      	ldr	r2, [pc, #384]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 80055e8:	f043 0304 	orr.w	r3, r3, #4
 80055ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80055ee:	4b5e      	ldr	r3, [pc, #376]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 80055f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055f2:	4a5d      	ldr	r2, [pc, #372]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 80055f4:	f043 0301 	orr.w	r3, r3, #1
 80055f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80055fa:	e00b      	b.n	8005614 <HAL_RCC_OscConfig+0x358>
 80055fc:	4b5a      	ldr	r3, [pc, #360]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 80055fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005600:	4a59      	ldr	r2, [pc, #356]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 8005602:	f023 0301 	bic.w	r3, r3, #1
 8005606:	6713      	str	r3, [r2, #112]	@ 0x70
 8005608:	4b57      	ldr	r3, [pc, #348]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 800560a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800560c:	4a56      	ldr	r2, [pc, #344]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 800560e:	f023 0304 	bic.w	r3, r3, #4
 8005612:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d015      	beq.n	8005648 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800561c:	f7fc fa48 	bl	8001ab0 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005622:	e00a      	b.n	800563a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005624:	f7fc fa44 	bl	8001ab0 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005632:	4293      	cmp	r3, r2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e0d7      	b.n	80057ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800563a:	4b4b      	ldr	r3, [pc, #300]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 800563c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0ee      	beq.n	8005624 <HAL_RCC_OscConfig+0x368>
 8005646:	e014      	b.n	8005672 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005648:	f7fc fa32 	bl	8001ab0 <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800564e:	e00a      	b.n	8005666 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005650:	f7fc fa2e 	bl	8001ab0 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800565e:	4293      	cmp	r3, r2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e0c1      	b.n	80057ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005666:	4b40      	ldr	r3, [pc, #256]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 8005668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1ee      	bne.n	8005650 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005672:	7dfb      	ldrb	r3, [r7, #23]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d105      	bne.n	8005684 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005678:	4b3b      	ldr	r3, [pc, #236]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 800567a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567c:	4a3a      	ldr	r2, [pc, #232]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 800567e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005682:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 80ad 	beq.w	80057e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800568e:	4b36      	ldr	r3, [pc, #216]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f003 030c 	and.w	r3, r3, #12
 8005696:	2b08      	cmp	r3, #8
 8005698:	d060      	beq.n	800575c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d145      	bne.n	800572e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a2:	4b33      	ldr	r3, [pc, #204]	@ (8005770 <HAL_RCC_OscConfig+0x4b4>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a8:	f7fc fa02 	bl	8001ab0 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056b0:	f7fc f9fe 	bl	8001ab0 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e093      	b.n	80057ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c2:	4b29      	ldr	r3, [pc, #164]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1f0      	bne.n	80056b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69da      	ldr	r2, [r3, #28]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056dc:	019b      	lsls	r3, r3, #6
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e4:	085b      	lsrs	r3, r3, #1
 80056e6:	3b01      	subs	r3, #1
 80056e8:	041b      	lsls	r3, r3, #16
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f0:	061b      	lsls	r3, r3, #24
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f8:	071b      	lsls	r3, r3, #28
 80056fa:	491b      	ldr	r1, [pc, #108]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005700:	4b1b      	ldr	r3, [pc, #108]	@ (8005770 <HAL_RCC_OscConfig+0x4b4>)
 8005702:	2201      	movs	r2, #1
 8005704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005706:	f7fc f9d3 	bl	8001ab0 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800570e:	f7fc f9cf 	bl	8001ab0 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e064      	b.n	80057ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005720:	4b11      	ldr	r3, [pc, #68]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0f0      	beq.n	800570e <HAL_RCC_OscConfig+0x452>
 800572c:	e05c      	b.n	80057e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800572e:	4b10      	ldr	r3, [pc, #64]	@ (8005770 <HAL_RCC_OscConfig+0x4b4>)
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005734:	f7fc f9bc 	bl	8001ab0 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800573c:	f7fc f9b8 	bl	8001ab0 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e04d      	b.n	80057ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800574e:	4b06      	ldr	r3, [pc, #24]	@ (8005768 <HAL_RCC_OscConfig+0x4ac>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f0      	bne.n	800573c <HAL_RCC_OscConfig+0x480>
 800575a:	e045      	b.n	80057e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d107      	bne.n	8005774 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e040      	b.n	80057ea <HAL_RCC_OscConfig+0x52e>
 8005768:	40023800 	.word	0x40023800
 800576c:	40007000 	.word	0x40007000
 8005770:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005774:	4b1f      	ldr	r3, [pc, #124]	@ (80057f4 <HAL_RCC_OscConfig+0x538>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d030      	beq.n	80057e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800578c:	429a      	cmp	r2, r3
 800578e:	d129      	bne.n	80057e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800579a:	429a      	cmp	r2, r3
 800579c:	d122      	bne.n	80057e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80057a4:	4013      	ands	r3, r2
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80057aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d119      	bne.n	80057e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ba:	085b      	lsrs	r3, r3, #1
 80057bc:	3b01      	subs	r3, #1
 80057be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d10f      	bne.n	80057e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d107      	bne.n	80057e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d001      	beq.n	80057e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e000      	b.n	80057ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	40023800 	.word	0x40023800

080057f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e042      	b.n	8005890 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7fb ff52 	bl	80016c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2224      	movs	r2, #36	@ 0x24
 8005828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800583a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fa09 	bl	8005c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005850:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695a      	ldr	r2, [r3, #20]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005860:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005870:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2220      	movs	r2, #32
 800587c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b08a      	sub	sp, #40	@ 0x28
 800589c:	af02      	add	r7, sp, #8
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	603b      	str	r3, [r7, #0]
 80058a4:	4613      	mov	r3, r2
 80058a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d175      	bne.n	80059a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <HAL_UART_Transmit+0x2c>
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e06e      	b.n	80059a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2221      	movs	r2, #33	@ 0x21
 80058d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058d6:	f7fc f8eb 	bl	8001ab0 <HAL_GetTick>
 80058da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	88fa      	ldrh	r2, [r7, #6]
 80058e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	88fa      	ldrh	r2, [r7, #6]
 80058e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058f0:	d108      	bne.n	8005904 <HAL_UART_Transmit+0x6c>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d104      	bne.n	8005904 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058fa:	2300      	movs	r3, #0
 80058fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	61bb      	str	r3, [r7, #24]
 8005902:	e003      	b.n	800590c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005908:	2300      	movs	r3, #0
 800590a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800590c:	e02e      	b.n	800596c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2200      	movs	r2, #0
 8005916:	2180      	movs	r1, #128	@ 0x80
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 f8df 	bl	8005adc <UART_WaitOnFlagUntilTimeout>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d005      	beq.n	8005930 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e03a      	b.n	80059a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10b      	bne.n	800594e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005944:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	3302      	adds	r3, #2
 800594a:	61bb      	str	r3, [r7, #24]
 800594c:	e007      	b.n	800595e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	781a      	ldrb	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	3301      	adds	r3, #1
 800595c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1cb      	bne.n	800590e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2200      	movs	r2, #0
 800597e:	2140      	movs	r1, #64	@ 0x40
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 f8ab 	bl	8005adc <UART_WaitOnFlagUntilTimeout>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d005      	beq.n	8005998 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e006      	b.n	80059a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2220      	movs	r2, #32
 800599c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	e000      	b.n	80059a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80059a4:	2302      	movs	r3, #2
  }
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3720      	adds	r7, #32
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b08a      	sub	sp, #40	@ 0x28
 80059b2:	af02      	add	r7, sp, #8
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	603b      	str	r3, [r7, #0]
 80059ba:	4613      	mov	r3, r2
 80059bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b20      	cmp	r3, #32
 80059cc:	f040 8081 	bne.w	8005ad2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <HAL_UART_Receive+0x2e>
 80059d6:	88fb      	ldrh	r3, [r7, #6]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e079      	b.n	8005ad4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2222      	movs	r2, #34	@ 0x22
 80059ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059f4:	f7fc f85c 	bl	8001ab0 <HAL_GetTick>
 80059f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	88fa      	ldrh	r2, [r7, #6]
 80059fe:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	88fa      	ldrh	r2, [r7, #6]
 8005a04:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a0e:	d108      	bne.n	8005a22 <HAL_UART_Receive+0x74>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	61bb      	str	r3, [r7, #24]
 8005a20:	e003      	b.n	8005a2a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a26:	2300      	movs	r3, #0
 8005a28:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005a2a:	e047      	b.n	8005abc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	2200      	movs	r2, #0
 8005a34:	2120      	movs	r1, #32
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 f850 	bl	8005adc <UART_WaitOnFlagUntilTimeout>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e042      	b.n	8005ad4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10c      	bne.n	8005a6e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	3302      	adds	r3, #2
 8005a6a:	61bb      	str	r3, [r7, #24]
 8005a6c:	e01f      	b.n	8005aae <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a76:	d007      	beq.n	8005a88 <HAL_UART_Receive+0xda>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10a      	bne.n	8005a96 <HAL_UART_Receive+0xe8>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d106      	bne.n	8005a96 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	e008      	b.n	8005aa8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1b2      	bne.n	8005a2c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e000      	b.n	8005ad4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005ad2:	2302      	movs	r3, #2
  }
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3720      	adds	r7, #32
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aec:	e03b      	b.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af4:	d037      	beq.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af6:	f7fb ffdb 	bl	8001ab0 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	6a3a      	ldr	r2, [r7, #32]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d302      	bcc.n	8005b0c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e03a      	b.n	8005b86 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f003 0304 	and.w	r3, r3, #4
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d023      	beq.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b80      	cmp	r3, #128	@ 0x80
 8005b22:	d020      	beq.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b40      	cmp	r3, #64	@ 0x40
 8005b28:	d01d      	beq.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0308 	and.w	r3, r3, #8
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d116      	bne.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005b38:	2300      	movs	r3, #0
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 f81d 	bl	8005b8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2208      	movs	r2, #8
 8005b58:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e00f      	b.n	8005b86 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	bf0c      	ite	eq
 8005b76:	2301      	moveq	r3, #1
 8005b78:	2300      	movne	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d0b4      	beq.n	8005aee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b095      	sub	sp, #84	@ 0x54
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	330c      	adds	r3, #12
 8005b9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	330c      	adds	r3, #12
 8005bb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005bb6:	643a      	str	r2, [r7, #64]	@ 0x40
 8005bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e5      	bne.n	8005b96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3314      	adds	r3, #20
 8005bd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	f023 0301 	bic.w	r3, r3, #1
 8005be0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3314      	adds	r3, #20
 8005be8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e5      	bne.n	8005bca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d119      	bne.n	8005c3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	330c      	adds	r3, #12
 8005c0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f023 0310 	bic.w	r3, r3, #16
 8005c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	330c      	adds	r3, #12
 8005c24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c26:	61ba      	str	r2, [r7, #24]
 8005c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	6979      	ldr	r1, [r7, #20]
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	613b      	str	r3, [r7, #16]
   return(result);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e5      	bne.n	8005c06 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c48:	bf00      	nop
 8005c4a:	3754      	adds	r7, #84	@ 0x54
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c58:	b0c0      	sub	sp, #256	@ 0x100
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c70:	68d9      	ldr	r1, [r3, #12]
 8005c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	ea40 0301 	orr.w	r3, r0, r1
 8005c7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	431a      	orrs	r2, r3
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005cac:	f021 010c 	bic.w	r1, r1, #12
 8005cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005cba:	430b      	orrs	r3, r1
 8005cbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cce:	6999      	ldr	r1, [r3, #24]
 8005cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	ea40 0301 	orr.w	r3, r0, r1
 8005cda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b8f      	ldr	r3, [pc, #572]	@ (8005f20 <UART_SetConfig+0x2cc>)
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d005      	beq.n	8005cf4 <UART_SetConfig+0xa0>
 8005ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	4b8d      	ldr	r3, [pc, #564]	@ (8005f24 <UART_SetConfig+0x2d0>)
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d104      	bne.n	8005cfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cf4:	f7ff f924 	bl	8004f40 <HAL_RCC_GetPCLK2Freq>
 8005cf8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005cfc:	e003      	b.n	8005d06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cfe:	f7ff f90b 	bl	8004f18 <HAL_RCC_GetPCLK1Freq>
 8005d02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d10:	f040 810c 	bne.w	8005f2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005d22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005d26:	4622      	mov	r2, r4
 8005d28:	462b      	mov	r3, r5
 8005d2a:	1891      	adds	r1, r2, r2
 8005d2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005d2e:	415b      	adcs	r3, r3
 8005d30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d36:	4621      	mov	r1, r4
 8005d38:	eb12 0801 	adds.w	r8, r2, r1
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	eb43 0901 	adc.w	r9, r3, r1
 8005d42:	f04f 0200 	mov.w	r2, #0
 8005d46:	f04f 0300 	mov.w	r3, #0
 8005d4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d56:	4690      	mov	r8, r2
 8005d58:	4699      	mov	r9, r3
 8005d5a:	4623      	mov	r3, r4
 8005d5c:	eb18 0303 	adds.w	r3, r8, r3
 8005d60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d64:	462b      	mov	r3, r5
 8005d66:	eb49 0303 	adc.w	r3, r9, r3
 8005d6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005d7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d82:	460b      	mov	r3, r1
 8005d84:	18db      	adds	r3, r3, r3
 8005d86:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d88:	4613      	mov	r3, r2
 8005d8a:	eb42 0303 	adc.w	r3, r2, r3
 8005d8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d98:	f7fa ff76 	bl	8000c88 <__aeabi_uldivmod>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4b61      	ldr	r3, [pc, #388]	@ (8005f28 <UART_SetConfig+0x2d4>)
 8005da2:	fba3 2302 	umull	r2, r3, r3, r2
 8005da6:	095b      	lsrs	r3, r3, #5
 8005da8:	011c      	lsls	r4, r3, #4
 8005daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dae:	2200      	movs	r2, #0
 8005db0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005db4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005db8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005dbc:	4642      	mov	r2, r8
 8005dbe:	464b      	mov	r3, r9
 8005dc0:	1891      	adds	r1, r2, r2
 8005dc2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005dc4:	415b      	adcs	r3, r3
 8005dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005dcc:	4641      	mov	r1, r8
 8005dce:	eb12 0a01 	adds.w	sl, r2, r1
 8005dd2:	4649      	mov	r1, r9
 8005dd4:	eb43 0b01 	adc.w	fp, r3, r1
 8005dd8:	f04f 0200 	mov.w	r2, #0
 8005ddc:	f04f 0300 	mov.w	r3, #0
 8005de0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005de4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005de8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dec:	4692      	mov	sl, r2
 8005dee:	469b      	mov	fp, r3
 8005df0:	4643      	mov	r3, r8
 8005df2:	eb1a 0303 	adds.w	r3, sl, r3
 8005df6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dfa:	464b      	mov	r3, r9
 8005dfc:	eb4b 0303 	adc.w	r3, fp, r3
 8005e00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005e14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	18db      	adds	r3, r3, r3
 8005e1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e1e:	4613      	mov	r3, r2
 8005e20:	eb42 0303 	adc.w	r3, r2, r3
 8005e24:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005e2e:	f7fa ff2b 	bl	8000c88 <__aeabi_uldivmod>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4611      	mov	r1, r2
 8005e38:	4b3b      	ldr	r3, [pc, #236]	@ (8005f28 <UART_SetConfig+0x2d4>)
 8005e3a:	fba3 2301 	umull	r2, r3, r3, r1
 8005e3e:	095b      	lsrs	r3, r3, #5
 8005e40:	2264      	movs	r2, #100	@ 0x64
 8005e42:	fb02 f303 	mul.w	r3, r2, r3
 8005e46:	1acb      	subs	r3, r1, r3
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005e4e:	4b36      	ldr	r3, [pc, #216]	@ (8005f28 <UART_SetConfig+0x2d4>)
 8005e50:	fba3 2302 	umull	r2, r3, r3, r2
 8005e54:	095b      	lsrs	r3, r3, #5
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e5c:	441c      	add	r4, r3
 8005e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005e6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005e70:	4642      	mov	r2, r8
 8005e72:	464b      	mov	r3, r9
 8005e74:	1891      	adds	r1, r2, r2
 8005e76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e78:	415b      	adcs	r3, r3
 8005e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e80:	4641      	mov	r1, r8
 8005e82:	1851      	adds	r1, r2, r1
 8005e84:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e86:	4649      	mov	r1, r9
 8005e88:	414b      	adcs	r3, r1
 8005e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e98:	4659      	mov	r1, fp
 8005e9a:	00cb      	lsls	r3, r1, #3
 8005e9c:	4651      	mov	r1, sl
 8005e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ea2:	4651      	mov	r1, sl
 8005ea4:	00ca      	lsls	r2, r1, #3
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4603      	mov	r3, r0
 8005eac:	4642      	mov	r2, r8
 8005eae:	189b      	adds	r3, r3, r2
 8005eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005eb4:	464b      	mov	r3, r9
 8005eb6:	460a      	mov	r2, r1
 8005eb8:	eb42 0303 	adc.w	r3, r2, r3
 8005ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ecc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ed0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	18db      	adds	r3, r3, r3
 8005ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eda:	4613      	mov	r3, r2
 8005edc:	eb42 0303 	adc.w	r3, r2, r3
 8005ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ee2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ee6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005eea:	f7fa fecd 	bl	8000c88 <__aeabi_uldivmod>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f28 <UART_SetConfig+0x2d4>)
 8005ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ef8:	095b      	lsrs	r3, r3, #5
 8005efa:	2164      	movs	r1, #100	@ 0x64
 8005efc:	fb01 f303 	mul.w	r3, r1, r3
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	3332      	adds	r3, #50	@ 0x32
 8005f06:	4a08      	ldr	r2, [pc, #32]	@ (8005f28 <UART_SetConfig+0x2d4>)
 8005f08:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0c:	095b      	lsrs	r3, r3, #5
 8005f0e:	f003 0207 	and.w	r2, r3, #7
 8005f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4422      	add	r2, r4
 8005f1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f1c:	e106      	b.n	800612c <UART_SetConfig+0x4d8>
 8005f1e:	bf00      	nop
 8005f20:	40011000 	.word	0x40011000
 8005f24:	40011400 	.word	0x40011400
 8005f28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f30:	2200      	movs	r2, #0
 8005f32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005f3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005f3e:	4642      	mov	r2, r8
 8005f40:	464b      	mov	r3, r9
 8005f42:	1891      	adds	r1, r2, r2
 8005f44:	6239      	str	r1, [r7, #32]
 8005f46:	415b      	adcs	r3, r3
 8005f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f4e:	4641      	mov	r1, r8
 8005f50:	1854      	adds	r4, r2, r1
 8005f52:	4649      	mov	r1, r9
 8005f54:	eb43 0501 	adc.w	r5, r3, r1
 8005f58:	f04f 0200 	mov.w	r2, #0
 8005f5c:	f04f 0300 	mov.w	r3, #0
 8005f60:	00eb      	lsls	r3, r5, #3
 8005f62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f66:	00e2      	lsls	r2, r4, #3
 8005f68:	4614      	mov	r4, r2
 8005f6a:	461d      	mov	r5, r3
 8005f6c:	4643      	mov	r3, r8
 8005f6e:	18e3      	adds	r3, r4, r3
 8005f70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f74:	464b      	mov	r3, r9
 8005f76:	eb45 0303 	adc.w	r3, r5, r3
 8005f7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	008b      	lsls	r3, r1, #2
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	008a      	lsls	r2, r1, #2
 8005fa8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005fac:	f7fa fe6c 	bl	8000c88 <__aeabi_uldivmod>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4b60      	ldr	r3, [pc, #384]	@ (8006138 <UART_SetConfig+0x4e4>)
 8005fb6:	fba3 2302 	umull	r2, r3, r3, r2
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	011c      	lsls	r4, r3, #4
 8005fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005fcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005fd0:	4642      	mov	r2, r8
 8005fd2:	464b      	mov	r3, r9
 8005fd4:	1891      	adds	r1, r2, r2
 8005fd6:	61b9      	str	r1, [r7, #24]
 8005fd8:	415b      	adcs	r3, r3
 8005fda:	61fb      	str	r3, [r7, #28]
 8005fdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fe0:	4641      	mov	r1, r8
 8005fe2:	1851      	adds	r1, r2, r1
 8005fe4:	6139      	str	r1, [r7, #16]
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	414b      	adcs	r3, r1
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	f04f 0200 	mov.w	r2, #0
 8005ff0:	f04f 0300 	mov.w	r3, #0
 8005ff4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ff8:	4659      	mov	r1, fp
 8005ffa:	00cb      	lsls	r3, r1, #3
 8005ffc:	4651      	mov	r1, sl
 8005ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006002:	4651      	mov	r1, sl
 8006004:	00ca      	lsls	r2, r1, #3
 8006006:	4610      	mov	r0, r2
 8006008:	4619      	mov	r1, r3
 800600a:	4603      	mov	r3, r0
 800600c:	4642      	mov	r2, r8
 800600e:	189b      	adds	r3, r3, r2
 8006010:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006014:	464b      	mov	r3, r9
 8006016:	460a      	mov	r2, r1
 8006018:	eb42 0303 	adc.w	r3, r2, r3
 800601c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	67bb      	str	r3, [r7, #120]	@ 0x78
 800602a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800602c:	f04f 0200 	mov.w	r2, #0
 8006030:	f04f 0300 	mov.w	r3, #0
 8006034:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006038:	4649      	mov	r1, r9
 800603a:	008b      	lsls	r3, r1, #2
 800603c:	4641      	mov	r1, r8
 800603e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006042:	4641      	mov	r1, r8
 8006044:	008a      	lsls	r2, r1, #2
 8006046:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800604a:	f7fa fe1d 	bl	8000c88 <__aeabi_uldivmod>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	4611      	mov	r1, r2
 8006054:	4b38      	ldr	r3, [pc, #224]	@ (8006138 <UART_SetConfig+0x4e4>)
 8006056:	fba3 2301 	umull	r2, r3, r3, r1
 800605a:	095b      	lsrs	r3, r3, #5
 800605c:	2264      	movs	r2, #100	@ 0x64
 800605e:	fb02 f303 	mul.w	r3, r2, r3
 8006062:	1acb      	subs	r3, r1, r3
 8006064:	011b      	lsls	r3, r3, #4
 8006066:	3332      	adds	r3, #50	@ 0x32
 8006068:	4a33      	ldr	r2, [pc, #204]	@ (8006138 <UART_SetConfig+0x4e4>)
 800606a:	fba2 2303 	umull	r2, r3, r2, r3
 800606e:	095b      	lsrs	r3, r3, #5
 8006070:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006074:	441c      	add	r4, r3
 8006076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800607a:	2200      	movs	r2, #0
 800607c:	673b      	str	r3, [r7, #112]	@ 0x70
 800607e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006080:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006084:	4642      	mov	r2, r8
 8006086:	464b      	mov	r3, r9
 8006088:	1891      	adds	r1, r2, r2
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	415b      	adcs	r3, r3
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006094:	4641      	mov	r1, r8
 8006096:	1851      	adds	r1, r2, r1
 8006098:	6039      	str	r1, [r7, #0]
 800609a:	4649      	mov	r1, r9
 800609c:	414b      	adcs	r3, r1
 800609e:	607b      	str	r3, [r7, #4]
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060ac:	4659      	mov	r1, fp
 80060ae:	00cb      	lsls	r3, r1, #3
 80060b0:	4651      	mov	r1, sl
 80060b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060b6:	4651      	mov	r1, sl
 80060b8:	00ca      	lsls	r2, r1, #3
 80060ba:	4610      	mov	r0, r2
 80060bc:	4619      	mov	r1, r3
 80060be:	4603      	mov	r3, r0
 80060c0:	4642      	mov	r2, r8
 80060c2:	189b      	adds	r3, r3, r2
 80060c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060c6:	464b      	mov	r3, r9
 80060c8:	460a      	mov	r2, r1
 80060ca:	eb42 0303 	adc.w	r3, r2, r3
 80060ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80060da:	667a      	str	r2, [r7, #100]	@ 0x64
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80060e8:	4649      	mov	r1, r9
 80060ea:	008b      	lsls	r3, r1, #2
 80060ec:	4641      	mov	r1, r8
 80060ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060f2:	4641      	mov	r1, r8
 80060f4:	008a      	lsls	r2, r1, #2
 80060f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80060fa:	f7fa fdc5 	bl	8000c88 <__aeabi_uldivmod>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4b0d      	ldr	r3, [pc, #52]	@ (8006138 <UART_SetConfig+0x4e4>)
 8006104:	fba3 1302 	umull	r1, r3, r3, r2
 8006108:	095b      	lsrs	r3, r3, #5
 800610a:	2164      	movs	r1, #100	@ 0x64
 800610c:	fb01 f303 	mul.w	r3, r1, r3
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	3332      	adds	r3, #50	@ 0x32
 8006116:	4a08      	ldr	r2, [pc, #32]	@ (8006138 <UART_SetConfig+0x4e4>)
 8006118:	fba2 2303 	umull	r2, r3, r2, r3
 800611c:	095b      	lsrs	r3, r3, #5
 800611e:	f003 020f 	and.w	r2, r3, #15
 8006122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4422      	add	r2, r4
 800612a:	609a      	str	r2, [r3, #8]
}
 800612c:	bf00      	nop
 800612e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006132:	46bd      	mov	sp, r7
 8006134:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006138:	51eb851f 	.word	0x51eb851f

0800613c <__cvt>:
 800613c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006140:	ec57 6b10 	vmov	r6, r7, d0
 8006144:	2f00      	cmp	r7, #0
 8006146:	460c      	mov	r4, r1
 8006148:	4619      	mov	r1, r3
 800614a:	463b      	mov	r3, r7
 800614c:	bfbb      	ittet	lt
 800614e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006152:	461f      	movlt	r7, r3
 8006154:	2300      	movge	r3, #0
 8006156:	232d      	movlt	r3, #45	@ 0x2d
 8006158:	700b      	strb	r3, [r1, #0]
 800615a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800615c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006160:	4691      	mov	r9, r2
 8006162:	f023 0820 	bic.w	r8, r3, #32
 8006166:	bfbc      	itt	lt
 8006168:	4632      	movlt	r2, r6
 800616a:	4616      	movlt	r6, r2
 800616c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006170:	d005      	beq.n	800617e <__cvt+0x42>
 8006172:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006176:	d100      	bne.n	800617a <__cvt+0x3e>
 8006178:	3401      	adds	r4, #1
 800617a:	2102      	movs	r1, #2
 800617c:	e000      	b.n	8006180 <__cvt+0x44>
 800617e:	2103      	movs	r1, #3
 8006180:	ab03      	add	r3, sp, #12
 8006182:	9301      	str	r3, [sp, #4]
 8006184:	ab02      	add	r3, sp, #8
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	ec47 6b10 	vmov	d0, r6, r7
 800618c:	4653      	mov	r3, sl
 800618e:	4622      	mov	r2, r4
 8006190:	f000 fe5a 	bl	8006e48 <_dtoa_r>
 8006194:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006198:	4605      	mov	r5, r0
 800619a:	d119      	bne.n	80061d0 <__cvt+0x94>
 800619c:	f019 0f01 	tst.w	r9, #1
 80061a0:	d00e      	beq.n	80061c0 <__cvt+0x84>
 80061a2:	eb00 0904 	add.w	r9, r0, r4
 80061a6:	2200      	movs	r2, #0
 80061a8:	2300      	movs	r3, #0
 80061aa:	4630      	mov	r0, r6
 80061ac:	4639      	mov	r1, r7
 80061ae:	f7fa fcab 	bl	8000b08 <__aeabi_dcmpeq>
 80061b2:	b108      	cbz	r0, 80061b8 <__cvt+0x7c>
 80061b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80061b8:	2230      	movs	r2, #48	@ 0x30
 80061ba:	9b03      	ldr	r3, [sp, #12]
 80061bc:	454b      	cmp	r3, r9
 80061be:	d31e      	bcc.n	80061fe <__cvt+0xc2>
 80061c0:	9b03      	ldr	r3, [sp, #12]
 80061c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061c4:	1b5b      	subs	r3, r3, r5
 80061c6:	4628      	mov	r0, r5
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	b004      	add	sp, #16
 80061cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061d4:	eb00 0904 	add.w	r9, r0, r4
 80061d8:	d1e5      	bne.n	80061a6 <__cvt+0x6a>
 80061da:	7803      	ldrb	r3, [r0, #0]
 80061dc:	2b30      	cmp	r3, #48	@ 0x30
 80061de:	d10a      	bne.n	80061f6 <__cvt+0xba>
 80061e0:	2200      	movs	r2, #0
 80061e2:	2300      	movs	r3, #0
 80061e4:	4630      	mov	r0, r6
 80061e6:	4639      	mov	r1, r7
 80061e8:	f7fa fc8e 	bl	8000b08 <__aeabi_dcmpeq>
 80061ec:	b918      	cbnz	r0, 80061f6 <__cvt+0xba>
 80061ee:	f1c4 0401 	rsb	r4, r4, #1
 80061f2:	f8ca 4000 	str.w	r4, [sl]
 80061f6:	f8da 3000 	ldr.w	r3, [sl]
 80061fa:	4499      	add	r9, r3
 80061fc:	e7d3      	b.n	80061a6 <__cvt+0x6a>
 80061fe:	1c59      	adds	r1, r3, #1
 8006200:	9103      	str	r1, [sp, #12]
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	e7d9      	b.n	80061ba <__cvt+0x7e>

08006206 <__exponent>:
 8006206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006208:	2900      	cmp	r1, #0
 800620a:	bfba      	itte	lt
 800620c:	4249      	neglt	r1, r1
 800620e:	232d      	movlt	r3, #45	@ 0x2d
 8006210:	232b      	movge	r3, #43	@ 0x2b
 8006212:	2909      	cmp	r1, #9
 8006214:	7002      	strb	r2, [r0, #0]
 8006216:	7043      	strb	r3, [r0, #1]
 8006218:	dd29      	ble.n	800626e <__exponent+0x68>
 800621a:	f10d 0307 	add.w	r3, sp, #7
 800621e:	461d      	mov	r5, r3
 8006220:	270a      	movs	r7, #10
 8006222:	461a      	mov	r2, r3
 8006224:	fbb1 f6f7 	udiv	r6, r1, r7
 8006228:	fb07 1416 	mls	r4, r7, r6, r1
 800622c:	3430      	adds	r4, #48	@ 0x30
 800622e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006232:	460c      	mov	r4, r1
 8006234:	2c63      	cmp	r4, #99	@ 0x63
 8006236:	f103 33ff 	add.w	r3, r3, #4294967295
 800623a:	4631      	mov	r1, r6
 800623c:	dcf1      	bgt.n	8006222 <__exponent+0x1c>
 800623e:	3130      	adds	r1, #48	@ 0x30
 8006240:	1e94      	subs	r4, r2, #2
 8006242:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006246:	1c41      	adds	r1, r0, #1
 8006248:	4623      	mov	r3, r4
 800624a:	42ab      	cmp	r3, r5
 800624c:	d30a      	bcc.n	8006264 <__exponent+0x5e>
 800624e:	f10d 0309 	add.w	r3, sp, #9
 8006252:	1a9b      	subs	r3, r3, r2
 8006254:	42ac      	cmp	r4, r5
 8006256:	bf88      	it	hi
 8006258:	2300      	movhi	r3, #0
 800625a:	3302      	adds	r3, #2
 800625c:	4403      	add	r3, r0
 800625e:	1a18      	subs	r0, r3, r0
 8006260:	b003      	add	sp, #12
 8006262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006264:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006268:	f801 6f01 	strb.w	r6, [r1, #1]!
 800626c:	e7ed      	b.n	800624a <__exponent+0x44>
 800626e:	2330      	movs	r3, #48	@ 0x30
 8006270:	3130      	adds	r1, #48	@ 0x30
 8006272:	7083      	strb	r3, [r0, #2]
 8006274:	70c1      	strb	r1, [r0, #3]
 8006276:	1d03      	adds	r3, r0, #4
 8006278:	e7f1      	b.n	800625e <__exponent+0x58>
	...

0800627c <_printf_float>:
 800627c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006280:	b08d      	sub	sp, #52	@ 0x34
 8006282:	460c      	mov	r4, r1
 8006284:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006288:	4616      	mov	r6, r2
 800628a:	461f      	mov	r7, r3
 800628c:	4605      	mov	r5, r0
 800628e:	f000 fcdb 	bl	8006c48 <_localeconv_r>
 8006292:	6803      	ldr	r3, [r0, #0]
 8006294:	9304      	str	r3, [sp, #16]
 8006296:	4618      	mov	r0, r3
 8006298:	f7fa f80a 	bl	80002b0 <strlen>
 800629c:	2300      	movs	r3, #0
 800629e:	930a      	str	r3, [sp, #40]	@ 0x28
 80062a0:	f8d8 3000 	ldr.w	r3, [r8]
 80062a4:	9005      	str	r0, [sp, #20]
 80062a6:	3307      	adds	r3, #7
 80062a8:	f023 0307 	bic.w	r3, r3, #7
 80062ac:	f103 0208 	add.w	r2, r3, #8
 80062b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80062b4:	f8d4 b000 	ldr.w	fp, [r4]
 80062b8:	f8c8 2000 	str.w	r2, [r8]
 80062bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80062c4:	9307      	str	r3, [sp, #28]
 80062c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80062ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80062ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062d2:	4b9c      	ldr	r3, [pc, #624]	@ (8006544 <_printf_float+0x2c8>)
 80062d4:	f04f 32ff 	mov.w	r2, #4294967295
 80062d8:	f7fa fc48 	bl	8000b6c <__aeabi_dcmpun>
 80062dc:	bb70      	cbnz	r0, 800633c <_printf_float+0xc0>
 80062de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062e2:	4b98      	ldr	r3, [pc, #608]	@ (8006544 <_printf_float+0x2c8>)
 80062e4:	f04f 32ff 	mov.w	r2, #4294967295
 80062e8:	f7fa fc22 	bl	8000b30 <__aeabi_dcmple>
 80062ec:	bb30      	cbnz	r0, 800633c <_printf_float+0xc0>
 80062ee:	2200      	movs	r2, #0
 80062f0:	2300      	movs	r3, #0
 80062f2:	4640      	mov	r0, r8
 80062f4:	4649      	mov	r1, r9
 80062f6:	f7fa fc11 	bl	8000b1c <__aeabi_dcmplt>
 80062fa:	b110      	cbz	r0, 8006302 <_printf_float+0x86>
 80062fc:	232d      	movs	r3, #45	@ 0x2d
 80062fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006302:	4a91      	ldr	r2, [pc, #580]	@ (8006548 <_printf_float+0x2cc>)
 8006304:	4b91      	ldr	r3, [pc, #580]	@ (800654c <_printf_float+0x2d0>)
 8006306:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800630a:	bf94      	ite	ls
 800630c:	4690      	movls	r8, r2
 800630e:	4698      	movhi	r8, r3
 8006310:	2303      	movs	r3, #3
 8006312:	6123      	str	r3, [r4, #16]
 8006314:	f02b 0304 	bic.w	r3, fp, #4
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	f04f 0900 	mov.w	r9, #0
 800631e:	9700      	str	r7, [sp, #0]
 8006320:	4633      	mov	r3, r6
 8006322:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006324:	4621      	mov	r1, r4
 8006326:	4628      	mov	r0, r5
 8006328:	f000 f9d2 	bl	80066d0 <_printf_common>
 800632c:	3001      	adds	r0, #1
 800632e:	f040 808d 	bne.w	800644c <_printf_float+0x1d0>
 8006332:	f04f 30ff 	mov.w	r0, #4294967295
 8006336:	b00d      	add	sp, #52	@ 0x34
 8006338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800633c:	4642      	mov	r2, r8
 800633e:	464b      	mov	r3, r9
 8006340:	4640      	mov	r0, r8
 8006342:	4649      	mov	r1, r9
 8006344:	f7fa fc12 	bl	8000b6c <__aeabi_dcmpun>
 8006348:	b140      	cbz	r0, 800635c <_printf_float+0xe0>
 800634a:	464b      	mov	r3, r9
 800634c:	2b00      	cmp	r3, #0
 800634e:	bfbc      	itt	lt
 8006350:	232d      	movlt	r3, #45	@ 0x2d
 8006352:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006356:	4a7e      	ldr	r2, [pc, #504]	@ (8006550 <_printf_float+0x2d4>)
 8006358:	4b7e      	ldr	r3, [pc, #504]	@ (8006554 <_printf_float+0x2d8>)
 800635a:	e7d4      	b.n	8006306 <_printf_float+0x8a>
 800635c:	6863      	ldr	r3, [r4, #4]
 800635e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006362:	9206      	str	r2, [sp, #24]
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	d13b      	bne.n	80063e0 <_printf_float+0x164>
 8006368:	2306      	movs	r3, #6
 800636a:	6063      	str	r3, [r4, #4]
 800636c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006370:	2300      	movs	r3, #0
 8006372:	6022      	str	r2, [r4, #0]
 8006374:	9303      	str	r3, [sp, #12]
 8006376:	ab0a      	add	r3, sp, #40	@ 0x28
 8006378:	e9cd a301 	strd	sl, r3, [sp, #4]
 800637c:	ab09      	add	r3, sp, #36	@ 0x24
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	6861      	ldr	r1, [r4, #4]
 8006382:	ec49 8b10 	vmov	d0, r8, r9
 8006386:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800638a:	4628      	mov	r0, r5
 800638c:	f7ff fed6 	bl	800613c <__cvt>
 8006390:	9b06      	ldr	r3, [sp, #24]
 8006392:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006394:	2b47      	cmp	r3, #71	@ 0x47
 8006396:	4680      	mov	r8, r0
 8006398:	d129      	bne.n	80063ee <_printf_float+0x172>
 800639a:	1cc8      	adds	r0, r1, #3
 800639c:	db02      	blt.n	80063a4 <_printf_float+0x128>
 800639e:	6863      	ldr	r3, [r4, #4]
 80063a0:	4299      	cmp	r1, r3
 80063a2:	dd41      	ble.n	8006428 <_printf_float+0x1ac>
 80063a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80063a8:	fa5f fa8a 	uxtb.w	sl, sl
 80063ac:	3901      	subs	r1, #1
 80063ae:	4652      	mov	r2, sl
 80063b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80063b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80063b6:	f7ff ff26 	bl	8006206 <__exponent>
 80063ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063bc:	1813      	adds	r3, r2, r0
 80063be:	2a01      	cmp	r2, #1
 80063c0:	4681      	mov	r9, r0
 80063c2:	6123      	str	r3, [r4, #16]
 80063c4:	dc02      	bgt.n	80063cc <_printf_float+0x150>
 80063c6:	6822      	ldr	r2, [r4, #0]
 80063c8:	07d2      	lsls	r2, r2, #31
 80063ca:	d501      	bpl.n	80063d0 <_printf_float+0x154>
 80063cc:	3301      	adds	r3, #1
 80063ce:	6123      	str	r3, [r4, #16]
 80063d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0a2      	beq.n	800631e <_printf_float+0xa2>
 80063d8:	232d      	movs	r3, #45	@ 0x2d
 80063da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063de:	e79e      	b.n	800631e <_printf_float+0xa2>
 80063e0:	9a06      	ldr	r2, [sp, #24]
 80063e2:	2a47      	cmp	r2, #71	@ 0x47
 80063e4:	d1c2      	bne.n	800636c <_printf_float+0xf0>
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1c0      	bne.n	800636c <_printf_float+0xf0>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e7bd      	b.n	800636a <_printf_float+0xee>
 80063ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80063f2:	d9db      	bls.n	80063ac <_printf_float+0x130>
 80063f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80063f8:	d118      	bne.n	800642c <_printf_float+0x1b0>
 80063fa:	2900      	cmp	r1, #0
 80063fc:	6863      	ldr	r3, [r4, #4]
 80063fe:	dd0b      	ble.n	8006418 <_printf_float+0x19c>
 8006400:	6121      	str	r1, [r4, #16]
 8006402:	b913      	cbnz	r3, 800640a <_printf_float+0x18e>
 8006404:	6822      	ldr	r2, [r4, #0]
 8006406:	07d0      	lsls	r0, r2, #31
 8006408:	d502      	bpl.n	8006410 <_printf_float+0x194>
 800640a:	3301      	adds	r3, #1
 800640c:	440b      	add	r3, r1
 800640e:	6123      	str	r3, [r4, #16]
 8006410:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006412:	f04f 0900 	mov.w	r9, #0
 8006416:	e7db      	b.n	80063d0 <_printf_float+0x154>
 8006418:	b913      	cbnz	r3, 8006420 <_printf_float+0x1a4>
 800641a:	6822      	ldr	r2, [r4, #0]
 800641c:	07d2      	lsls	r2, r2, #31
 800641e:	d501      	bpl.n	8006424 <_printf_float+0x1a8>
 8006420:	3302      	adds	r3, #2
 8006422:	e7f4      	b.n	800640e <_printf_float+0x192>
 8006424:	2301      	movs	r3, #1
 8006426:	e7f2      	b.n	800640e <_printf_float+0x192>
 8006428:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800642c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800642e:	4299      	cmp	r1, r3
 8006430:	db05      	blt.n	800643e <_printf_float+0x1c2>
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	6121      	str	r1, [r4, #16]
 8006436:	07d8      	lsls	r0, r3, #31
 8006438:	d5ea      	bpl.n	8006410 <_printf_float+0x194>
 800643a:	1c4b      	adds	r3, r1, #1
 800643c:	e7e7      	b.n	800640e <_printf_float+0x192>
 800643e:	2900      	cmp	r1, #0
 8006440:	bfd4      	ite	le
 8006442:	f1c1 0202 	rsble	r2, r1, #2
 8006446:	2201      	movgt	r2, #1
 8006448:	4413      	add	r3, r2
 800644a:	e7e0      	b.n	800640e <_printf_float+0x192>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	055a      	lsls	r2, r3, #21
 8006450:	d407      	bmi.n	8006462 <_printf_float+0x1e6>
 8006452:	6923      	ldr	r3, [r4, #16]
 8006454:	4642      	mov	r2, r8
 8006456:	4631      	mov	r1, r6
 8006458:	4628      	mov	r0, r5
 800645a:	47b8      	blx	r7
 800645c:	3001      	adds	r0, #1
 800645e:	d12b      	bne.n	80064b8 <_printf_float+0x23c>
 8006460:	e767      	b.n	8006332 <_printf_float+0xb6>
 8006462:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006466:	f240 80dd 	bls.w	8006624 <_printf_float+0x3a8>
 800646a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800646e:	2200      	movs	r2, #0
 8006470:	2300      	movs	r3, #0
 8006472:	f7fa fb49 	bl	8000b08 <__aeabi_dcmpeq>
 8006476:	2800      	cmp	r0, #0
 8006478:	d033      	beq.n	80064e2 <_printf_float+0x266>
 800647a:	4a37      	ldr	r2, [pc, #220]	@ (8006558 <_printf_float+0x2dc>)
 800647c:	2301      	movs	r3, #1
 800647e:	4631      	mov	r1, r6
 8006480:	4628      	mov	r0, r5
 8006482:	47b8      	blx	r7
 8006484:	3001      	adds	r0, #1
 8006486:	f43f af54 	beq.w	8006332 <_printf_float+0xb6>
 800648a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800648e:	4543      	cmp	r3, r8
 8006490:	db02      	blt.n	8006498 <_printf_float+0x21c>
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	07d8      	lsls	r0, r3, #31
 8006496:	d50f      	bpl.n	80064b8 <_printf_float+0x23c>
 8006498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800649c:	4631      	mov	r1, r6
 800649e:	4628      	mov	r0, r5
 80064a0:	47b8      	blx	r7
 80064a2:	3001      	adds	r0, #1
 80064a4:	f43f af45 	beq.w	8006332 <_printf_float+0xb6>
 80064a8:	f04f 0900 	mov.w	r9, #0
 80064ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80064b0:	f104 0a1a 	add.w	sl, r4, #26
 80064b4:	45c8      	cmp	r8, r9
 80064b6:	dc09      	bgt.n	80064cc <_printf_float+0x250>
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	079b      	lsls	r3, r3, #30
 80064bc:	f100 8103 	bmi.w	80066c6 <_printf_float+0x44a>
 80064c0:	68e0      	ldr	r0, [r4, #12]
 80064c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064c4:	4298      	cmp	r0, r3
 80064c6:	bfb8      	it	lt
 80064c8:	4618      	movlt	r0, r3
 80064ca:	e734      	b.n	8006336 <_printf_float+0xba>
 80064cc:	2301      	movs	r3, #1
 80064ce:	4652      	mov	r2, sl
 80064d0:	4631      	mov	r1, r6
 80064d2:	4628      	mov	r0, r5
 80064d4:	47b8      	blx	r7
 80064d6:	3001      	adds	r0, #1
 80064d8:	f43f af2b 	beq.w	8006332 <_printf_float+0xb6>
 80064dc:	f109 0901 	add.w	r9, r9, #1
 80064e0:	e7e8      	b.n	80064b4 <_printf_float+0x238>
 80064e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	dc39      	bgt.n	800655c <_printf_float+0x2e0>
 80064e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006558 <_printf_float+0x2dc>)
 80064ea:	2301      	movs	r3, #1
 80064ec:	4631      	mov	r1, r6
 80064ee:	4628      	mov	r0, r5
 80064f0:	47b8      	blx	r7
 80064f2:	3001      	adds	r0, #1
 80064f4:	f43f af1d 	beq.w	8006332 <_printf_float+0xb6>
 80064f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80064fc:	ea59 0303 	orrs.w	r3, r9, r3
 8006500:	d102      	bne.n	8006508 <_printf_float+0x28c>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	07d9      	lsls	r1, r3, #31
 8006506:	d5d7      	bpl.n	80064b8 <_printf_float+0x23c>
 8006508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800650c:	4631      	mov	r1, r6
 800650e:	4628      	mov	r0, r5
 8006510:	47b8      	blx	r7
 8006512:	3001      	adds	r0, #1
 8006514:	f43f af0d 	beq.w	8006332 <_printf_float+0xb6>
 8006518:	f04f 0a00 	mov.w	sl, #0
 800651c:	f104 0b1a 	add.w	fp, r4, #26
 8006520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006522:	425b      	negs	r3, r3
 8006524:	4553      	cmp	r3, sl
 8006526:	dc01      	bgt.n	800652c <_printf_float+0x2b0>
 8006528:	464b      	mov	r3, r9
 800652a:	e793      	b.n	8006454 <_printf_float+0x1d8>
 800652c:	2301      	movs	r3, #1
 800652e:	465a      	mov	r2, fp
 8006530:	4631      	mov	r1, r6
 8006532:	4628      	mov	r0, r5
 8006534:	47b8      	blx	r7
 8006536:	3001      	adds	r0, #1
 8006538:	f43f aefb 	beq.w	8006332 <_printf_float+0xb6>
 800653c:	f10a 0a01 	add.w	sl, sl, #1
 8006540:	e7ee      	b.n	8006520 <_printf_float+0x2a4>
 8006542:	bf00      	nop
 8006544:	7fefffff 	.word	0x7fefffff
 8006548:	08008e18 	.word	0x08008e18
 800654c:	08008e1c 	.word	0x08008e1c
 8006550:	08008e20 	.word	0x08008e20
 8006554:	08008e24 	.word	0x08008e24
 8006558:	08008e28 	.word	0x08008e28
 800655c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800655e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006562:	4553      	cmp	r3, sl
 8006564:	bfa8      	it	ge
 8006566:	4653      	movge	r3, sl
 8006568:	2b00      	cmp	r3, #0
 800656a:	4699      	mov	r9, r3
 800656c:	dc36      	bgt.n	80065dc <_printf_float+0x360>
 800656e:	f04f 0b00 	mov.w	fp, #0
 8006572:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006576:	f104 021a 	add.w	r2, r4, #26
 800657a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800657c:	9306      	str	r3, [sp, #24]
 800657e:	eba3 0309 	sub.w	r3, r3, r9
 8006582:	455b      	cmp	r3, fp
 8006584:	dc31      	bgt.n	80065ea <_printf_float+0x36e>
 8006586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006588:	459a      	cmp	sl, r3
 800658a:	dc3a      	bgt.n	8006602 <_printf_float+0x386>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	07da      	lsls	r2, r3, #31
 8006590:	d437      	bmi.n	8006602 <_printf_float+0x386>
 8006592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006594:	ebaa 0903 	sub.w	r9, sl, r3
 8006598:	9b06      	ldr	r3, [sp, #24]
 800659a:	ebaa 0303 	sub.w	r3, sl, r3
 800659e:	4599      	cmp	r9, r3
 80065a0:	bfa8      	it	ge
 80065a2:	4699      	movge	r9, r3
 80065a4:	f1b9 0f00 	cmp.w	r9, #0
 80065a8:	dc33      	bgt.n	8006612 <_printf_float+0x396>
 80065aa:	f04f 0800 	mov.w	r8, #0
 80065ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065b2:	f104 0b1a 	add.w	fp, r4, #26
 80065b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065b8:	ebaa 0303 	sub.w	r3, sl, r3
 80065bc:	eba3 0309 	sub.w	r3, r3, r9
 80065c0:	4543      	cmp	r3, r8
 80065c2:	f77f af79 	ble.w	80064b8 <_printf_float+0x23c>
 80065c6:	2301      	movs	r3, #1
 80065c8:	465a      	mov	r2, fp
 80065ca:	4631      	mov	r1, r6
 80065cc:	4628      	mov	r0, r5
 80065ce:	47b8      	blx	r7
 80065d0:	3001      	adds	r0, #1
 80065d2:	f43f aeae 	beq.w	8006332 <_printf_float+0xb6>
 80065d6:	f108 0801 	add.w	r8, r8, #1
 80065da:	e7ec      	b.n	80065b6 <_printf_float+0x33a>
 80065dc:	4642      	mov	r2, r8
 80065de:	4631      	mov	r1, r6
 80065e0:	4628      	mov	r0, r5
 80065e2:	47b8      	blx	r7
 80065e4:	3001      	adds	r0, #1
 80065e6:	d1c2      	bne.n	800656e <_printf_float+0x2f2>
 80065e8:	e6a3      	b.n	8006332 <_printf_float+0xb6>
 80065ea:	2301      	movs	r3, #1
 80065ec:	4631      	mov	r1, r6
 80065ee:	4628      	mov	r0, r5
 80065f0:	9206      	str	r2, [sp, #24]
 80065f2:	47b8      	blx	r7
 80065f4:	3001      	adds	r0, #1
 80065f6:	f43f ae9c 	beq.w	8006332 <_printf_float+0xb6>
 80065fa:	9a06      	ldr	r2, [sp, #24]
 80065fc:	f10b 0b01 	add.w	fp, fp, #1
 8006600:	e7bb      	b.n	800657a <_printf_float+0x2fe>
 8006602:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006606:	4631      	mov	r1, r6
 8006608:	4628      	mov	r0, r5
 800660a:	47b8      	blx	r7
 800660c:	3001      	adds	r0, #1
 800660e:	d1c0      	bne.n	8006592 <_printf_float+0x316>
 8006610:	e68f      	b.n	8006332 <_printf_float+0xb6>
 8006612:	9a06      	ldr	r2, [sp, #24]
 8006614:	464b      	mov	r3, r9
 8006616:	4442      	add	r2, r8
 8006618:	4631      	mov	r1, r6
 800661a:	4628      	mov	r0, r5
 800661c:	47b8      	blx	r7
 800661e:	3001      	adds	r0, #1
 8006620:	d1c3      	bne.n	80065aa <_printf_float+0x32e>
 8006622:	e686      	b.n	8006332 <_printf_float+0xb6>
 8006624:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006628:	f1ba 0f01 	cmp.w	sl, #1
 800662c:	dc01      	bgt.n	8006632 <_printf_float+0x3b6>
 800662e:	07db      	lsls	r3, r3, #31
 8006630:	d536      	bpl.n	80066a0 <_printf_float+0x424>
 8006632:	2301      	movs	r3, #1
 8006634:	4642      	mov	r2, r8
 8006636:	4631      	mov	r1, r6
 8006638:	4628      	mov	r0, r5
 800663a:	47b8      	blx	r7
 800663c:	3001      	adds	r0, #1
 800663e:	f43f ae78 	beq.w	8006332 <_printf_float+0xb6>
 8006642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006646:	4631      	mov	r1, r6
 8006648:	4628      	mov	r0, r5
 800664a:	47b8      	blx	r7
 800664c:	3001      	adds	r0, #1
 800664e:	f43f ae70 	beq.w	8006332 <_printf_float+0xb6>
 8006652:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006656:	2200      	movs	r2, #0
 8006658:	2300      	movs	r3, #0
 800665a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800665e:	f7fa fa53 	bl	8000b08 <__aeabi_dcmpeq>
 8006662:	b9c0      	cbnz	r0, 8006696 <_printf_float+0x41a>
 8006664:	4653      	mov	r3, sl
 8006666:	f108 0201 	add.w	r2, r8, #1
 800666a:	4631      	mov	r1, r6
 800666c:	4628      	mov	r0, r5
 800666e:	47b8      	blx	r7
 8006670:	3001      	adds	r0, #1
 8006672:	d10c      	bne.n	800668e <_printf_float+0x412>
 8006674:	e65d      	b.n	8006332 <_printf_float+0xb6>
 8006676:	2301      	movs	r3, #1
 8006678:	465a      	mov	r2, fp
 800667a:	4631      	mov	r1, r6
 800667c:	4628      	mov	r0, r5
 800667e:	47b8      	blx	r7
 8006680:	3001      	adds	r0, #1
 8006682:	f43f ae56 	beq.w	8006332 <_printf_float+0xb6>
 8006686:	f108 0801 	add.w	r8, r8, #1
 800668a:	45d0      	cmp	r8, sl
 800668c:	dbf3      	blt.n	8006676 <_printf_float+0x3fa>
 800668e:	464b      	mov	r3, r9
 8006690:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006694:	e6df      	b.n	8006456 <_printf_float+0x1da>
 8006696:	f04f 0800 	mov.w	r8, #0
 800669a:	f104 0b1a 	add.w	fp, r4, #26
 800669e:	e7f4      	b.n	800668a <_printf_float+0x40e>
 80066a0:	2301      	movs	r3, #1
 80066a2:	4642      	mov	r2, r8
 80066a4:	e7e1      	b.n	800666a <_printf_float+0x3ee>
 80066a6:	2301      	movs	r3, #1
 80066a8:	464a      	mov	r2, r9
 80066aa:	4631      	mov	r1, r6
 80066ac:	4628      	mov	r0, r5
 80066ae:	47b8      	blx	r7
 80066b0:	3001      	adds	r0, #1
 80066b2:	f43f ae3e 	beq.w	8006332 <_printf_float+0xb6>
 80066b6:	f108 0801 	add.w	r8, r8, #1
 80066ba:	68e3      	ldr	r3, [r4, #12]
 80066bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066be:	1a5b      	subs	r3, r3, r1
 80066c0:	4543      	cmp	r3, r8
 80066c2:	dcf0      	bgt.n	80066a6 <_printf_float+0x42a>
 80066c4:	e6fc      	b.n	80064c0 <_printf_float+0x244>
 80066c6:	f04f 0800 	mov.w	r8, #0
 80066ca:	f104 0919 	add.w	r9, r4, #25
 80066ce:	e7f4      	b.n	80066ba <_printf_float+0x43e>

080066d0 <_printf_common>:
 80066d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066d4:	4616      	mov	r6, r2
 80066d6:	4698      	mov	r8, r3
 80066d8:	688a      	ldr	r2, [r1, #8]
 80066da:	690b      	ldr	r3, [r1, #16]
 80066dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066e0:	4293      	cmp	r3, r2
 80066e2:	bfb8      	it	lt
 80066e4:	4613      	movlt	r3, r2
 80066e6:	6033      	str	r3, [r6, #0]
 80066e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066ec:	4607      	mov	r7, r0
 80066ee:	460c      	mov	r4, r1
 80066f0:	b10a      	cbz	r2, 80066f6 <_printf_common+0x26>
 80066f2:	3301      	adds	r3, #1
 80066f4:	6033      	str	r3, [r6, #0]
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	0699      	lsls	r1, r3, #26
 80066fa:	bf42      	ittt	mi
 80066fc:	6833      	ldrmi	r3, [r6, #0]
 80066fe:	3302      	addmi	r3, #2
 8006700:	6033      	strmi	r3, [r6, #0]
 8006702:	6825      	ldr	r5, [r4, #0]
 8006704:	f015 0506 	ands.w	r5, r5, #6
 8006708:	d106      	bne.n	8006718 <_printf_common+0x48>
 800670a:	f104 0a19 	add.w	sl, r4, #25
 800670e:	68e3      	ldr	r3, [r4, #12]
 8006710:	6832      	ldr	r2, [r6, #0]
 8006712:	1a9b      	subs	r3, r3, r2
 8006714:	42ab      	cmp	r3, r5
 8006716:	dc26      	bgt.n	8006766 <_printf_common+0x96>
 8006718:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800671c:	6822      	ldr	r2, [r4, #0]
 800671e:	3b00      	subs	r3, #0
 8006720:	bf18      	it	ne
 8006722:	2301      	movne	r3, #1
 8006724:	0692      	lsls	r2, r2, #26
 8006726:	d42b      	bmi.n	8006780 <_printf_common+0xb0>
 8006728:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800672c:	4641      	mov	r1, r8
 800672e:	4638      	mov	r0, r7
 8006730:	47c8      	blx	r9
 8006732:	3001      	adds	r0, #1
 8006734:	d01e      	beq.n	8006774 <_printf_common+0xa4>
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	6922      	ldr	r2, [r4, #16]
 800673a:	f003 0306 	and.w	r3, r3, #6
 800673e:	2b04      	cmp	r3, #4
 8006740:	bf02      	ittt	eq
 8006742:	68e5      	ldreq	r5, [r4, #12]
 8006744:	6833      	ldreq	r3, [r6, #0]
 8006746:	1aed      	subeq	r5, r5, r3
 8006748:	68a3      	ldr	r3, [r4, #8]
 800674a:	bf0c      	ite	eq
 800674c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006750:	2500      	movne	r5, #0
 8006752:	4293      	cmp	r3, r2
 8006754:	bfc4      	itt	gt
 8006756:	1a9b      	subgt	r3, r3, r2
 8006758:	18ed      	addgt	r5, r5, r3
 800675a:	2600      	movs	r6, #0
 800675c:	341a      	adds	r4, #26
 800675e:	42b5      	cmp	r5, r6
 8006760:	d11a      	bne.n	8006798 <_printf_common+0xc8>
 8006762:	2000      	movs	r0, #0
 8006764:	e008      	b.n	8006778 <_printf_common+0xa8>
 8006766:	2301      	movs	r3, #1
 8006768:	4652      	mov	r2, sl
 800676a:	4641      	mov	r1, r8
 800676c:	4638      	mov	r0, r7
 800676e:	47c8      	blx	r9
 8006770:	3001      	adds	r0, #1
 8006772:	d103      	bne.n	800677c <_printf_common+0xac>
 8006774:	f04f 30ff 	mov.w	r0, #4294967295
 8006778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800677c:	3501      	adds	r5, #1
 800677e:	e7c6      	b.n	800670e <_printf_common+0x3e>
 8006780:	18e1      	adds	r1, r4, r3
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	2030      	movs	r0, #48	@ 0x30
 8006786:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800678a:	4422      	add	r2, r4
 800678c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006790:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006794:	3302      	adds	r3, #2
 8006796:	e7c7      	b.n	8006728 <_printf_common+0x58>
 8006798:	2301      	movs	r3, #1
 800679a:	4622      	mov	r2, r4
 800679c:	4641      	mov	r1, r8
 800679e:	4638      	mov	r0, r7
 80067a0:	47c8      	blx	r9
 80067a2:	3001      	adds	r0, #1
 80067a4:	d0e6      	beq.n	8006774 <_printf_common+0xa4>
 80067a6:	3601      	adds	r6, #1
 80067a8:	e7d9      	b.n	800675e <_printf_common+0x8e>
	...

080067ac <_printf_i>:
 80067ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067b0:	7e0f      	ldrb	r7, [r1, #24]
 80067b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067b4:	2f78      	cmp	r7, #120	@ 0x78
 80067b6:	4691      	mov	r9, r2
 80067b8:	4680      	mov	r8, r0
 80067ba:	460c      	mov	r4, r1
 80067bc:	469a      	mov	sl, r3
 80067be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067c2:	d807      	bhi.n	80067d4 <_printf_i+0x28>
 80067c4:	2f62      	cmp	r7, #98	@ 0x62
 80067c6:	d80a      	bhi.n	80067de <_printf_i+0x32>
 80067c8:	2f00      	cmp	r7, #0
 80067ca:	f000 80d2 	beq.w	8006972 <_printf_i+0x1c6>
 80067ce:	2f58      	cmp	r7, #88	@ 0x58
 80067d0:	f000 80b9 	beq.w	8006946 <_printf_i+0x19a>
 80067d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067dc:	e03a      	b.n	8006854 <_printf_i+0xa8>
 80067de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067e2:	2b15      	cmp	r3, #21
 80067e4:	d8f6      	bhi.n	80067d4 <_printf_i+0x28>
 80067e6:	a101      	add	r1, pc, #4	@ (adr r1, 80067ec <_printf_i+0x40>)
 80067e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067ec:	08006845 	.word	0x08006845
 80067f0:	08006859 	.word	0x08006859
 80067f4:	080067d5 	.word	0x080067d5
 80067f8:	080067d5 	.word	0x080067d5
 80067fc:	080067d5 	.word	0x080067d5
 8006800:	080067d5 	.word	0x080067d5
 8006804:	08006859 	.word	0x08006859
 8006808:	080067d5 	.word	0x080067d5
 800680c:	080067d5 	.word	0x080067d5
 8006810:	080067d5 	.word	0x080067d5
 8006814:	080067d5 	.word	0x080067d5
 8006818:	08006959 	.word	0x08006959
 800681c:	08006883 	.word	0x08006883
 8006820:	08006913 	.word	0x08006913
 8006824:	080067d5 	.word	0x080067d5
 8006828:	080067d5 	.word	0x080067d5
 800682c:	0800697b 	.word	0x0800697b
 8006830:	080067d5 	.word	0x080067d5
 8006834:	08006883 	.word	0x08006883
 8006838:	080067d5 	.word	0x080067d5
 800683c:	080067d5 	.word	0x080067d5
 8006840:	0800691b 	.word	0x0800691b
 8006844:	6833      	ldr	r3, [r6, #0]
 8006846:	1d1a      	adds	r2, r3, #4
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6032      	str	r2, [r6, #0]
 800684c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006850:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006854:	2301      	movs	r3, #1
 8006856:	e09d      	b.n	8006994 <_printf_i+0x1e8>
 8006858:	6833      	ldr	r3, [r6, #0]
 800685a:	6820      	ldr	r0, [r4, #0]
 800685c:	1d19      	adds	r1, r3, #4
 800685e:	6031      	str	r1, [r6, #0]
 8006860:	0606      	lsls	r6, r0, #24
 8006862:	d501      	bpl.n	8006868 <_printf_i+0xbc>
 8006864:	681d      	ldr	r5, [r3, #0]
 8006866:	e003      	b.n	8006870 <_printf_i+0xc4>
 8006868:	0645      	lsls	r5, r0, #25
 800686a:	d5fb      	bpl.n	8006864 <_printf_i+0xb8>
 800686c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006870:	2d00      	cmp	r5, #0
 8006872:	da03      	bge.n	800687c <_printf_i+0xd0>
 8006874:	232d      	movs	r3, #45	@ 0x2d
 8006876:	426d      	negs	r5, r5
 8006878:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800687c:	4859      	ldr	r0, [pc, #356]	@ (80069e4 <_printf_i+0x238>)
 800687e:	230a      	movs	r3, #10
 8006880:	e011      	b.n	80068a6 <_printf_i+0xfa>
 8006882:	6821      	ldr	r1, [r4, #0]
 8006884:	6833      	ldr	r3, [r6, #0]
 8006886:	0608      	lsls	r0, r1, #24
 8006888:	f853 5b04 	ldr.w	r5, [r3], #4
 800688c:	d402      	bmi.n	8006894 <_printf_i+0xe8>
 800688e:	0649      	lsls	r1, r1, #25
 8006890:	bf48      	it	mi
 8006892:	b2ad      	uxthmi	r5, r5
 8006894:	2f6f      	cmp	r7, #111	@ 0x6f
 8006896:	4853      	ldr	r0, [pc, #332]	@ (80069e4 <_printf_i+0x238>)
 8006898:	6033      	str	r3, [r6, #0]
 800689a:	bf14      	ite	ne
 800689c:	230a      	movne	r3, #10
 800689e:	2308      	moveq	r3, #8
 80068a0:	2100      	movs	r1, #0
 80068a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068a6:	6866      	ldr	r6, [r4, #4]
 80068a8:	60a6      	str	r6, [r4, #8]
 80068aa:	2e00      	cmp	r6, #0
 80068ac:	bfa2      	ittt	ge
 80068ae:	6821      	ldrge	r1, [r4, #0]
 80068b0:	f021 0104 	bicge.w	r1, r1, #4
 80068b4:	6021      	strge	r1, [r4, #0]
 80068b6:	b90d      	cbnz	r5, 80068bc <_printf_i+0x110>
 80068b8:	2e00      	cmp	r6, #0
 80068ba:	d04b      	beq.n	8006954 <_printf_i+0x1a8>
 80068bc:	4616      	mov	r6, r2
 80068be:	fbb5 f1f3 	udiv	r1, r5, r3
 80068c2:	fb03 5711 	mls	r7, r3, r1, r5
 80068c6:	5dc7      	ldrb	r7, [r0, r7]
 80068c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068cc:	462f      	mov	r7, r5
 80068ce:	42bb      	cmp	r3, r7
 80068d0:	460d      	mov	r5, r1
 80068d2:	d9f4      	bls.n	80068be <_printf_i+0x112>
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	d10b      	bne.n	80068f0 <_printf_i+0x144>
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	07df      	lsls	r7, r3, #31
 80068dc:	d508      	bpl.n	80068f0 <_printf_i+0x144>
 80068de:	6923      	ldr	r3, [r4, #16]
 80068e0:	6861      	ldr	r1, [r4, #4]
 80068e2:	4299      	cmp	r1, r3
 80068e4:	bfde      	ittt	le
 80068e6:	2330      	movle	r3, #48	@ 0x30
 80068e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068f0:	1b92      	subs	r2, r2, r6
 80068f2:	6122      	str	r2, [r4, #16]
 80068f4:	f8cd a000 	str.w	sl, [sp]
 80068f8:	464b      	mov	r3, r9
 80068fa:	aa03      	add	r2, sp, #12
 80068fc:	4621      	mov	r1, r4
 80068fe:	4640      	mov	r0, r8
 8006900:	f7ff fee6 	bl	80066d0 <_printf_common>
 8006904:	3001      	adds	r0, #1
 8006906:	d14a      	bne.n	800699e <_printf_i+0x1f2>
 8006908:	f04f 30ff 	mov.w	r0, #4294967295
 800690c:	b004      	add	sp, #16
 800690e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	f043 0320 	orr.w	r3, r3, #32
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	4833      	ldr	r0, [pc, #204]	@ (80069e8 <_printf_i+0x23c>)
 800691c:	2778      	movs	r7, #120	@ 0x78
 800691e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	6831      	ldr	r1, [r6, #0]
 8006926:	061f      	lsls	r7, r3, #24
 8006928:	f851 5b04 	ldr.w	r5, [r1], #4
 800692c:	d402      	bmi.n	8006934 <_printf_i+0x188>
 800692e:	065f      	lsls	r7, r3, #25
 8006930:	bf48      	it	mi
 8006932:	b2ad      	uxthmi	r5, r5
 8006934:	6031      	str	r1, [r6, #0]
 8006936:	07d9      	lsls	r1, r3, #31
 8006938:	bf44      	itt	mi
 800693a:	f043 0320 	orrmi.w	r3, r3, #32
 800693e:	6023      	strmi	r3, [r4, #0]
 8006940:	b11d      	cbz	r5, 800694a <_printf_i+0x19e>
 8006942:	2310      	movs	r3, #16
 8006944:	e7ac      	b.n	80068a0 <_printf_i+0xf4>
 8006946:	4827      	ldr	r0, [pc, #156]	@ (80069e4 <_printf_i+0x238>)
 8006948:	e7e9      	b.n	800691e <_printf_i+0x172>
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	f023 0320 	bic.w	r3, r3, #32
 8006950:	6023      	str	r3, [r4, #0]
 8006952:	e7f6      	b.n	8006942 <_printf_i+0x196>
 8006954:	4616      	mov	r6, r2
 8006956:	e7bd      	b.n	80068d4 <_printf_i+0x128>
 8006958:	6833      	ldr	r3, [r6, #0]
 800695a:	6825      	ldr	r5, [r4, #0]
 800695c:	6961      	ldr	r1, [r4, #20]
 800695e:	1d18      	adds	r0, r3, #4
 8006960:	6030      	str	r0, [r6, #0]
 8006962:	062e      	lsls	r6, r5, #24
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	d501      	bpl.n	800696c <_printf_i+0x1c0>
 8006968:	6019      	str	r1, [r3, #0]
 800696a:	e002      	b.n	8006972 <_printf_i+0x1c6>
 800696c:	0668      	lsls	r0, r5, #25
 800696e:	d5fb      	bpl.n	8006968 <_printf_i+0x1bc>
 8006970:	8019      	strh	r1, [r3, #0]
 8006972:	2300      	movs	r3, #0
 8006974:	6123      	str	r3, [r4, #16]
 8006976:	4616      	mov	r6, r2
 8006978:	e7bc      	b.n	80068f4 <_printf_i+0x148>
 800697a:	6833      	ldr	r3, [r6, #0]
 800697c:	1d1a      	adds	r2, r3, #4
 800697e:	6032      	str	r2, [r6, #0]
 8006980:	681e      	ldr	r6, [r3, #0]
 8006982:	6862      	ldr	r2, [r4, #4]
 8006984:	2100      	movs	r1, #0
 8006986:	4630      	mov	r0, r6
 8006988:	f7f9 fc42 	bl	8000210 <memchr>
 800698c:	b108      	cbz	r0, 8006992 <_printf_i+0x1e6>
 800698e:	1b80      	subs	r0, r0, r6
 8006990:	6060      	str	r0, [r4, #4]
 8006992:	6863      	ldr	r3, [r4, #4]
 8006994:	6123      	str	r3, [r4, #16]
 8006996:	2300      	movs	r3, #0
 8006998:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800699c:	e7aa      	b.n	80068f4 <_printf_i+0x148>
 800699e:	6923      	ldr	r3, [r4, #16]
 80069a0:	4632      	mov	r2, r6
 80069a2:	4649      	mov	r1, r9
 80069a4:	4640      	mov	r0, r8
 80069a6:	47d0      	blx	sl
 80069a8:	3001      	adds	r0, #1
 80069aa:	d0ad      	beq.n	8006908 <_printf_i+0x15c>
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	079b      	lsls	r3, r3, #30
 80069b0:	d413      	bmi.n	80069da <_printf_i+0x22e>
 80069b2:	68e0      	ldr	r0, [r4, #12]
 80069b4:	9b03      	ldr	r3, [sp, #12]
 80069b6:	4298      	cmp	r0, r3
 80069b8:	bfb8      	it	lt
 80069ba:	4618      	movlt	r0, r3
 80069bc:	e7a6      	b.n	800690c <_printf_i+0x160>
 80069be:	2301      	movs	r3, #1
 80069c0:	4632      	mov	r2, r6
 80069c2:	4649      	mov	r1, r9
 80069c4:	4640      	mov	r0, r8
 80069c6:	47d0      	blx	sl
 80069c8:	3001      	adds	r0, #1
 80069ca:	d09d      	beq.n	8006908 <_printf_i+0x15c>
 80069cc:	3501      	adds	r5, #1
 80069ce:	68e3      	ldr	r3, [r4, #12]
 80069d0:	9903      	ldr	r1, [sp, #12]
 80069d2:	1a5b      	subs	r3, r3, r1
 80069d4:	42ab      	cmp	r3, r5
 80069d6:	dcf2      	bgt.n	80069be <_printf_i+0x212>
 80069d8:	e7eb      	b.n	80069b2 <_printf_i+0x206>
 80069da:	2500      	movs	r5, #0
 80069dc:	f104 0619 	add.w	r6, r4, #25
 80069e0:	e7f5      	b.n	80069ce <_printf_i+0x222>
 80069e2:	bf00      	nop
 80069e4:	08008e2a 	.word	0x08008e2a
 80069e8:	08008e3b 	.word	0x08008e3b

080069ec <std>:
 80069ec:	2300      	movs	r3, #0
 80069ee:	b510      	push	{r4, lr}
 80069f0:	4604      	mov	r4, r0
 80069f2:	e9c0 3300 	strd	r3, r3, [r0]
 80069f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069fa:	6083      	str	r3, [r0, #8]
 80069fc:	8181      	strh	r1, [r0, #12]
 80069fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a00:	81c2      	strh	r2, [r0, #14]
 8006a02:	6183      	str	r3, [r0, #24]
 8006a04:	4619      	mov	r1, r3
 8006a06:	2208      	movs	r2, #8
 8006a08:	305c      	adds	r0, #92	@ 0x5c
 8006a0a:	f000 f914 	bl	8006c36 <memset>
 8006a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a44 <std+0x58>)
 8006a10:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a12:	4b0d      	ldr	r3, [pc, #52]	@ (8006a48 <std+0x5c>)
 8006a14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a16:	4b0d      	ldr	r3, [pc, #52]	@ (8006a4c <std+0x60>)
 8006a18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a50 <std+0x64>)
 8006a1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a54 <std+0x68>)
 8006a20:	6224      	str	r4, [r4, #32]
 8006a22:	429c      	cmp	r4, r3
 8006a24:	d006      	beq.n	8006a34 <std+0x48>
 8006a26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a2a:	4294      	cmp	r4, r2
 8006a2c:	d002      	beq.n	8006a34 <std+0x48>
 8006a2e:	33d0      	adds	r3, #208	@ 0xd0
 8006a30:	429c      	cmp	r4, r3
 8006a32:	d105      	bne.n	8006a40 <std+0x54>
 8006a34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a3c:	f000 b978 	b.w	8006d30 <__retarget_lock_init_recursive>
 8006a40:	bd10      	pop	{r4, pc}
 8006a42:	bf00      	nop
 8006a44:	08006bb1 	.word	0x08006bb1
 8006a48:	08006bd3 	.word	0x08006bd3
 8006a4c:	08006c0b 	.word	0x08006c0b
 8006a50:	08006c2f 	.word	0x08006c2f
 8006a54:	20000294 	.word	0x20000294

08006a58 <stdio_exit_handler>:
 8006a58:	4a02      	ldr	r2, [pc, #8]	@ (8006a64 <stdio_exit_handler+0xc>)
 8006a5a:	4903      	ldr	r1, [pc, #12]	@ (8006a68 <stdio_exit_handler+0x10>)
 8006a5c:	4803      	ldr	r0, [pc, #12]	@ (8006a6c <stdio_exit_handler+0x14>)
 8006a5e:	f000 b869 	b.w	8006b34 <_fwalk_sglue>
 8006a62:	bf00      	nop
 8006a64:	2000000c 	.word	0x2000000c
 8006a68:	0800868d 	.word	0x0800868d
 8006a6c:	2000001c 	.word	0x2000001c

08006a70 <cleanup_stdio>:
 8006a70:	6841      	ldr	r1, [r0, #4]
 8006a72:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa4 <cleanup_stdio+0x34>)
 8006a74:	4299      	cmp	r1, r3
 8006a76:	b510      	push	{r4, lr}
 8006a78:	4604      	mov	r4, r0
 8006a7a:	d001      	beq.n	8006a80 <cleanup_stdio+0x10>
 8006a7c:	f001 fe06 	bl	800868c <_fflush_r>
 8006a80:	68a1      	ldr	r1, [r4, #8]
 8006a82:	4b09      	ldr	r3, [pc, #36]	@ (8006aa8 <cleanup_stdio+0x38>)
 8006a84:	4299      	cmp	r1, r3
 8006a86:	d002      	beq.n	8006a8e <cleanup_stdio+0x1e>
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f001 fdff 	bl	800868c <_fflush_r>
 8006a8e:	68e1      	ldr	r1, [r4, #12]
 8006a90:	4b06      	ldr	r3, [pc, #24]	@ (8006aac <cleanup_stdio+0x3c>)
 8006a92:	4299      	cmp	r1, r3
 8006a94:	d004      	beq.n	8006aa0 <cleanup_stdio+0x30>
 8006a96:	4620      	mov	r0, r4
 8006a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a9c:	f001 bdf6 	b.w	800868c <_fflush_r>
 8006aa0:	bd10      	pop	{r4, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20000294 	.word	0x20000294
 8006aa8:	200002fc 	.word	0x200002fc
 8006aac:	20000364 	.word	0x20000364

08006ab0 <global_stdio_init.part.0>:
 8006ab0:	b510      	push	{r4, lr}
 8006ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae0 <global_stdio_init.part.0+0x30>)
 8006ab4:	4c0b      	ldr	r4, [pc, #44]	@ (8006ae4 <global_stdio_init.part.0+0x34>)
 8006ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8006ae8 <global_stdio_init.part.0+0x38>)
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	4620      	mov	r0, r4
 8006abc:	2200      	movs	r2, #0
 8006abe:	2104      	movs	r1, #4
 8006ac0:	f7ff ff94 	bl	80069ec <std>
 8006ac4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ac8:	2201      	movs	r2, #1
 8006aca:	2109      	movs	r1, #9
 8006acc:	f7ff ff8e 	bl	80069ec <std>
 8006ad0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ada:	2112      	movs	r1, #18
 8006adc:	f7ff bf86 	b.w	80069ec <std>
 8006ae0:	200003cc 	.word	0x200003cc
 8006ae4:	20000294 	.word	0x20000294
 8006ae8:	08006a59 	.word	0x08006a59

08006aec <__sfp_lock_acquire>:
 8006aec:	4801      	ldr	r0, [pc, #4]	@ (8006af4 <__sfp_lock_acquire+0x8>)
 8006aee:	f000 b920 	b.w	8006d32 <__retarget_lock_acquire_recursive>
 8006af2:	bf00      	nop
 8006af4:	200003d5 	.word	0x200003d5

08006af8 <__sfp_lock_release>:
 8006af8:	4801      	ldr	r0, [pc, #4]	@ (8006b00 <__sfp_lock_release+0x8>)
 8006afa:	f000 b91b 	b.w	8006d34 <__retarget_lock_release_recursive>
 8006afe:	bf00      	nop
 8006b00:	200003d5 	.word	0x200003d5

08006b04 <__sinit>:
 8006b04:	b510      	push	{r4, lr}
 8006b06:	4604      	mov	r4, r0
 8006b08:	f7ff fff0 	bl	8006aec <__sfp_lock_acquire>
 8006b0c:	6a23      	ldr	r3, [r4, #32]
 8006b0e:	b11b      	cbz	r3, 8006b18 <__sinit+0x14>
 8006b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b14:	f7ff bff0 	b.w	8006af8 <__sfp_lock_release>
 8006b18:	4b04      	ldr	r3, [pc, #16]	@ (8006b2c <__sinit+0x28>)
 8006b1a:	6223      	str	r3, [r4, #32]
 8006b1c:	4b04      	ldr	r3, [pc, #16]	@ (8006b30 <__sinit+0x2c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1f5      	bne.n	8006b10 <__sinit+0xc>
 8006b24:	f7ff ffc4 	bl	8006ab0 <global_stdio_init.part.0>
 8006b28:	e7f2      	b.n	8006b10 <__sinit+0xc>
 8006b2a:	bf00      	nop
 8006b2c:	08006a71 	.word	0x08006a71
 8006b30:	200003cc 	.word	0x200003cc

08006b34 <_fwalk_sglue>:
 8006b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b38:	4607      	mov	r7, r0
 8006b3a:	4688      	mov	r8, r1
 8006b3c:	4614      	mov	r4, r2
 8006b3e:	2600      	movs	r6, #0
 8006b40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b44:	f1b9 0901 	subs.w	r9, r9, #1
 8006b48:	d505      	bpl.n	8006b56 <_fwalk_sglue+0x22>
 8006b4a:	6824      	ldr	r4, [r4, #0]
 8006b4c:	2c00      	cmp	r4, #0
 8006b4e:	d1f7      	bne.n	8006b40 <_fwalk_sglue+0xc>
 8006b50:	4630      	mov	r0, r6
 8006b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b56:	89ab      	ldrh	r3, [r5, #12]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d907      	bls.n	8006b6c <_fwalk_sglue+0x38>
 8006b5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b60:	3301      	adds	r3, #1
 8006b62:	d003      	beq.n	8006b6c <_fwalk_sglue+0x38>
 8006b64:	4629      	mov	r1, r5
 8006b66:	4638      	mov	r0, r7
 8006b68:	47c0      	blx	r8
 8006b6a:	4306      	orrs	r6, r0
 8006b6c:	3568      	adds	r5, #104	@ 0x68
 8006b6e:	e7e9      	b.n	8006b44 <_fwalk_sglue+0x10>

08006b70 <siprintf>:
 8006b70:	b40e      	push	{r1, r2, r3}
 8006b72:	b500      	push	{lr}
 8006b74:	b09c      	sub	sp, #112	@ 0x70
 8006b76:	ab1d      	add	r3, sp, #116	@ 0x74
 8006b78:	9002      	str	r0, [sp, #8]
 8006b7a:	9006      	str	r0, [sp, #24]
 8006b7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b80:	4809      	ldr	r0, [pc, #36]	@ (8006ba8 <siprintf+0x38>)
 8006b82:	9107      	str	r1, [sp, #28]
 8006b84:	9104      	str	r1, [sp, #16]
 8006b86:	4909      	ldr	r1, [pc, #36]	@ (8006bac <siprintf+0x3c>)
 8006b88:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b8c:	9105      	str	r1, [sp, #20]
 8006b8e:	6800      	ldr	r0, [r0, #0]
 8006b90:	9301      	str	r3, [sp, #4]
 8006b92:	a902      	add	r1, sp, #8
 8006b94:	f001 fbfa 	bl	800838c <_svfiprintf_r>
 8006b98:	9b02      	ldr	r3, [sp, #8]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	701a      	strb	r2, [r3, #0]
 8006b9e:	b01c      	add	sp, #112	@ 0x70
 8006ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ba4:	b003      	add	sp, #12
 8006ba6:	4770      	bx	lr
 8006ba8:	20000018 	.word	0x20000018
 8006bac:	ffff0208 	.word	0xffff0208

08006bb0 <__sread>:
 8006bb0:	b510      	push	{r4, lr}
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb8:	f000 f86c 	bl	8006c94 <_read_r>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	bfab      	itete	ge
 8006bc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8006bc4:	181b      	addge	r3, r3, r0
 8006bc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006bca:	bfac      	ite	ge
 8006bcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006bce:	81a3      	strhlt	r3, [r4, #12]
 8006bd0:	bd10      	pop	{r4, pc}

08006bd2 <__swrite>:
 8006bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd6:	461f      	mov	r7, r3
 8006bd8:	898b      	ldrh	r3, [r1, #12]
 8006bda:	05db      	lsls	r3, r3, #23
 8006bdc:	4605      	mov	r5, r0
 8006bde:	460c      	mov	r4, r1
 8006be0:	4616      	mov	r6, r2
 8006be2:	d505      	bpl.n	8006bf0 <__swrite+0x1e>
 8006be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be8:	2302      	movs	r3, #2
 8006bea:	2200      	movs	r2, #0
 8006bec:	f000 f840 	bl	8006c70 <_lseek_r>
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bfa:	81a3      	strh	r3, [r4, #12]
 8006bfc:	4632      	mov	r2, r6
 8006bfe:	463b      	mov	r3, r7
 8006c00:	4628      	mov	r0, r5
 8006c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c06:	f000 b857 	b.w	8006cb8 <_write_r>

08006c0a <__sseek>:
 8006c0a:	b510      	push	{r4, lr}
 8006c0c:	460c      	mov	r4, r1
 8006c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c12:	f000 f82d 	bl	8006c70 <_lseek_r>
 8006c16:	1c43      	adds	r3, r0, #1
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	bf15      	itete	ne
 8006c1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c26:	81a3      	strheq	r3, [r4, #12]
 8006c28:	bf18      	it	ne
 8006c2a:	81a3      	strhne	r3, [r4, #12]
 8006c2c:	bd10      	pop	{r4, pc}

08006c2e <__sclose>:
 8006c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c32:	f000 b80d 	b.w	8006c50 <_close_r>

08006c36 <memset>:
 8006c36:	4402      	add	r2, r0
 8006c38:	4603      	mov	r3, r0
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d100      	bne.n	8006c40 <memset+0xa>
 8006c3e:	4770      	bx	lr
 8006c40:	f803 1b01 	strb.w	r1, [r3], #1
 8006c44:	e7f9      	b.n	8006c3a <memset+0x4>
	...

08006c48 <_localeconv_r>:
 8006c48:	4800      	ldr	r0, [pc, #0]	@ (8006c4c <_localeconv_r+0x4>)
 8006c4a:	4770      	bx	lr
 8006c4c:	20000158 	.word	0x20000158

08006c50 <_close_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	4d06      	ldr	r5, [pc, #24]	@ (8006c6c <_close_r+0x1c>)
 8006c54:	2300      	movs	r3, #0
 8006c56:	4604      	mov	r4, r0
 8006c58:	4608      	mov	r0, r1
 8006c5a:	602b      	str	r3, [r5, #0]
 8006c5c:	f7fa fe1c 	bl	8001898 <_close>
 8006c60:	1c43      	adds	r3, r0, #1
 8006c62:	d102      	bne.n	8006c6a <_close_r+0x1a>
 8006c64:	682b      	ldr	r3, [r5, #0]
 8006c66:	b103      	cbz	r3, 8006c6a <_close_r+0x1a>
 8006c68:	6023      	str	r3, [r4, #0]
 8006c6a:	bd38      	pop	{r3, r4, r5, pc}
 8006c6c:	200003d0 	.word	0x200003d0

08006c70 <_lseek_r>:
 8006c70:	b538      	push	{r3, r4, r5, lr}
 8006c72:	4d07      	ldr	r5, [pc, #28]	@ (8006c90 <_lseek_r+0x20>)
 8006c74:	4604      	mov	r4, r0
 8006c76:	4608      	mov	r0, r1
 8006c78:	4611      	mov	r1, r2
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	602a      	str	r2, [r5, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f7fa fe31 	bl	80018e6 <_lseek>
 8006c84:	1c43      	adds	r3, r0, #1
 8006c86:	d102      	bne.n	8006c8e <_lseek_r+0x1e>
 8006c88:	682b      	ldr	r3, [r5, #0]
 8006c8a:	b103      	cbz	r3, 8006c8e <_lseek_r+0x1e>
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	bd38      	pop	{r3, r4, r5, pc}
 8006c90:	200003d0 	.word	0x200003d0

08006c94 <_read_r>:
 8006c94:	b538      	push	{r3, r4, r5, lr}
 8006c96:	4d07      	ldr	r5, [pc, #28]	@ (8006cb4 <_read_r+0x20>)
 8006c98:	4604      	mov	r4, r0
 8006c9a:	4608      	mov	r0, r1
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	602a      	str	r2, [r5, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	f7fa fdbf 	bl	8001826 <_read>
 8006ca8:	1c43      	adds	r3, r0, #1
 8006caa:	d102      	bne.n	8006cb2 <_read_r+0x1e>
 8006cac:	682b      	ldr	r3, [r5, #0]
 8006cae:	b103      	cbz	r3, 8006cb2 <_read_r+0x1e>
 8006cb0:	6023      	str	r3, [r4, #0]
 8006cb2:	bd38      	pop	{r3, r4, r5, pc}
 8006cb4:	200003d0 	.word	0x200003d0

08006cb8 <_write_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4d07      	ldr	r5, [pc, #28]	@ (8006cd8 <_write_r+0x20>)
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	4608      	mov	r0, r1
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	602a      	str	r2, [r5, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f7fa fdca 	bl	8001860 <_write>
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	d102      	bne.n	8006cd6 <_write_r+0x1e>
 8006cd0:	682b      	ldr	r3, [r5, #0]
 8006cd2:	b103      	cbz	r3, 8006cd6 <_write_r+0x1e>
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
 8006cd8:	200003d0 	.word	0x200003d0

08006cdc <__errno>:
 8006cdc:	4b01      	ldr	r3, [pc, #4]	@ (8006ce4 <__errno+0x8>)
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	20000018 	.word	0x20000018

08006ce8 <__libc_init_array>:
 8006ce8:	b570      	push	{r4, r5, r6, lr}
 8006cea:	4d0d      	ldr	r5, [pc, #52]	@ (8006d20 <__libc_init_array+0x38>)
 8006cec:	4c0d      	ldr	r4, [pc, #52]	@ (8006d24 <__libc_init_array+0x3c>)
 8006cee:	1b64      	subs	r4, r4, r5
 8006cf0:	10a4      	asrs	r4, r4, #2
 8006cf2:	2600      	movs	r6, #0
 8006cf4:	42a6      	cmp	r6, r4
 8006cf6:	d109      	bne.n	8006d0c <__libc_init_array+0x24>
 8006cf8:	4d0b      	ldr	r5, [pc, #44]	@ (8006d28 <__libc_init_array+0x40>)
 8006cfa:	4c0c      	ldr	r4, [pc, #48]	@ (8006d2c <__libc_init_array+0x44>)
 8006cfc:	f002 f864 	bl	8008dc8 <_init>
 8006d00:	1b64      	subs	r4, r4, r5
 8006d02:	10a4      	asrs	r4, r4, #2
 8006d04:	2600      	movs	r6, #0
 8006d06:	42a6      	cmp	r6, r4
 8006d08:	d105      	bne.n	8006d16 <__libc_init_array+0x2e>
 8006d0a:	bd70      	pop	{r4, r5, r6, pc}
 8006d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d10:	4798      	blx	r3
 8006d12:	3601      	adds	r6, #1
 8006d14:	e7ee      	b.n	8006cf4 <__libc_init_array+0xc>
 8006d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d1a:	4798      	blx	r3
 8006d1c:	3601      	adds	r6, #1
 8006d1e:	e7f2      	b.n	8006d06 <__libc_init_array+0x1e>
 8006d20:	08009190 	.word	0x08009190
 8006d24:	08009190 	.word	0x08009190
 8006d28:	08009190 	.word	0x08009190
 8006d2c:	08009194 	.word	0x08009194

08006d30 <__retarget_lock_init_recursive>:
 8006d30:	4770      	bx	lr

08006d32 <__retarget_lock_acquire_recursive>:
 8006d32:	4770      	bx	lr

08006d34 <__retarget_lock_release_recursive>:
 8006d34:	4770      	bx	lr

08006d36 <quorem>:
 8006d36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3a:	6903      	ldr	r3, [r0, #16]
 8006d3c:	690c      	ldr	r4, [r1, #16]
 8006d3e:	42a3      	cmp	r3, r4
 8006d40:	4607      	mov	r7, r0
 8006d42:	db7e      	blt.n	8006e42 <quorem+0x10c>
 8006d44:	3c01      	subs	r4, #1
 8006d46:	f101 0814 	add.w	r8, r1, #20
 8006d4a:	00a3      	lsls	r3, r4, #2
 8006d4c:	f100 0514 	add.w	r5, r0, #20
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d56:	9301      	str	r3, [sp, #4]
 8006d58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d60:	3301      	adds	r3, #1
 8006d62:	429a      	cmp	r2, r3
 8006d64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d68:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d6c:	d32e      	bcc.n	8006dcc <quorem+0x96>
 8006d6e:	f04f 0a00 	mov.w	sl, #0
 8006d72:	46c4      	mov	ip, r8
 8006d74:	46ae      	mov	lr, r5
 8006d76:	46d3      	mov	fp, sl
 8006d78:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d7c:	b298      	uxth	r0, r3
 8006d7e:	fb06 a000 	mla	r0, r6, r0, sl
 8006d82:	0c02      	lsrs	r2, r0, #16
 8006d84:	0c1b      	lsrs	r3, r3, #16
 8006d86:	fb06 2303 	mla	r3, r6, r3, r2
 8006d8a:	f8de 2000 	ldr.w	r2, [lr]
 8006d8e:	b280      	uxth	r0, r0
 8006d90:	b292      	uxth	r2, r2
 8006d92:	1a12      	subs	r2, r2, r0
 8006d94:	445a      	add	r2, fp
 8006d96:	f8de 0000 	ldr.w	r0, [lr]
 8006d9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006da4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006da8:	b292      	uxth	r2, r2
 8006daa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006dae:	45e1      	cmp	r9, ip
 8006db0:	f84e 2b04 	str.w	r2, [lr], #4
 8006db4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006db8:	d2de      	bcs.n	8006d78 <quorem+0x42>
 8006dba:	9b00      	ldr	r3, [sp, #0]
 8006dbc:	58eb      	ldr	r3, [r5, r3]
 8006dbe:	b92b      	cbnz	r3, 8006dcc <quorem+0x96>
 8006dc0:	9b01      	ldr	r3, [sp, #4]
 8006dc2:	3b04      	subs	r3, #4
 8006dc4:	429d      	cmp	r5, r3
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	d32f      	bcc.n	8006e2a <quorem+0xf4>
 8006dca:	613c      	str	r4, [r7, #16]
 8006dcc:	4638      	mov	r0, r7
 8006dce:	f001 f979 	bl	80080c4 <__mcmp>
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	db25      	blt.n	8006e22 <quorem+0xec>
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	2000      	movs	r0, #0
 8006dda:	f858 2b04 	ldr.w	r2, [r8], #4
 8006dde:	f8d1 c000 	ldr.w	ip, [r1]
 8006de2:	fa1f fe82 	uxth.w	lr, r2
 8006de6:	fa1f f38c 	uxth.w	r3, ip
 8006dea:	eba3 030e 	sub.w	r3, r3, lr
 8006dee:	4403      	add	r3, r0
 8006df0:	0c12      	lsrs	r2, r2, #16
 8006df2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006df6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e00:	45c1      	cmp	r9, r8
 8006e02:	f841 3b04 	str.w	r3, [r1], #4
 8006e06:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e0a:	d2e6      	bcs.n	8006dda <quorem+0xa4>
 8006e0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e14:	b922      	cbnz	r2, 8006e20 <quorem+0xea>
 8006e16:	3b04      	subs	r3, #4
 8006e18:	429d      	cmp	r5, r3
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	d30b      	bcc.n	8006e36 <quorem+0x100>
 8006e1e:	613c      	str	r4, [r7, #16]
 8006e20:	3601      	adds	r6, #1
 8006e22:	4630      	mov	r0, r6
 8006e24:	b003      	add	sp, #12
 8006e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e2a:	6812      	ldr	r2, [r2, #0]
 8006e2c:	3b04      	subs	r3, #4
 8006e2e:	2a00      	cmp	r2, #0
 8006e30:	d1cb      	bne.n	8006dca <quorem+0x94>
 8006e32:	3c01      	subs	r4, #1
 8006e34:	e7c6      	b.n	8006dc4 <quorem+0x8e>
 8006e36:	6812      	ldr	r2, [r2, #0]
 8006e38:	3b04      	subs	r3, #4
 8006e3a:	2a00      	cmp	r2, #0
 8006e3c:	d1ef      	bne.n	8006e1e <quorem+0xe8>
 8006e3e:	3c01      	subs	r4, #1
 8006e40:	e7ea      	b.n	8006e18 <quorem+0xe2>
 8006e42:	2000      	movs	r0, #0
 8006e44:	e7ee      	b.n	8006e24 <quorem+0xee>
	...

08006e48 <_dtoa_r>:
 8006e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	69c7      	ldr	r7, [r0, #28]
 8006e4e:	b099      	sub	sp, #100	@ 0x64
 8006e50:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006e54:	ec55 4b10 	vmov	r4, r5, d0
 8006e58:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006e5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e5c:	4683      	mov	fp, r0
 8006e5e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e62:	b97f      	cbnz	r7, 8006e84 <_dtoa_r+0x3c>
 8006e64:	2010      	movs	r0, #16
 8006e66:	f000 fdfd 	bl	8007a64 <malloc>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006e70:	b920      	cbnz	r0, 8006e7c <_dtoa_r+0x34>
 8006e72:	4ba7      	ldr	r3, [pc, #668]	@ (8007110 <_dtoa_r+0x2c8>)
 8006e74:	21ef      	movs	r1, #239	@ 0xef
 8006e76:	48a7      	ldr	r0, [pc, #668]	@ (8007114 <_dtoa_r+0x2cc>)
 8006e78:	f001 fc68 	bl	800874c <__assert_func>
 8006e7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006e80:	6007      	str	r7, [r0, #0]
 8006e82:	60c7      	str	r7, [r0, #12]
 8006e84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e88:	6819      	ldr	r1, [r3, #0]
 8006e8a:	b159      	cbz	r1, 8006ea4 <_dtoa_r+0x5c>
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	604a      	str	r2, [r1, #4]
 8006e90:	2301      	movs	r3, #1
 8006e92:	4093      	lsls	r3, r2
 8006e94:	608b      	str	r3, [r1, #8]
 8006e96:	4658      	mov	r0, fp
 8006e98:	f000 feda 	bl	8007c50 <_Bfree>
 8006e9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	1e2b      	subs	r3, r5, #0
 8006ea6:	bfb9      	ittee	lt
 8006ea8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006eac:	9303      	strlt	r3, [sp, #12]
 8006eae:	2300      	movge	r3, #0
 8006eb0:	6033      	strge	r3, [r6, #0]
 8006eb2:	9f03      	ldr	r7, [sp, #12]
 8006eb4:	4b98      	ldr	r3, [pc, #608]	@ (8007118 <_dtoa_r+0x2d0>)
 8006eb6:	bfbc      	itt	lt
 8006eb8:	2201      	movlt	r2, #1
 8006eba:	6032      	strlt	r2, [r6, #0]
 8006ebc:	43bb      	bics	r3, r7
 8006ebe:	d112      	bne.n	8006ee6 <_dtoa_r+0x9e>
 8006ec0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ec2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ecc:	4323      	orrs	r3, r4
 8006ece:	f000 854d 	beq.w	800796c <_dtoa_r+0xb24>
 8006ed2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ed4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800712c <_dtoa_r+0x2e4>
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 854f 	beq.w	800797c <_dtoa_r+0xb34>
 8006ede:	f10a 0303 	add.w	r3, sl, #3
 8006ee2:	f000 bd49 	b.w	8007978 <_dtoa_r+0xb30>
 8006ee6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006eea:	2200      	movs	r2, #0
 8006eec:	ec51 0b17 	vmov	r0, r1, d7
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006ef6:	f7f9 fe07 	bl	8000b08 <__aeabi_dcmpeq>
 8006efa:	4680      	mov	r8, r0
 8006efc:	b158      	cbz	r0, 8006f16 <_dtoa_r+0xce>
 8006efe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006f00:	2301      	movs	r3, #1
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f06:	b113      	cbz	r3, 8006f0e <_dtoa_r+0xc6>
 8006f08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006f0a:	4b84      	ldr	r3, [pc, #528]	@ (800711c <_dtoa_r+0x2d4>)
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007130 <_dtoa_r+0x2e8>
 8006f12:	f000 bd33 	b.w	800797c <_dtoa_r+0xb34>
 8006f16:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006f1a:	aa16      	add	r2, sp, #88	@ 0x58
 8006f1c:	a917      	add	r1, sp, #92	@ 0x5c
 8006f1e:	4658      	mov	r0, fp
 8006f20:	f001 f980 	bl	8008224 <__d2b>
 8006f24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006f28:	4681      	mov	r9, r0
 8006f2a:	2e00      	cmp	r6, #0
 8006f2c:	d077      	beq.n	800701e <_dtoa_r+0x1d6>
 8006f2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f30:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006f48:	4619      	mov	r1, r3
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	4b74      	ldr	r3, [pc, #464]	@ (8007120 <_dtoa_r+0x2d8>)
 8006f4e:	f7f9 f9bb 	bl	80002c8 <__aeabi_dsub>
 8006f52:	a369      	add	r3, pc, #420	@ (adr r3, 80070f8 <_dtoa_r+0x2b0>)
 8006f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f58:	f7f9 fb6e 	bl	8000638 <__aeabi_dmul>
 8006f5c:	a368      	add	r3, pc, #416	@ (adr r3, 8007100 <_dtoa_r+0x2b8>)
 8006f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f62:	f7f9 f9b3 	bl	80002cc <__adddf3>
 8006f66:	4604      	mov	r4, r0
 8006f68:	4630      	mov	r0, r6
 8006f6a:	460d      	mov	r5, r1
 8006f6c:	f7f9 fafa 	bl	8000564 <__aeabi_i2d>
 8006f70:	a365      	add	r3, pc, #404	@ (adr r3, 8007108 <_dtoa_r+0x2c0>)
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	f7f9 fb5f 	bl	8000638 <__aeabi_dmul>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4620      	mov	r0, r4
 8006f80:	4629      	mov	r1, r5
 8006f82:	f7f9 f9a3 	bl	80002cc <__adddf3>
 8006f86:	4604      	mov	r4, r0
 8006f88:	460d      	mov	r5, r1
 8006f8a:	f7f9 fe05 	bl	8000b98 <__aeabi_d2iz>
 8006f8e:	2200      	movs	r2, #0
 8006f90:	4607      	mov	r7, r0
 8006f92:	2300      	movs	r3, #0
 8006f94:	4620      	mov	r0, r4
 8006f96:	4629      	mov	r1, r5
 8006f98:	f7f9 fdc0 	bl	8000b1c <__aeabi_dcmplt>
 8006f9c:	b140      	cbz	r0, 8006fb0 <_dtoa_r+0x168>
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	f7f9 fae0 	bl	8000564 <__aeabi_i2d>
 8006fa4:	4622      	mov	r2, r4
 8006fa6:	462b      	mov	r3, r5
 8006fa8:	f7f9 fdae 	bl	8000b08 <__aeabi_dcmpeq>
 8006fac:	b900      	cbnz	r0, 8006fb0 <_dtoa_r+0x168>
 8006fae:	3f01      	subs	r7, #1
 8006fb0:	2f16      	cmp	r7, #22
 8006fb2:	d851      	bhi.n	8007058 <_dtoa_r+0x210>
 8006fb4:	4b5b      	ldr	r3, [pc, #364]	@ (8007124 <_dtoa_r+0x2dc>)
 8006fb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fc2:	f7f9 fdab 	bl	8000b1c <__aeabi_dcmplt>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d048      	beq.n	800705c <_dtoa_r+0x214>
 8006fca:	3f01      	subs	r7, #1
 8006fcc:	2300      	movs	r3, #0
 8006fce:	9312      	str	r3, [sp, #72]	@ 0x48
 8006fd0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006fd2:	1b9b      	subs	r3, r3, r6
 8006fd4:	1e5a      	subs	r2, r3, #1
 8006fd6:	bf44      	itt	mi
 8006fd8:	f1c3 0801 	rsbmi	r8, r3, #1
 8006fdc:	2300      	movmi	r3, #0
 8006fde:	9208      	str	r2, [sp, #32]
 8006fe0:	bf54      	ite	pl
 8006fe2:	f04f 0800 	movpl.w	r8, #0
 8006fe6:	9308      	strmi	r3, [sp, #32]
 8006fe8:	2f00      	cmp	r7, #0
 8006fea:	db39      	blt.n	8007060 <_dtoa_r+0x218>
 8006fec:	9b08      	ldr	r3, [sp, #32]
 8006fee:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006ff0:	443b      	add	r3, r7
 8006ff2:	9308      	str	r3, [sp, #32]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ffa:	2b09      	cmp	r3, #9
 8006ffc:	d864      	bhi.n	80070c8 <_dtoa_r+0x280>
 8006ffe:	2b05      	cmp	r3, #5
 8007000:	bfc4      	itt	gt
 8007002:	3b04      	subgt	r3, #4
 8007004:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007008:	f1a3 0302 	sub.w	r3, r3, #2
 800700c:	bfcc      	ite	gt
 800700e:	2400      	movgt	r4, #0
 8007010:	2401      	movle	r4, #1
 8007012:	2b03      	cmp	r3, #3
 8007014:	d863      	bhi.n	80070de <_dtoa_r+0x296>
 8007016:	e8df f003 	tbb	[pc, r3]
 800701a:	372a      	.short	0x372a
 800701c:	5535      	.short	0x5535
 800701e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007022:	441e      	add	r6, r3
 8007024:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007028:	2b20      	cmp	r3, #32
 800702a:	bfc1      	itttt	gt
 800702c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007030:	409f      	lslgt	r7, r3
 8007032:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007036:	fa24 f303 	lsrgt.w	r3, r4, r3
 800703a:	bfd6      	itet	le
 800703c:	f1c3 0320 	rsble	r3, r3, #32
 8007040:	ea47 0003 	orrgt.w	r0, r7, r3
 8007044:	fa04 f003 	lslle.w	r0, r4, r3
 8007048:	f7f9 fa7c 	bl	8000544 <__aeabi_ui2d>
 800704c:	2201      	movs	r2, #1
 800704e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007052:	3e01      	subs	r6, #1
 8007054:	9214      	str	r2, [sp, #80]	@ 0x50
 8007056:	e777      	b.n	8006f48 <_dtoa_r+0x100>
 8007058:	2301      	movs	r3, #1
 800705a:	e7b8      	b.n	8006fce <_dtoa_r+0x186>
 800705c:	9012      	str	r0, [sp, #72]	@ 0x48
 800705e:	e7b7      	b.n	8006fd0 <_dtoa_r+0x188>
 8007060:	427b      	negs	r3, r7
 8007062:	930a      	str	r3, [sp, #40]	@ 0x28
 8007064:	2300      	movs	r3, #0
 8007066:	eba8 0807 	sub.w	r8, r8, r7
 800706a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800706c:	e7c4      	b.n	8006ff8 <_dtoa_r+0x1b0>
 800706e:	2300      	movs	r3, #0
 8007070:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007072:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007074:	2b00      	cmp	r3, #0
 8007076:	dc35      	bgt.n	80070e4 <_dtoa_r+0x29c>
 8007078:	2301      	movs	r3, #1
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	9307      	str	r3, [sp, #28]
 800707e:	461a      	mov	r2, r3
 8007080:	920e      	str	r2, [sp, #56]	@ 0x38
 8007082:	e00b      	b.n	800709c <_dtoa_r+0x254>
 8007084:	2301      	movs	r3, #1
 8007086:	e7f3      	b.n	8007070 <_dtoa_r+0x228>
 8007088:	2300      	movs	r3, #0
 800708a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800708c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800708e:	18fb      	adds	r3, r7, r3
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	3301      	adds	r3, #1
 8007094:	2b01      	cmp	r3, #1
 8007096:	9307      	str	r3, [sp, #28]
 8007098:	bfb8      	it	lt
 800709a:	2301      	movlt	r3, #1
 800709c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80070a0:	2100      	movs	r1, #0
 80070a2:	2204      	movs	r2, #4
 80070a4:	f102 0514 	add.w	r5, r2, #20
 80070a8:	429d      	cmp	r5, r3
 80070aa:	d91f      	bls.n	80070ec <_dtoa_r+0x2a4>
 80070ac:	6041      	str	r1, [r0, #4]
 80070ae:	4658      	mov	r0, fp
 80070b0:	f000 fd8e 	bl	8007bd0 <_Balloc>
 80070b4:	4682      	mov	sl, r0
 80070b6:	2800      	cmp	r0, #0
 80070b8:	d13c      	bne.n	8007134 <_dtoa_r+0x2ec>
 80070ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007128 <_dtoa_r+0x2e0>)
 80070bc:	4602      	mov	r2, r0
 80070be:	f240 11af 	movw	r1, #431	@ 0x1af
 80070c2:	e6d8      	b.n	8006e76 <_dtoa_r+0x2e>
 80070c4:	2301      	movs	r3, #1
 80070c6:	e7e0      	b.n	800708a <_dtoa_r+0x242>
 80070c8:	2401      	movs	r4, #1
 80070ca:	2300      	movs	r3, #0
 80070cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80070ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80070d0:	f04f 33ff 	mov.w	r3, #4294967295
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	9307      	str	r3, [sp, #28]
 80070d8:	2200      	movs	r2, #0
 80070da:	2312      	movs	r3, #18
 80070dc:	e7d0      	b.n	8007080 <_dtoa_r+0x238>
 80070de:	2301      	movs	r3, #1
 80070e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070e2:	e7f5      	b.n	80070d0 <_dtoa_r+0x288>
 80070e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	9307      	str	r3, [sp, #28]
 80070ea:	e7d7      	b.n	800709c <_dtoa_r+0x254>
 80070ec:	3101      	adds	r1, #1
 80070ee:	0052      	lsls	r2, r2, #1
 80070f0:	e7d8      	b.n	80070a4 <_dtoa_r+0x25c>
 80070f2:	bf00      	nop
 80070f4:	f3af 8000 	nop.w
 80070f8:	636f4361 	.word	0x636f4361
 80070fc:	3fd287a7 	.word	0x3fd287a7
 8007100:	8b60c8b3 	.word	0x8b60c8b3
 8007104:	3fc68a28 	.word	0x3fc68a28
 8007108:	509f79fb 	.word	0x509f79fb
 800710c:	3fd34413 	.word	0x3fd34413
 8007110:	08008e59 	.word	0x08008e59
 8007114:	08008e70 	.word	0x08008e70
 8007118:	7ff00000 	.word	0x7ff00000
 800711c:	08008e29 	.word	0x08008e29
 8007120:	3ff80000 	.word	0x3ff80000
 8007124:	08008f68 	.word	0x08008f68
 8007128:	08008ec8 	.word	0x08008ec8
 800712c:	08008e55 	.word	0x08008e55
 8007130:	08008e28 	.word	0x08008e28
 8007134:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007138:	6018      	str	r0, [r3, #0]
 800713a:	9b07      	ldr	r3, [sp, #28]
 800713c:	2b0e      	cmp	r3, #14
 800713e:	f200 80a4 	bhi.w	800728a <_dtoa_r+0x442>
 8007142:	2c00      	cmp	r4, #0
 8007144:	f000 80a1 	beq.w	800728a <_dtoa_r+0x442>
 8007148:	2f00      	cmp	r7, #0
 800714a:	dd33      	ble.n	80071b4 <_dtoa_r+0x36c>
 800714c:	4bad      	ldr	r3, [pc, #692]	@ (8007404 <_dtoa_r+0x5bc>)
 800714e:	f007 020f 	and.w	r2, r7, #15
 8007152:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007156:	ed93 7b00 	vldr	d7, [r3]
 800715a:	05f8      	lsls	r0, r7, #23
 800715c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007160:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007164:	d516      	bpl.n	8007194 <_dtoa_r+0x34c>
 8007166:	4ba8      	ldr	r3, [pc, #672]	@ (8007408 <_dtoa_r+0x5c0>)
 8007168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800716c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007170:	f7f9 fb8c 	bl	800088c <__aeabi_ddiv>
 8007174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007178:	f004 040f 	and.w	r4, r4, #15
 800717c:	2603      	movs	r6, #3
 800717e:	4da2      	ldr	r5, [pc, #648]	@ (8007408 <_dtoa_r+0x5c0>)
 8007180:	b954      	cbnz	r4, 8007198 <_dtoa_r+0x350>
 8007182:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800718a:	f7f9 fb7f 	bl	800088c <__aeabi_ddiv>
 800718e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007192:	e028      	b.n	80071e6 <_dtoa_r+0x39e>
 8007194:	2602      	movs	r6, #2
 8007196:	e7f2      	b.n	800717e <_dtoa_r+0x336>
 8007198:	07e1      	lsls	r1, r4, #31
 800719a:	d508      	bpl.n	80071ae <_dtoa_r+0x366>
 800719c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071a4:	f7f9 fa48 	bl	8000638 <__aeabi_dmul>
 80071a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071ac:	3601      	adds	r6, #1
 80071ae:	1064      	asrs	r4, r4, #1
 80071b0:	3508      	adds	r5, #8
 80071b2:	e7e5      	b.n	8007180 <_dtoa_r+0x338>
 80071b4:	f000 80d2 	beq.w	800735c <_dtoa_r+0x514>
 80071b8:	427c      	negs	r4, r7
 80071ba:	4b92      	ldr	r3, [pc, #584]	@ (8007404 <_dtoa_r+0x5bc>)
 80071bc:	4d92      	ldr	r5, [pc, #584]	@ (8007408 <_dtoa_r+0x5c0>)
 80071be:	f004 020f 	and.w	r2, r4, #15
 80071c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071ce:	f7f9 fa33 	bl	8000638 <__aeabi_dmul>
 80071d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071d6:	1124      	asrs	r4, r4, #4
 80071d8:	2300      	movs	r3, #0
 80071da:	2602      	movs	r6, #2
 80071dc:	2c00      	cmp	r4, #0
 80071de:	f040 80b2 	bne.w	8007346 <_dtoa_r+0x4fe>
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1d3      	bne.n	800718e <_dtoa_r+0x346>
 80071e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80071e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 80b7 	beq.w	8007360 <_dtoa_r+0x518>
 80071f2:	4b86      	ldr	r3, [pc, #536]	@ (800740c <_dtoa_r+0x5c4>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	4620      	mov	r0, r4
 80071f8:	4629      	mov	r1, r5
 80071fa:	f7f9 fc8f 	bl	8000b1c <__aeabi_dcmplt>
 80071fe:	2800      	cmp	r0, #0
 8007200:	f000 80ae 	beq.w	8007360 <_dtoa_r+0x518>
 8007204:	9b07      	ldr	r3, [sp, #28]
 8007206:	2b00      	cmp	r3, #0
 8007208:	f000 80aa 	beq.w	8007360 <_dtoa_r+0x518>
 800720c:	9b00      	ldr	r3, [sp, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	dd37      	ble.n	8007282 <_dtoa_r+0x43a>
 8007212:	1e7b      	subs	r3, r7, #1
 8007214:	9304      	str	r3, [sp, #16]
 8007216:	4620      	mov	r0, r4
 8007218:	4b7d      	ldr	r3, [pc, #500]	@ (8007410 <_dtoa_r+0x5c8>)
 800721a:	2200      	movs	r2, #0
 800721c:	4629      	mov	r1, r5
 800721e:	f7f9 fa0b 	bl	8000638 <__aeabi_dmul>
 8007222:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007226:	9c00      	ldr	r4, [sp, #0]
 8007228:	3601      	adds	r6, #1
 800722a:	4630      	mov	r0, r6
 800722c:	f7f9 f99a 	bl	8000564 <__aeabi_i2d>
 8007230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007234:	f7f9 fa00 	bl	8000638 <__aeabi_dmul>
 8007238:	4b76      	ldr	r3, [pc, #472]	@ (8007414 <_dtoa_r+0x5cc>)
 800723a:	2200      	movs	r2, #0
 800723c:	f7f9 f846 	bl	80002cc <__adddf3>
 8007240:	4605      	mov	r5, r0
 8007242:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007246:	2c00      	cmp	r4, #0
 8007248:	f040 808d 	bne.w	8007366 <_dtoa_r+0x51e>
 800724c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007250:	4b71      	ldr	r3, [pc, #452]	@ (8007418 <_dtoa_r+0x5d0>)
 8007252:	2200      	movs	r2, #0
 8007254:	f7f9 f838 	bl	80002c8 <__aeabi_dsub>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007260:	462a      	mov	r2, r5
 8007262:	4633      	mov	r3, r6
 8007264:	f7f9 fc78 	bl	8000b58 <__aeabi_dcmpgt>
 8007268:	2800      	cmp	r0, #0
 800726a:	f040 828b 	bne.w	8007784 <_dtoa_r+0x93c>
 800726e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007272:	462a      	mov	r2, r5
 8007274:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007278:	f7f9 fc50 	bl	8000b1c <__aeabi_dcmplt>
 800727c:	2800      	cmp	r0, #0
 800727e:	f040 8128 	bne.w	80074d2 <_dtoa_r+0x68a>
 8007282:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007286:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800728a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800728c:	2b00      	cmp	r3, #0
 800728e:	f2c0 815a 	blt.w	8007546 <_dtoa_r+0x6fe>
 8007292:	2f0e      	cmp	r7, #14
 8007294:	f300 8157 	bgt.w	8007546 <_dtoa_r+0x6fe>
 8007298:	4b5a      	ldr	r3, [pc, #360]	@ (8007404 <_dtoa_r+0x5bc>)
 800729a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800729e:	ed93 7b00 	vldr	d7, [r3]
 80072a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	ed8d 7b00 	vstr	d7, [sp]
 80072aa:	da03      	bge.n	80072b4 <_dtoa_r+0x46c>
 80072ac:	9b07      	ldr	r3, [sp, #28]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f340 8101 	ble.w	80074b6 <_dtoa_r+0x66e>
 80072b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80072b8:	4656      	mov	r6, sl
 80072ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072be:	4620      	mov	r0, r4
 80072c0:	4629      	mov	r1, r5
 80072c2:	f7f9 fae3 	bl	800088c <__aeabi_ddiv>
 80072c6:	f7f9 fc67 	bl	8000b98 <__aeabi_d2iz>
 80072ca:	4680      	mov	r8, r0
 80072cc:	f7f9 f94a 	bl	8000564 <__aeabi_i2d>
 80072d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072d4:	f7f9 f9b0 	bl	8000638 <__aeabi_dmul>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4620      	mov	r0, r4
 80072de:	4629      	mov	r1, r5
 80072e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80072e4:	f7f8 fff0 	bl	80002c8 <__aeabi_dsub>
 80072e8:	f806 4b01 	strb.w	r4, [r6], #1
 80072ec:	9d07      	ldr	r5, [sp, #28]
 80072ee:	eba6 040a 	sub.w	r4, r6, sl
 80072f2:	42a5      	cmp	r5, r4
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	f040 8117 	bne.w	800752a <_dtoa_r+0x6e2>
 80072fc:	f7f8 ffe6 	bl	80002cc <__adddf3>
 8007300:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007304:	4604      	mov	r4, r0
 8007306:	460d      	mov	r5, r1
 8007308:	f7f9 fc26 	bl	8000b58 <__aeabi_dcmpgt>
 800730c:	2800      	cmp	r0, #0
 800730e:	f040 80f9 	bne.w	8007504 <_dtoa_r+0x6bc>
 8007312:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007316:	4620      	mov	r0, r4
 8007318:	4629      	mov	r1, r5
 800731a:	f7f9 fbf5 	bl	8000b08 <__aeabi_dcmpeq>
 800731e:	b118      	cbz	r0, 8007328 <_dtoa_r+0x4e0>
 8007320:	f018 0f01 	tst.w	r8, #1
 8007324:	f040 80ee 	bne.w	8007504 <_dtoa_r+0x6bc>
 8007328:	4649      	mov	r1, r9
 800732a:	4658      	mov	r0, fp
 800732c:	f000 fc90 	bl	8007c50 <_Bfree>
 8007330:	2300      	movs	r3, #0
 8007332:	7033      	strb	r3, [r6, #0]
 8007334:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007336:	3701      	adds	r7, #1
 8007338:	601f      	str	r7, [r3, #0]
 800733a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 831d 	beq.w	800797c <_dtoa_r+0xb34>
 8007342:	601e      	str	r6, [r3, #0]
 8007344:	e31a      	b.n	800797c <_dtoa_r+0xb34>
 8007346:	07e2      	lsls	r2, r4, #31
 8007348:	d505      	bpl.n	8007356 <_dtoa_r+0x50e>
 800734a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800734e:	f7f9 f973 	bl	8000638 <__aeabi_dmul>
 8007352:	3601      	adds	r6, #1
 8007354:	2301      	movs	r3, #1
 8007356:	1064      	asrs	r4, r4, #1
 8007358:	3508      	adds	r5, #8
 800735a:	e73f      	b.n	80071dc <_dtoa_r+0x394>
 800735c:	2602      	movs	r6, #2
 800735e:	e742      	b.n	80071e6 <_dtoa_r+0x39e>
 8007360:	9c07      	ldr	r4, [sp, #28]
 8007362:	9704      	str	r7, [sp, #16]
 8007364:	e761      	b.n	800722a <_dtoa_r+0x3e2>
 8007366:	4b27      	ldr	r3, [pc, #156]	@ (8007404 <_dtoa_r+0x5bc>)
 8007368:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800736a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800736e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007372:	4454      	add	r4, sl
 8007374:	2900      	cmp	r1, #0
 8007376:	d053      	beq.n	8007420 <_dtoa_r+0x5d8>
 8007378:	4928      	ldr	r1, [pc, #160]	@ (800741c <_dtoa_r+0x5d4>)
 800737a:	2000      	movs	r0, #0
 800737c:	f7f9 fa86 	bl	800088c <__aeabi_ddiv>
 8007380:	4633      	mov	r3, r6
 8007382:	462a      	mov	r2, r5
 8007384:	f7f8 ffa0 	bl	80002c8 <__aeabi_dsub>
 8007388:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800738c:	4656      	mov	r6, sl
 800738e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007392:	f7f9 fc01 	bl	8000b98 <__aeabi_d2iz>
 8007396:	4605      	mov	r5, r0
 8007398:	f7f9 f8e4 	bl	8000564 <__aeabi_i2d>
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073a4:	f7f8 ff90 	bl	80002c8 <__aeabi_dsub>
 80073a8:	3530      	adds	r5, #48	@ 0x30
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073b2:	f806 5b01 	strb.w	r5, [r6], #1
 80073b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073ba:	f7f9 fbaf 	bl	8000b1c <__aeabi_dcmplt>
 80073be:	2800      	cmp	r0, #0
 80073c0:	d171      	bne.n	80074a6 <_dtoa_r+0x65e>
 80073c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073c6:	4911      	ldr	r1, [pc, #68]	@ (800740c <_dtoa_r+0x5c4>)
 80073c8:	2000      	movs	r0, #0
 80073ca:	f7f8 ff7d 	bl	80002c8 <__aeabi_dsub>
 80073ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073d2:	f7f9 fba3 	bl	8000b1c <__aeabi_dcmplt>
 80073d6:	2800      	cmp	r0, #0
 80073d8:	f040 8095 	bne.w	8007506 <_dtoa_r+0x6be>
 80073dc:	42a6      	cmp	r6, r4
 80073de:	f43f af50 	beq.w	8007282 <_dtoa_r+0x43a>
 80073e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80073e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007410 <_dtoa_r+0x5c8>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	f7f9 f925 	bl	8000638 <__aeabi_dmul>
 80073ee:	4b08      	ldr	r3, [pc, #32]	@ (8007410 <_dtoa_r+0x5c8>)
 80073f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073f4:	2200      	movs	r2, #0
 80073f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073fa:	f7f9 f91d 	bl	8000638 <__aeabi_dmul>
 80073fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007402:	e7c4      	b.n	800738e <_dtoa_r+0x546>
 8007404:	08008f68 	.word	0x08008f68
 8007408:	08008f40 	.word	0x08008f40
 800740c:	3ff00000 	.word	0x3ff00000
 8007410:	40240000 	.word	0x40240000
 8007414:	401c0000 	.word	0x401c0000
 8007418:	40140000 	.word	0x40140000
 800741c:	3fe00000 	.word	0x3fe00000
 8007420:	4631      	mov	r1, r6
 8007422:	4628      	mov	r0, r5
 8007424:	f7f9 f908 	bl	8000638 <__aeabi_dmul>
 8007428:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800742c:	9415      	str	r4, [sp, #84]	@ 0x54
 800742e:	4656      	mov	r6, sl
 8007430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007434:	f7f9 fbb0 	bl	8000b98 <__aeabi_d2iz>
 8007438:	4605      	mov	r5, r0
 800743a:	f7f9 f893 	bl	8000564 <__aeabi_i2d>
 800743e:	4602      	mov	r2, r0
 8007440:	460b      	mov	r3, r1
 8007442:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007446:	f7f8 ff3f 	bl	80002c8 <__aeabi_dsub>
 800744a:	3530      	adds	r5, #48	@ 0x30
 800744c:	f806 5b01 	strb.w	r5, [r6], #1
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	42a6      	cmp	r6, r4
 8007456:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800745a:	f04f 0200 	mov.w	r2, #0
 800745e:	d124      	bne.n	80074aa <_dtoa_r+0x662>
 8007460:	4bac      	ldr	r3, [pc, #688]	@ (8007714 <_dtoa_r+0x8cc>)
 8007462:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007466:	f7f8 ff31 	bl	80002cc <__adddf3>
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007472:	f7f9 fb71 	bl	8000b58 <__aeabi_dcmpgt>
 8007476:	2800      	cmp	r0, #0
 8007478:	d145      	bne.n	8007506 <_dtoa_r+0x6be>
 800747a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800747e:	49a5      	ldr	r1, [pc, #660]	@ (8007714 <_dtoa_r+0x8cc>)
 8007480:	2000      	movs	r0, #0
 8007482:	f7f8 ff21 	bl	80002c8 <__aeabi_dsub>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800748e:	f7f9 fb45 	bl	8000b1c <__aeabi_dcmplt>
 8007492:	2800      	cmp	r0, #0
 8007494:	f43f aef5 	beq.w	8007282 <_dtoa_r+0x43a>
 8007498:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800749a:	1e73      	subs	r3, r6, #1
 800749c:	9315      	str	r3, [sp, #84]	@ 0x54
 800749e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80074a2:	2b30      	cmp	r3, #48	@ 0x30
 80074a4:	d0f8      	beq.n	8007498 <_dtoa_r+0x650>
 80074a6:	9f04      	ldr	r7, [sp, #16]
 80074a8:	e73e      	b.n	8007328 <_dtoa_r+0x4e0>
 80074aa:	4b9b      	ldr	r3, [pc, #620]	@ (8007718 <_dtoa_r+0x8d0>)
 80074ac:	f7f9 f8c4 	bl	8000638 <__aeabi_dmul>
 80074b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074b4:	e7bc      	b.n	8007430 <_dtoa_r+0x5e8>
 80074b6:	d10c      	bne.n	80074d2 <_dtoa_r+0x68a>
 80074b8:	4b98      	ldr	r3, [pc, #608]	@ (800771c <_dtoa_r+0x8d4>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074c0:	f7f9 f8ba 	bl	8000638 <__aeabi_dmul>
 80074c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074c8:	f7f9 fb3c 	bl	8000b44 <__aeabi_dcmpge>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	f000 8157 	beq.w	8007780 <_dtoa_r+0x938>
 80074d2:	2400      	movs	r4, #0
 80074d4:	4625      	mov	r5, r4
 80074d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074d8:	43db      	mvns	r3, r3
 80074da:	9304      	str	r3, [sp, #16]
 80074dc:	4656      	mov	r6, sl
 80074de:	2700      	movs	r7, #0
 80074e0:	4621      	mov	r1, r4
 80074e2:	4658      	mov	r0, fp
 80074e4:	f000 fbb4 	bl	8007c50 <_Bfree>
 80074e8:	2d00      	cmp	r5, #0
 80074ea:	d0dc      	beq.n	80074a6 <_dtoa_r+0x65e>
 80074ec:	b12f      	cbz	r7, 80074fa <_dtoa_r+0x6b2>
 80074ee:	42af      	cmp	r7, r5
 80074f0:	d003      	beq.n	80074fa <_dtoa_r+0x6b2>
 80074f2:	4639      	mov	r1, r7
 80074f4:	4658      	mov	r0, fp
 80074f6:	f000 fbab 	bl	8007c50 <_Bfree>
 80074fa:	4629      	mov	r1, r5
 80074fc:	4658      	mov	r0, fp
 80074fe:	f000 fba7 	bl	8007c50 <_Bfree>
 8007502:	e7d0      	b.n	80074a6 <_dtoa_r+0x65e>
 8007504:	9704      	str	r7, [sp, #16]
 8007506:	4633      	mov	r3, r6
 8007508:	461e      	mov	r6, r3
 800750a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800750e:	2a39      	cmp	r2, #57	@ 0x39
 8007510:	d107      	bne.n	8007522 <_dtoa_r+0x6da>
 8007512:	459a      	cmp	sl, r3
 8007514:	d1f8      	bne.n	8007508 <_dtoa_r+0x6c0>
 8007516:	9a04      	ldr	r2, [sp, #16]
 8007518:	3201      	adds	r2, #1
 800751a:	9204      	str	r2, [sp, #16]
 800751c:	2230      	movs	r2, #48	@ 0x30
 800751e:	f88a 2000 	strb.w	r2, [sl]
 8007522:	781a      	ldrb	r2, [r3, #0]
 8007524:	3201      	adds	r2, #1
 8007526:	701a      	strb	r2, [r3, #0]
 8007528:	e7bd      	b.n	80074a6 <_dtoa_r+0x65e>
 800752a:	4b7b      	ldr	r3, [pc, #492]	@ (8007718 <_dtoa_r+0x8d0>)
 800752c:	2200      	movs	r2, #0
 800752e:	f7f9 f883 	bl	8000638 <__aeabi_dmul>
 8007532:	2200      	movs	r2, #0
 8007534:	2300      	movs	r3, #0
 8007536:	4604      	mov	r4, r0
 8007538:	460d      	mov	r5, r1
 800753a:	f7f9 fae5 	bl	8000b08 <__aeabi_dcmpeq>
 800753e:	2800      	cmp	r0, #0
 8007540:	f43f aebb 	beq.w	80072ba <_dtoa_r+0x472>
 8007544:	e6f0      	b.n	8007328 <_dtoa_r+0x4e0>
 8007546:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007548:	2a00      	cmp	r2, #0
 800754a:	f000 80db 	beq.w	8007704 <_dtoa_r+0x8bc>
 800754e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007550:	2a01      	cmp	r2, #1
 8007552:	f300 80bf 	bgt.w	80076d4 <_dtoa_r+0x88c>
 8007556:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007558:	2a00      	cmp	r2, #0
 800755a:	f000 80b7 	beq.w	80076cc <_dtoa_r+0x884>
 800755e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007562:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007564:	4646      	mov	r6, r8
 8007566:	9a08      	ldr	r2, [sp, #32]
 8007568:	2101      	movs	r1, #1
 800756a:	441a      	add	r2, r3
 800756c:	4658      	mov	r0, fp
 800756e:	4498      	add	r8, r3
 8007570:	9208      	str	r2, [sp, #32]
 8007572:	f000 fc21 	bl	8007db8 <__i2b>
 8007576:	4605      	mov	r5, r0
 8007578:	b15e      	cbz	r6, 8007592 <_dtoa_r+0x74a>
 800757a:	9b08      	ldr	r3, [sp, #32]
 800757c:	2b00      	cmp	r3, #0
 800757e:	dd08      	ble.n	8007592 <_dtoa_r+0x74a>
 8007580:	42b3      	cmp	r3, r6
 8007582:	9a08      	ldr	r2, [sp, #32]
 8007584:	bfa8      	it	ge
 8007586:	4633      	movge	r3, r6
 8007588:	eba8 0803 	sub.w	r8, r8, r3
 800758c:	1af6      	subs	r6, r6, r3
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	9308      	str	r3, [sp, #32]
 8007592:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007594:	b1f3      	cbz	r3, 80075d4 <_dtoa_r+0x78c>
 8007596:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 80b7 	beq.w	800770c <_dtoa_r+0x8c4>
 800759e:	b18c      	cbz	r4, 80075c4 <_dtoa_r+0x77c>
 80075a0:	4629      	mov	r1, r5
 80075a2:	4622      	mov	r2, r4
 80075a4:	4658      	mov	r0, fp
 80075a6:	f000 fcc7 	bl	8007f38 <__pow5mult>
 80075aa:	464a      	mov	r2, r9
 80075ac:	4601      	mov	r1, r0
 80075ae:	4605      	mov	r5, r0
 80075b0:	4658      	mov	r0, fp
 80075b2:	f000 fc17 	bl	8007de4 <__multiply>
 80075b6:	4649      	mov	r1, r9
 80075b8:	9004      	str	r0, [sp, #16]
 80075ba:	4658      	mov	r0, fp
 80075bc:	f000 fb48 	bl	8007c50 <_Bfree>
 80075c0:	9b04      	ldr	r3, [sp, #16]
 80075c2:	4699      	mov	r9, r3
 80075c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075c6:	1b1a      	subs	r2, r3, r4
 80075c8:	d004      	beq.n	80075d4 <_dtoa_r+0x78c>
 80075ca:	4649      	mov	r1, r9
 80075cc:	4658      	mov	r0, fp
 80075ce:	f000 fcb3 	bl	8007f38 <__pow5mult>
 80075d2:	4681      	mov	r9, r0
 80075d4:	2101      	movs	r1, #1
 80075d6:	4658      	mov	r0, fp
 80075d8:	f000 fbee 	bl	8007db8 <__i2b>
 80075dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075de:	4604      	mov	r4, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 81cf 	beq.w	8007984 <_dtoa_r+0xb3c>
 80075e6:	461a      	mov	r2, r3
 80075e8:	4601      	mov	r1, r0
 80075ea:	4658      	mov	r0, fp
 80075ec:	f000 fca4 	bl	8007f38 <__pow5mult>
 80075f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	4604      	mov	r4, r0
 80075f6:	f300 8095 	bgt.w	8007724 <_dtoa_r+0x8dc>
 80075fa:	9b02      	ldr	r3, [sp, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f040 8087 	bne.w	8007710 <_dtoa_r+0x8c8>
 8007602:	9b03      	ldr	r3, [sp, #12]
 8007604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007608:	2b00      	cmp	r3, #0
 800760a:	f040 8089 	bne.w	8007720 <_dtoa_r+0x8d8>
 800760e:	9b03      	ldr	r3, [sp, #12]
 8007610:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007614:	0d1b      	lsrs	r3, r3, #20
 8007616:	051b      	lsls	r3, r3, #20
 8007618:	b12b      	cbz	r3, 8007626 <_dtoa_r+0x7de>
 800761a:	9b08      	ldr	r3, [sp, #32]
 800761c:	3301      	adds	r3, #1
 800761e:	9308      	str	r3, [sp, #32]
 8007620:	f108 0801 	add.w	r8, r8, #1
 8007624:	2301      	movs	r3, #1
 8007626:	930a      	str	r3, [sp, #40]	@ 0x28
 8007628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 81b0 	beq.w	8007990 <_dtoa_r+0xb48>
 8007630:	6923      	ldr	r3, [r4, #16]
 8007632:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007636:	6918      	ldr	r0, [r3, #16]
 8007638:	f000 fb72 	bl	8007d20 <__hi0bits>
 800763c:	f1c0 0020 	rsb	r0, r0, #32
 8007640:	9b08      	ldr	r3, [sp, #32]
 8007642:	4418      	add	r0, r3
 8007644:	f010 001f 	ands.w	r0, r0, #31
 8007648:	d077      	beq.n	800773a <_dtoa_r+0x8f2>
 800764a:	f1c0 0320 	rsb	r3, r0, #32
 800764e:	2b04      	cmp	r3, #4
 8007650:	dd6b      	ble.n	800772a <_dtoa_r+0x8e2>
 8007652:	9b08      	ldr	r3, [sp, #32]
 8007654:	f1c0 001c 	rsb	r0, r0, #28
 8007658:	4403      	add	r3, r0
 800765a:	4480      	add	r8, r0
 800765c:	4406      	add	r6, r0
 800765e:	9308      	str	r3, [sp, #32]
 8007660:	f1b8 0f00 	cmp.w	r8, #0
 8007664:	dd05      	ble.n	8007672 <_dtoa_r+0x82a>
 8007666:	4649      	mov	r1, r9
 8007668:	4642      	mov	r2, r8
 800766a:	4658      	mov	r0, fp
 800766c:	f000 fcbe 	bl	8007fec <__lshift>
 8007670:	4681      	mov	r9, r0
 8007672:	9b08      	ldr	r3, [sp, #32]
 8007674:	2b00      	cmp	r3, #0
 8007676:	dd05      	ble.n	8007684 <_dtoa_r+0x83c>
 8007678:	4621      	mov	r1, r4
 800767a:	461a      	mov	r2, r3
 800767c:	4658      	mov	r0, fp
 800767e:	f000 fcb5 	bl	8007fec <__lshift>
 8007682:	4604      	mov	r4, r0
 8007684:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007686:	2b00      	cmp	r3, #0
 8007688:	d059      	beq.n	800773e <_dtoa_r+0x8f6>
 800768a:	4621      	mov	r1, r4
 800768c:	4648      	mov	r0, r9
 800768e:	f000 fd19 	bl	80080c4 <__mcmp>
 8007692:	2800      	cmp	r0, #0
 8007694:	da53      	bge.n	800773e <_dtoa_r+0x8f6>
 8007696:	1e7b      	subs	r3, r7, #1
 8007698:	9304      	str	r3, [sp, #16]
 800769a:	4649      	mov	r1, r9
 800769c:	2300      	movs	r3, #0
 800769e:	220a      	movs	r2, #10
 80076a0:	4658      	mov	r0, fp
 80076a2:	f000 faf7 	bl	8007c94 <__multadd>
 80076a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076a8:	4681      	mov	r9, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f000 8172 	beq.w	8007994 <_dtoa_r+0xb4c>
 80076b0:	2300      	movs	r3, #0
 80076b2:	4629      	mov	r1, r5
 80076b4:	220a      	movs	r2, #10
 80076b6:	4658      	mov	r0, fp
 80076b8:	f000 faec 	bl	8007c94 <__multadd>
 80076bc:	9b00      	ldr	r3, [sp, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	4605      	mov	r5, r0
 80076c2:	dc67      	bgt.n	8007794 <_dtoa_r+0x94c>
 80076c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	dc41      	bgt.n	800774e <_dtoa_r+0x906>
 80076ca:	e063      	b.n	8007794 <_dtoa_r+0x94c>
 80076cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80076ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80076d2:	e746      	b.n	8007562 <_dtoa_r+0x71a>
 80076d4:	9b07      	ldr	r3, [sp, #28]
 80076d6:	1e5c      	subs	r4, r3, #1
 80076d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076da:	42a3      	cmp	r3, r4
 80076dc:	bfbf      	itttt	lt
 80076de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80076e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80076e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80076e4:	1ae3      	sublt	r3, r4, r3
 80076e6:	bfb4      	ite	lt
 80076e8:	18d2      	addlt	r2, r2, r3
 80076ea:	1b1c      	subge	r4, r3, r4
 80076ec:	9b07      	ldr	r3, [sp, #28]
 80076ee:	bfbc      	itt	lt
 80076f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80076f2:	2400      	movlt	r4, #0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	bfb5      	itete	lt
 80076f8:	eba8 0603 	sublt.w	r6, r8, r3
 80076fc:	9b07      	ldrge	r3, [sp, #28]
 80076fe:	2300      	movlt	r3, #0
 8007700:	4646      	movge	r6, r8
 8007702:	e730      	b.n	8007566 <_dtoa_r+0x71e>
 8007704:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007706:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007708:	4646      	mov	r6, r8
 800770a:	e735      	b.n	8007578 <_dtoa_r+0x730>
 800770c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800770e:	e75c      	b.n	80075ca <_dtoa_r+0x782>
 8007710:	2300      	movs	r3, #0
 8007712:	e788      	b.n	8007626 <_dtoa_r+0x7de>
 8007714:	3fe00000 	.word	0x3fe00000
 8007718:	40240000 	.word	0x40240000
 800771c:	40140000 	.word	0x40140000
 8007720:	9b02      	ldr	r3, [sp, #8]
 8007722:	e780      	b.n	8007626 <_dtoa_r+0x7de>
 8007724:	2300      	movs	r3, #0
 8007726:	930a      	str	r3, [sp, #40]	@ 0x28
 8007728:	e782      	b.n	8007630 <_dtoa_r+0x7e8>
 800772a:	d099      	beq.n	8007660 <_dtoa_r+0x818>
 800772c:	9a08      	ldr	r2, [sp, #32]
 800772e:	331c      	adds	r3, #28
 8007730:	441a      	add	r2, r3
 8007732:	4498      	add	r8, r3
 8007734:	441e      	add	r6, r3
 8007736:	9208      	str	r2, [sp, #32]
 8007738:	e792      	b.n	8007660 <_dtoa_r+0x818>
 800773a:	4603      	mov	r3, r0
 800773c:	e7f6      	b.n	800772c <_dtoa_r+0x8e4>
 800773e:	9b07      	ldr	r3, [sp, #28]
 8007740:	9704      	str	r7, [sp, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	dc20      	bgt.n	8007788 <_dtoa_r+0x940>
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800774a:	2b02      	cmp	r3, #2
 800774c:	dd1e      	ble.n	800778c <_dtoa_r+0x944>
 800774e:	9b00      	ldr	r3, [sp, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	f47f aec0 	bne.w	80074d6 <_dtoa_r+0x68e>
 8007756:	4621      	mov	r1, r4
 8007758:	2205      	movs	r2, #5
 800775a:	4658      	mov	r0, fp
 800775c:	f000 fa9a 	bl	8007c94 <__multadd>
 8007760:	4601      	mov	r1, r0
 8007762:	4604      	mov	r4, r0
 8007764:	4648      	mov	r0, r9
 8007766:	f000 fcad 	bl	80080c4 <__mcmp>
 800776a:	2800      	cmp	r0, #0
 800776c:	f77f aeb3 	ble.w	80074d6 <_dtoa_r+0x68e>
 8007770:	4656      	mov	r6, sl
 8007772:	2331      	movs	r3, #49	@ 0x31
 8007774:	f806 3b01 	strb.w	r3, [r6], #1
 8007778:	9b04      	ldr	r3, [sp, #16]
 800777a:	3301      	adds	r3, #1
 800777c:	9304      	str	r3, [sp, #16]
 800777e:	e6ae      	b.n	80074de <_dtoa_r+0x696>
 8007780:	9c07      	ldr	r4, [sp, #28]
 8007782:	9704      	str	r7, [sp, #16]
 8007784:	4625      	mov	r5, r4
 8007786:	e7f3      	b.n	8007770 <_dtoa_r+0x928>
 8007788:	9b07      	ldr	r3, [sp, #28]
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800778e:	2b00      	cmp	r3, #0
 8007790:	f000 8104 	beq.w	800799c <_dtoa_r+0xb54>
 8007794:	2e00      	cmp	r6, #0
 8007796:	dd05      	ble.n	80077a4 <_dtoa_r+0x95c>
 8007798:	4629      	mov	r1, r5
 800779a:	4632      	mov	r2, r6
 800779c:	4658      	mov	r0, fp
 800779e:	f000 fc25 	bl	8007fec <__lshift>
 80077a2:	4605      	mov	r5, r0
 80077a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d05a      	beq.n	8007860 <_dtoa_r+0xa18>
 80077aa:	6869      	ldr	r1, [r5, #4]
 80077ac:	4658      	mov	r0, fp
 80077ae:	f000 fa0f 	bl	8007bd0 <_Balloc>
 80077b2:	4606      	mov	r6, r0
 80077b4:	b928      	cbnz	r0, 80077c2 <_dtoa_r+0x97a>
 80077b6:	4b84      	ldr	r3, [pc, #528]	@ (80079c8 <_dtoa_r+0xb80>)
 80077b8:	4602      	mov	r2, r0
 80077ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80077be:	f7ff bb5a 	b.w	8006e76 <_dtoa_r+0x2e>
 80077c2:	692a      	ldr	r2, [r5, #16]
 80077c4:	3202      	adds	r2, #2
 80077c6:	0092      	lsls	r2, r2, #2
 80077c8:	f105 010c 	add.w	r1, r5, #12
 80077cc:	300c      	adds	r0, #12
 80077ce:	f000 ffaf 	bl	8008730 <memcpy>
 80077d2:	2201      	movs	r2, #1
 80077d4:	4631      	mov	r1, r6
 80077d6:	4658      	mov	r0, fp
 80077d8:	f000 fc08 	bl	8007fec <__lshift>
 80077dc:	f10a 0301 	add.w	r3, sl, #1
 80077e0:	9307      	str	r3, [sp, #28]
 80077e2:	9b00      	ldr	r3, [sp, #0]
 80077e4:	4453      	add	r3, sl
 80077e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077e8:	9b02      	ldr	r3, [sp, #8]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	462f      	mov	r7, r5
 80077f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80077f2:	4605      	mov	r5, r0
 80077f4:	9b07      	ldr	r3, [sp, #28]
 80077f6:	4621      	mov	r1, r4
 80077f8:	3b01      	subs	r3, #1
 80077fa:	4648      	mov	r0, r9
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	f7ff fa9a 	bl	8006d36 <quorem>
 8007802:	4639      	mov	r1, r7
 8007804:	9002      	str	r0, [sp, #8]
 8007806:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800780a:	4648      	mov	r0, r9
 800780c:	f000 fc5a 	bl	80080c4 <__mcmp>
 8007810:	462a      	mov	r2, r5
 8007812:	9008      	str	r0, [sp, #32]
 8007814:	4621      	mov	r1, r4
 8007816:	4658      	mov	r0, fp
 8007818:	f000 fc70 	bl	80080fc <__mdiff>
 800781c:	68c2      	ldr	r2, [r0, #12]
 800781e:	4606      	mov	r6, r0
 8007820:	bb02      	cbnz	r2, 8007864 <_dtoa_r+0xa1c>
 8007822:	4601      	mov	r1, r0
 8007824:	4648      	mov	r0, r9
 8007826:	f000 fc4d 	bl	80080c4 <__mcmp>
 800782a:	4602      	mov	r2, r0
 800782c:	4631      	mov	r1, r6
 800782e:	4658      	mov	r0, fp
 8007830:	920e      	str	r2, [sp, #56]	@ 0x38
 8007832:	f000 fa0d 	bl	8007c50 <_Bfree>
 8007836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007838:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800783a:	9e07      	ldr	r6, [sp, #28]
 800783c:	ea43 0102 	orr.w	r1, r3, r2
 8007840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007842:	4319      	orrs	r1, r3
 8007844:	d110      	bne.n	8007868 <_dtoa_r+0xa20>
 8007846:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800784a:	d029      	beq.n	80078a0 <_dtoa_r+0xa58>
 800784c:	9b08      	ldr	r3, [sp, #32]
 800784e:	2b00      	cmp	r3, #0
 8007850:	dd02      	ble.n	8007858 <_dtoa_r+0xa10>
 8007852:	9b02      	ldr	r3, [sp, #8]
 8007854:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007858:	9b00      	ldr	r3, [sp, #0]
 800785a:	f883 8000 	strb.w	r8, [r3]
 800785e:	e63f      	b.n	80074e0 <_dtoa_r+0x698>
 8007860:	4628      	mov	r0, r5
 8007862:	e7bb      	b.n	80077dc <_dtoa_r+0x994>
 8007864:	2201      	movs	r2, #1
 8007866:	e7e1      	b.n	800782c <_dtoa_r+0x9e4>
 8007868:	9b08      	ldr	r3, [sp, #32]
 800786a:	2b00      	cmp	r3, #0
 800786c:	db04      	blt.n	8007878 <_dtoa_r+0xa30>
 800786e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007870:	430b      	orrs	r3, r1
 8007872:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007874:	430b      	orrs	r3, r1
 8007876:	d120      	bne.n	80078ba <_dtoa_r+0xa72>
 8007878:	2a00      	cmp	r2, #0
 800787a:	dded      	ble.n	8007858 <_dtoa_r+0xa10>
 800787c:	4649      	mov	r1, r9
 800787e:	2201      	movs	r2, #1
 8007880:	4658      	mov	r0, fp
 8007882:	f000 fbb3 	bl	8007fec <__lshift>
 8007886:	4621      	mov	r1, r4
 8007888:	4681      	mov	r9, r0
 800788a:	f000 fc1b 	bl	80080c4 <__mcmp>
 800788e:	2800      	cmp	r0, #0
 8007890:	dc03      	bgt.n	800789a <_dtoa_r+0xa52>
 8007892:	d1e1      	bne.n	8007858 <_dtoa_r+0xa10>
 8007894:	f018 0f01 	tst.w	r8, #1
 8007898:	d0de      	beq.n	8007858 <_dtoa_r+0xa10>
 800789a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800789e:	d1d8      	bne.n	8007852 <_dtoa_r+0xa0a>
 80078a0:	9a00      	ldr	r2, [sp, #0]
 80078a2:	2339      	movs	r3, #57	@ 0x39
 80078a4:	7013      	strb	r3, [r2, #0]
 80078a6:	4633      	mov	r3, r6
 80078a8:	461e      	mov	r6, r3
 80078aa:	3b01      	subs	r3, #1
 80078ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80078b0:	2a39      	cmp	r2, #57	@ 0x39
 80078b2:	d052      	beq.n	800795a <_dtoa_r+0xb12>
 80078b4:	3201      	adds	r2, #1
 80078b6:	701a      	strb	r2, [r3, #0]
 80078b8:	e612      	b.n	80074e0 <_dtoa_r+0x698>
 80078ba:	2a00      	cmp	r2, #0
 80078bc:	dd07      	ble.n	80078ce <_dtoa_r+0xa86>
 80078be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80078c2:	d0ed      	beq.n	80078a0 <_dtoa_r+0xa58>
 80078c4:	9a00      	ldr	r2, [sp, #0]
 80078c6:	f108 0301 	add.w	r3, r8, #1
 80078ca:	7013      	strb	r3, [r2, #0]
 80078cc:	e608      	b.n	80074e0 <_dtoa_r+0x698>
 80078ce:	9b07      	ldr	r3, [sp, #28]
 80078d0:	9a07      	ldr	r2, [sp, #28]
 80078d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80078d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078d8:	4293      	cmp	r3, r2
 80078da:	d028      	beq.n	800792e <_dtoa_r+0xae6>
 80078dc:	4649      	mov	r1, r9
 80078de:	2300      	movs	r3, #0
 80078e0:	220a      	movs	r2, #10
 80078e2:	4658      	mov	r0, fp
 80078e4:	f000 f9d6 	bl	8007c94 <__multadd>
 80078e8:	42af      	cmp	r7, r5
 80078ea:	4681      	mov	r9, r0
 80078ec:	f04f 0300 	mov.w	r3, #0
 80078f0:	f04f 020a 	mov.w	r2, #10
 80078f4:	4639      	mov	r1, r7
 80078f6:	4658      	mov	r0, fp
 80078f8:	d107      	bne.n	800790a <_dtoa_r+0xac2>
 80078fa:	f000 f9cb 	bl	8007c94 <__multadd>
 80078fe:	4607      	mov	r7, r0
 8007900:	4605      	mov	r5, r0
 8007902:	9b07      	ldr	r3, [sp, #28]
 8007904:	3301      	adds	r3, #1
 8007906:	9307      	str	r3, [sp, #28]
 8007908:	e774      	b.n	80077f4 <_dtoa_r+0x9ac>
 800790a:	f000 f9c3 	bl	8007c94 <__multadd>
 800790e:	4629      	mov	r1, r5
 8007910:	4607      	mov	r7, r0
 8007912:	2300      	movs	r3, #0
 8007914:	220a      	movs	r2, #10
 8007916:	4658      	mov	r0, fp
 8007918:	f000 f9bc 	bl	8007c94 <__multadd>
 800791c:	4605      	mov	r5, r0
 800791e:	e7f0      	b.n	8007902 <_dtoa_r+0xaba>
 8007920:	9b00      	ldr	r3, [sp, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	bfcc      	ite	gt
 8007926:	461e      	movgt	r6, r3
 8007928:	2601      	movle	r6, #1
 800792a:	4456      	add	r6, sl
 800792c:	2700      	movs	r7, #0
 800792e:	4649      	mov	r1, r9
 8007930:	2201      	movs	r2, #1
 8007932:	4658      	mov	r0, fp
 8007934:	f000 fb5a 	bl	8007fec <__lshift>
 8007938:	4621      	mov	r1, r4
 800793a:	4681      	mov	r9, r0
 800793c:	f000 fbc2 	bl	80080c4 <__mcmp>
 8007940:	2800      	cmp	r0, #0
 8007942:	dcb0      	bgt.n	80078a6 <_dtoa_r+0xa5e>
 8007944:	d102      	bne.n	800794c <_dtoa_r+0xb04>
 8007946:	f018 0f01 	tst.w	r8, #1
 800794a:	d1ac      	bne.n	80078a6 <_dtoa_r+0xa5e>
 800794c:	4633      	mov	r3, r6
 800794e:	461e      	mov	r6, r3
 8007950:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007954:	2a30      	cmp	r2, #48	@ 0x30
 8007956:	d0fa      	beq.n	800794e <_dtoa_r+0xb06>
 8007958:	e5c2      	b.n	80074e0 <_dtoa_r+0x698>
 800795a:	459a      	cmp	sl, r3
 800795c:	d1a4      	bne.n	80078a8 <_dtoa_r+0xa60>
 800795e:	9b04      	ldr	r3, [sp, #16]
 8007960:	3301      	adds	r3, #1
 8007962:	9304      	str	r3, [sp, #16]
 8007964:	2331      	movs	r3, #49	@ 0x31
 8007966:	f88a 3000 	strb.w	r3, [sl]
 800796a:	e5b9      	b.n	80074e0 <_dtoa_r+0x698>
 800796c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800796e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80079cc <_dtoa_r+0xb84>
 8007972:	b11b      	cbz	r3, 800797c <_dtoa_r+0xb34>
 8007974:	f10a 0308 	add.w	r3, sl, #8
 8007978:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800797a:	6013      	str	r3, [r2, #0]
 800797c:	4650      	mov	r0, sl
 800797e:	b019      	add	sp, #100	@ 0x64
 8007980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007986:	2b01      	cmp	r3, #1
 8007988:	f77f ae37 	ble.w	80075fa <_dtoa_r+0x7b2>
 800798c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800798e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007990:	2001      	movs	r0, #1
 8007992:	e655      	b.n	8007640 <_dtoa_r+0x7f8>
 8007994:	9b00      	ldr	r3, [sp, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	f77f aed6 	ble.w	8007748 <_dtoa_r+0x900>
 800799c:	4656      	mov	r6, sl
 800799e:	4621      	mov	r1, r4
 80079a0:	4648      	mov	r0, r9
 80079a2:	f7ff f9c8 	bl	8006d36 <quorem>
 80079a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80079aa:	f806 8b01 	strb.w	r8, [r6], #1
 80079ae:	9b00      	ldr	r3, [sp, #0]
 80079b0:	eba6 020a 	sub.w	r2, r6, sl
 80079b4:	4293      	cmp	r3, r2
 80079b6:	ddb3      	ble.n	8007920 <_dtoa_r+0xad8>
 80079b8:	4649      	mov	r1, r9
 80079ba:	2300      	movs	r3, #0
 80079bc:	220a      	movs	r2, #10
 80079be:	4658      	mov	r0, fp
 80079c0:	f000 f968 	bl	8007c94 <__multadd>
 80079c4:	4681      	mov	r9, r0
 80079c6:	e7ea      	b.n	800799e <_dtoa_r+0xb56>
 80079c8:	08008ec8 	.word	0x08008ec8
 80079cc:	08008e4c 	.word	0x08008e4c

080079d0 <_free_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	4605      	mov	r5, r0
 80079d4:	2900      	cmp	r1, #0
 80079d6:	d041      	beq.n	8007a5c <_free_r+0x8c>
 80079d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079dc:	1f0c      	subs	r4, r1, #4
 80079de:	2b00      	cmp	r3, #0
 80079e0:	bfb8      	it	lt
 80079e2:	18e4      	addlt	r4, r4, r3
 80079e4:	f000 f8e8 	bl	8007bb8 <__malloc_lock>
 80079e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007a60 <_free_r+0x90>)
 80079ea:	6813      	ldr	r3, [r2, #0]
 80079ec:	b933      	cbnz	r3, 80079fc <_free_r+0x2c>
 80079ee:	6063      	str	r3, [r4, #4]
 80079f0:	6014      	str	r4, [r2, #0]
 80079f2:	4628      	mov	r0, r5
 80079f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079f8:	f000 b8e4 	b.w	8007bc4 <__malloc_unlock>
 80079fc:	42a3      	cmp	r3, r4
 80079fe:	d908      	bls.n	8007a12 <_free_r+0x42>
 8007a00:	6820      	ldr	r0, [r4, #0]
 8007a02:	1821      	adds	r1, r4, r0
 8007a04:	428b      	cmp	r3, r1
 8007a06:	bf01      	itttt	eq
 8007a08:	6819      	ldreq	r1, [r3, #0]
 8007a0a:	685b      	ldreq	r3, [r3, #4]
 8007a0c:	1809      	addeq	r1, r1, r0
 8007a0e:	6021      	streq	r1, [r4, #0]
 8007a10:	e7ed      	b.n	80079ee <_free_r+0x1e>
 8007a12:	461a      	mov	r2, r3
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	b10b      	cbz	r3, 8007a1c <_free_r+0x4c>
 8007a18:	42a3      	cmp	r3, r4
 8007a1a:	d9fa      	bls.n	8007a12 <_free_r+0x42>
 8007a1c:	6811      	ldr	r1, [r2, #0]
 8007a1e:	1850      	adds	r0, r2, r1
 8007a20:	42a0      	cmp	r0, r4
 8007a22:	d10b      	bne.n	8007a3c <_free_r+0x6c>
 8007a24:	6820      	ldr	r0, [r4, #0]
 8007a26:	4401      	add	r1, r0
 8007a28:	1850      	adds	r0, r2, r1
 8007a2a:	4283      	cmp	r3, r0
 8007a2c:	6011      	str	r1, [r2, #0]
 8007a2e:	d1e0      	bne.n	80079f2 <_free_r+0x22>
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	6053      	str	r3, [r2, #4]
 8007a36:	4408      	add	r0, r1
 8007a38:	6010      	str	r0, [r2, #0]
 8007a3a:	e7da      	b.n	80079f2 <_free_r+0x22>
 8007a3c:	d902      	bls.n	8007a44 <_free_r+0x74>
 8007a3e:	230c      	movs	r3, #12
 8007a40:	602b      	str	r3, [r5, #0]
 8007a42:	e7d6      	b.n	80079f2 <_free_r+0x22>
 8007a44:	6820      	ldr	r0, [r4, #0]
 8007a46:	1821      	adds	r1, r4, r0
 8007a48:	428b      	cmp	r3, r1
 8007a4a:	bf04      	itt	eq
 8007a4c:	6819      	ldreq	r1, [r3, #0]
 8007a4e:	685b      	ldreq	r3, [r3, #4]
 8007a50:	6063      	str	r3, [r4, #4]
 8007a52:	bf04      	itt	eq
 8007a54:	1809      	addeq	r1, r1, r0
 8007a56:	6021      	streq	r1, [r4, #0]
 8007a58:	6054      	str	r4, [r2, #4]
 8007a5a:	e7ca      	b.n	80079f2 <_free_r+0x22>
 8007a5c:	bd38      	pop	{r3, r4, r5, pc}
 8007a5e:	bf00      	nop
 8007a60:	200003dc 	.word	0x200003dc

08007a64 <malloc>:
 8007a64:	4b02      	ldr	r3, [pc, #8]	@ (8007a70 <malloc+0xc>)
 8007a66:	4601      	mov	r1, r0
 8007a68:	6818      	ldr	r0, [r3, #0]
 8007a6a:	f000 b825 	b.w	8007ab8 <_malloc_r>
 8007a6e:	bf00      	nop
 8007a70:	20000018 	.word	0x20000018

08007a74 <sbrk_aligned>:
 8007a74:	b570      	push	{r4, r5, r6, lr}
 8007a76:	4e0f      	ldr	r6, [pc, #60]	@ (8007ab4 <sbrk_aligned+0x40>)
 8007a78:	460c      	mov	r4, r1
 8007a7a:	6831      	ldr	r1, [r6, #0]
 8007a7c:	4605      	mov	r5, r0
 8007a7e:	b911      	cbnz	r1, 8007a86 <sbrk_aligned+0x12>
 8007a80:	f000 fe46 	bl	8008710 <_sbrk_r>
 8007a84:	6030      	str	r0, [r6, #0]
 8007a86:	4621      	mov	r1, r4
 8007a88:	4628      	mov	r0, r5
 8007a8a:	f000 fe41 	bl	8008710 <_sbrk_r>
 8007a8e:	1c43      	adds	r3, r0, #1
 8007a90:	d103      	bne.n	8007a9a <sbrk_aligned+0x26>
 8007a92:	f04f 34ff 	mov.w	r4, #4294967295
 8007a96:	4620      	mov	r0, r4
 8007a98:	bd70      	pop	{r4, r5, r6, pc}
 8007a9a:	1cc4      	adds	r4, r0, #3
 8007a9c:	f024 0403 	bic.w	r4, r4, #3
 8007aa0:	42a0      	cmp	r0, r4
 8007aa2:	d0f8      	beq.n	8007a96 <sbrk_aligned+0x22>
 8007aa4:	1a21      	subs	r1, r4, r0
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f000 fe32 	bl	8008710 <_sbrk_r>
 8007aac:	3001      	adds	r0, #1
 8007aae:	d1f2      	bne.n	8007a96 <sbrk_aligned+0x22>
 8007ab0:	e7ef      	b.n	8007a92 <sbrk_aligned+0x1e>
 8007ab2:	bf00      	nop
 8007ab4:	200003d8 	.word	0x200003d8

08007ab8 <_malloc_r>:
 8007ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007abc:	1ccd      	adds	r5, r1, #3
 8007abe:	f025 0503 	bic.w	r5, r5, #3
 8007ac2:	3508      	adds	r5, #8
 8007ac4:	2d0c      	cmp	r5, #12
 8007ac6:	bf38      	it	cc
 8007ac8:	250c      	movcc	r5, #12
 8007aca:	2d00      	cmp	r5, #0
 8007acc:	4606      	mov	r6, r0
 8007ace:	db01      	blt.n	8007ad4 <_malloc_r+0x1c>
 8007ad0:	42a9      	cmp	r1, r5
 8007ad2:	d904      	bls.n	8007ade <_malloc_r+0x26>
 8007ad4:	230c      	movs	r3, #12
 8007ad6:	6033      	str	r3, [r6, #0]
 8007ad8:	2000      	movs	r0, #0
 8007ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ade:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bb4 <_malloc_r+0xfc>
 8007ae2:	f000 f869 	bl	8007bb8 <__malloc_lock>
 8007ae6:	f8d8 3000 	ldr.w	r3, [r8]
 8007aea:	461c      	mov	r4, r3
 8007aec:	bb44      	cbnz	r4, 8007b40 <_malloc_r+0x88>
 8007aee:	4629      	mov	r1, r5
 8007af0:	4630      	mov	r0, r6
 8007af2:	f7ff ffbf 	bl	8007a74 <sbrk_aligned>
 8007af6:	1c43      	adds	r3, r0, #1
 8007af8:	4604      	mov	r4, r0
 8007afa:	d158      	bne.n	8007bae <_malloc_r+0xf6>
 8007afc:	f8d8 4000 	ldr.w	r4, [r8]
 8007b00:	4627      	mov	r7, r4
 8007b02:	2f00      	cmp	r7, #0
 8007b04:	d143      	bne.n	8007b8e <_malloc_r+0xd6>
 8007b06:	2c00      	cmp	r4, #0
 8007b08:	d04b      	beq.n	8007ba2 <_malloc_r+0xea>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	4639      	mov	r1, r7
 8007b0e:	4630      	mov	r0, r6
 8007b10:	eb04 0903 	add.w	r9, r4, r3
 8007b14:	f000 fdfc 	bl	8008710 <_sbrk_r>
 8007b18:	4581      	cmp	r9, r0
 8007b1a:	d142      	bne.n	8007ba2 <_malloc_r+0xea>
 8007b1c:	6821      	ldr	r1, [r4, #0]
 8007b1e:	1a6d      	subs	r5, r5, r1
 8007b20:	4629      	mov	r1, r5
 8007b22:	4630      	mov	r0, r6
 8007b24:	f7ff ffa6 	bl	8007a74 <sbrk_aligned>
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d03a      	beq.n	8007ba2 <_malloc_r+0xea>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	442b      	add	r3, r5
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	f8d8 3000 	ldr.w	r3, [r8]
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	bb62      	cbnz	r2, 8007b94 <_malloc_r+0xdc>
 8007b3a:	f8c8 7000 	str.w	r7, [r8]
 8007b3e:	e00f      	b.n	8007b60 <_malloc_r+0xa8>
 8007b40:	6822      	ldr	r2, [r4, #0]
 8007b42:	1b52      	subs	r2, r2, r5
 8007b44:	d420      	bmi.n	8007b88 <_malloc_r+0xd0>
 8007b46:	2a0b      	cmp	r2, #11
 8007b48:	d917      	bls.n	8007b7a <_malloc_r+0xc2>
 8007b4a:	1961      	adds	r1, r4, r5
 8007b4c:	42a3      	cmp	r3, r4
 8007b4e:	6025      	str	r5, [r4, #0]
 8007b50:	bf18      	it	ne
 8007b52:	6059      	strne	r1, [r3, #4]
 8007b54:	6863      	ldr	r3, [r4, #4]
 8007b56:	bf08      	it	eq
 8007b58:	f8c8 1000 	streq.w	r1, [r8]
 8007b5c:	5162      	str	r2, [r4, r5]
 8007b5e:	604b      	str	r3, [r1, #4]
 8007b60:	4630      	mov	r0, r6
 8007b62:	f000 f82f 	bl	8007bc4 <__malloc_unlock>
 8007b66:	f104 000b 	add.w	r0, r4, #11
 8007b6a:	1d23      	adds	r3, r4, #4
 8007b6c:	f020 0007 	bic.w	r0, r0, #7
 8007b70:	1ac2      	subs	r2, r0, r3
 8007b72:	bf1c      	itt	ne
 8007b74:	1a1b      	subne	r3, r3, r0
 8007b76:	50a3      	strne	r3, [r4, r2]
 8007b78:	e7af      	b.n	8007ada <_malloc_r+0x22>
 8007b7a:	6862      	ldr	r2, [r4, #4]
 8007b7c:	42a3      	cmp	r3, r4
 8007b7e:	bf0c      	ite	eq
 8007b80:	f8c8 2000 	streq.w	r2, [r8]
 8007b84:	605a      	strne	r2, [r3, #4]
 8007b86:	e7eb      	b.n	8007b60 <_malloc_r+0xa8>
 8007b88:	4623      	mov	r3, r4
 8007b8a:	6864      	ldr	r4, [r4, #4]
 8007b8c:	e7ae      	b.n	8007aec <_malloc_r+0x34>
 8007b8e:	463c      	mov	r4, r7
 8007b90:	687f      	ldr	r7, [r7, #4]
 8007b92:	e7b6      	b.n	8007b02 <_malloc_r+0x4a>
 8007b94:	461a      	mov	r2, r3
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	42a3      	cmp	r3, r4
 8007b9a:	d1fb      	bne.n	8007b94 <_malloc_r+0xdc>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	6053      	str	r3, [r2, #4]
 8007ba0:	e7de      	b.n	8007b60 <_malloc_r+0xa8>
 8007ba2:	230c      	movs	r3, #12
 8007ba4:	6033      	str	r3, [r6, #0]
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	f000 f80c 	bl	8007bc4 <__malloc_unlock>
 8007bac:	e794      	b.n	8007ad8 <_malloc_r+0x20>
 8007bae:	6005      	str	r5, [r0, #0]
 8007bb0:	e7d6      	b.n	8007b60 <_malloc_r+0xa8>
 8007bb2:	bf00      	nop
 8007bb4:	200003dc 	.word	0x200003dc

08007bb8 <__malloc_lock>:
 8007bb8:	4801      	ldr	r0, [pc, #4]	@ (8007bc0 <__malloc_lock+0x8>)
 8007bba:	f7ff b8ba 	b.w	8006d32 <__retarget_lock_acquire_recursive>
 8007bbe:	bf00      	nop
 8007bc0:	200003d4 	.word	0x200003d4

08007bc4 <__malloc_unlock>:
 8007bc4:	4801      	ldr	r0, [pc, #4]	@ (8007bcc <__malloc_unlock+0x8>)
 8007bc6:	f7ff b8b5 	b.w	8006d34 <__retarget_lock_release_recursive>
 8007bca:	bf00      	nop
 8007bcc:	200003d4 	.word	0x200003d4

08007bd0 <_Balloc>:
 8007bd0:	b570      	push	{r4, r5, r6, lr}
 8007bd2:	69c6      	ldr	r6, [r0, #28]
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	460d      	mov	r5, r1
 8007bd8:	b976      	cbnz	r6, 8007bf8 <_Balloc+0x28>
 8007bda:	2010      	movs	r0, #16
 8007bdc:	f7ff ff42 	bl	8007a64 <malloc>
 8007be0:	4602      	mov	r2, r0
 8007be2:	61e0      	str	r0, [r4, #28]
 8007be4:	b920      	cbnz	r0, 8007bf0 <_Balloc+0x20>
 8007be6:	4b18      	ldr	r3, [pc, #96]	@ (8007c48 <_Balloc+0x78>)
 8007be8:	4818      	ldr	r0, [pc, #96]	@ (8007c4c <_Balloc+0x7c>)
 8007bea:	216b      	movs	r1, #107	@ 0x6b
 8007bec:	f000 fdae 	bl	800874c <__assert_func>
 8007bf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bf4:	6006      	str	r6, [r0, #0]
 8007bf6:	60c6      	str	r6, [r0, #12]
 8007bf8:	69e6      	ldr	r6, [r4, #28]
 8007bfa:	68f3      	ldr	r3, [r6, #12]
 8007bfc:	b183      	cbz	r3, 8007c20 <_Balloc+0x50>
 8007bfe:	69e3      	ldr	r3, [r4, #28]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c06:	b9b8      	cbnz	r0, 8007c38 <_Balloc+0x68>
 8007c08:	2101      	movs	r1, #1
 8007c0a:	fa01 f605 	lsl.w	r6, r1, r5
 8007c0e:	1d72      	adds	r2, r6, #5
 8007c10:	0092      	lsls	r2, r2, #2
 8007c12:	4620      	mov	r0, r4
 8007c14:	f000 fdb8 	bl	8008788 <_calloc_r>
 8007c18:	b160      	cbz	r0, 8007c34 <_Balloc+0x64>
 8007c1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c1e:	e00e      	b.n	8007c3e <_Balloc+0x6e>
 8007c20:	2221      	movs	r2, #33	@ 0x21
 8007c22:	2104      	movs	r1, #4
 8007c24:	4620      	mov	r0, r4
 8007c26:	f000 fdaf 	bl	8008788 <_calloc_r>
 8007c2a:	69e3      	ldr	r3, [r4, #28]
 8007c2c:	60f0      	str	r0, [r6, #12]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1e4      	bne.n	8007bfe <_Balloc+0x2e>
 8007c34:	2000      	movs	r0, #0
 8007c36:	bd70      	pop	{r4, r5, r6, pc}
 8007c38:	6802      	ldr	r2, [r0, #0]
 8007c3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c3e:	2300      	movs	r3, #0
 8007c40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c44:	e7f7      	b.n	8007c36 <_Balloc+0x66>
 8007c46:	bf00      	nop
 8007c48:	08008e59 	.word	0x08008e59
 8007c4c:	08008ed9 	.word	0x08008ed9

08007c50 <_Bfree>:
 8007c50:	b570      	push	{r4, r5, r6, lr}
 8007c52:	69c6      	ldr	r6, [r0, #28]
 8007c54:	4605      	mov	r5, r0
 8007c56:	460c      	mov	r4, r1
 8007c58:	b976      	cbnz	r6, 8007c78 <_Bfree+0x28>
 8007c5a:	2010      	movs	r0, #16
 8007c5c:	f7ff ff02 	bl	8007a64 <malloc>
 8007c60:	4602      	mov	r2, r0
 8007c62:	61e8      	str	r0, [r5, #28]
 8007c64:	b920      	cbnz	r0, 8007c70 <_Bfree+0x20>
 8007c66:	4b09      	ldr	r3, [pc, #36]	@ (8007c8c <_Bfree+0x3c>)
 8007c68:	4809      	ldr	r0, [pc, #36]	@ (8007c90 <_Bfree+0x40>)
 8007c6a:	218f      	movs	r1, #143	@ 0x8f
 8007c6c:	f000 fd6e 	bl	800874c <__assert_func>
 8007c70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c74:	6006      	str	r6, [r0, #0]
 8007c76:	60c6      	str	r6, [r0, #12]
 8007c78:	b13c      	cbz	r4, 8007c8a <_Bfree+0x3a>
 8007c7a:	69eb      	ldr	r3, [r5, #28]
 8007c7c:	6862      	ldr	r2, [r4, #4]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c84:	6021      	str	r1, [r4, #0]
 8007c86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
 8007c8c:	08008e59 	.word	0x08008e59
 8007c90:	08008ed9 	.word	0x08008ed9

08007c94 <__multadd>:
 8007c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c98:	690d      	ldr	r5, [r1, #16]
 8007c9a:	4607      	mov	r7, r0
 8007c9c:	460c      	mov	r4, r1
 8007c9e:	461e      	mov	r6, r3
 8007ca0:	f101 0c14 	add.w	ip, r1, #20
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	f8dc 3000 	ldr.w	r3, [ip]
 8007caa:	b299      	uxth	r1, r3
 8007cac:	fb02 6101 	mla	r1, r2, r1, r6
 8007cb0:	0c1e      	lsrs	r6, r3, #16
 8007cb2:	0c0b      	lsrs	r3, r1, #16
 8007cb4:	fb02 3306 	mla	r3, r2, r6, r3
 8007cb8:	b289      	uxth	r1, r1
 8007cba:	3001      	adds	r0, #1
 8007cbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007cc0:	4285      	cmp	r5, r0
 8007cc2:	f84c 1b04 	str.w	r1, [ip], #4
 8007cc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007cca:	dcec      	bgt.n	8007ca6 <__multadd+0x12>
 8007ccc:	b30e      	cbz	r6, 8007d12 <__multadd+0x7e>
 8007cce:	68a3      	ldr	r3, [r4, #8]
 8007cd0:	42ab      	cmp	r3, r5
 8007cd2:	dc19      	bgt.n	8007d08 <__multadd+0x74>
 8007cd4:	6861      	ldr	r1, [r4, #4]
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	3101      	adds	r1, #1
 8007cda:	f7ff ff79 	bl	8007bd0 <_Balloc>
 8007cde:	4680      	mov	r8, r0
 8007ce0:	b928      	cbnz	r0, 8007cee <__multadd+0x5a>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8007d18 <__multadd+0x84>)
 8007ce6:	480d      	ldr	r0, [pc, #52]	@ (8007d1c <__multadd+0x88>)
 8007ce8:	21ba      	movs	r1, #186	@ 0xba
 8007cea:	f000 fd2f 	bl	800874c <__assert_func>
 8007cee:	6922      	ldr	r2, [r4, #16]
 8007cf0:	3202      	adds	r2, #2
 8007cf2:	f104 010c 	add.w	r1, r4, #12
 8007cf6:	0092      	lsls	r2, r2, #2
 8007cf8:	300c      	adds	r0, #12
 8007cfa:	f000 fd19 	bl	8008730 <memcpy>
 8007cfe:	4621      	mov	r1, r4
 8007d00:	4638      	mov	r0, r7
 8007d02:	f7ff ffa5 	bl	8007c50 <_Bfree>
 8007d06:	4644      	mov	r4, r8
 8007d08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d0c:	3501      	adds	r5, #1
 8007d0e:	615e      	str	r6, [r3, #20]
 8007d10:	6125      	str	r5, [r4, #16]
 8007d12:	4620      	mov	r0, r4
 8007d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d18:	08008ec8 	.word	0x08008ec8
 8007d1c:	08008ed9 	.word	0x08008ed9

08007d20 <__hi0bits>:
 8007d20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007d24:	4603      	mov	r3, r0
 8007d26:	bf36      	itet	cc
 8007d28:	0403      	lslcc	r3, r0, #16
 8007d2a:	2000      	movcs	r0, #0
 8007d2c:	2010      	movcc	r0, #16
 8007d2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d32:	bf3c      	itt	cc
 8007d34:	021b      	lslcc	r3, r3, #8
 8007d36:	3008      	addcc	r0, #8
 8007d38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d3c:	bf3c      	itt	cc
 8007d3e:	011b      	lslcc	r3, r3, #4
 8007d40:	3004      	addcc	r0, #4
 8007d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d46:	bf3c      	itt	cc
 8007d48:	009b      	lslcc	r3, r3, #2
 8007d4a:	3002      	addcc	r0, #2
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	db05      	blt.n	8007d5c <__hi0bits+0x3c>
 8007d50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007d54:	f100 0001 	add.w	r0, r0, #1
 8007d58:	bf08      	it	eq
 8007d5a:	2020      	moveq	r0, #32
 8007d5c:	4770      	bx	lr

08007d5e <__lo0bits>:
 8007d5e:	6803      	ldr	r3, [r0, #0]
 8007d60:	4602      	mov	r2, r0
 8007d62:	f013 0007 	ands.w	r0, r3, #7
 8007d66:	d00b      	beq.n	8007d80 <__lo0bits+0x22>
 8007d68:	07d9      	lsls	r1, r3, #31
 8007d6a:	d421      	bmi.n	8007db0 <__lo0bits+0x52>
 8007d6c:	0798      	lsls	r0, r3, #30
 8007d6e:	bf49      	itett	mi
 8007d70:	085b      	lsrmi	r3, r3, #1
 8007d72:	089b      	lsrpl	r3, r3, #2
 8007d74:	2001      	movmi	r0, #1
 8007d76:	6013      	strmi	r3, [r2, #0]
 8007d78:	bf5c      	itt	pl
 8007d7a:	6013      	strpl	r3, [r2, #0]
 8007d7c:	2002      	movpl	r0, #2
 8007d7e:	4770      	bx	lr
 8007d80:	b299      	uxth	r1, r3
 8007d82:	b909      	cbnz	r1, 8007d88 <__lo0bits+0x2a>
 8007d84:	0c1b      	lsrs	r3, r3, #16
 8007d86:	2010      	movs	r0, #16
 8007d88:	b2d9      	uxtb	r1, r3
 8007d8a:	b909      	cbnz	r1, 8007d90 <__lo0bits+0x32>
 8007d8c:	3008      	adds	r0, #8
 8007d8e:	0a1b      	lsrs	r3, r3, #8
 8007d90:	0719      	lsls	r1, r3, #28
 8007d92:	bf04      	itt	eq
 8007d94:	091b      	lsreq	r3, r3, #4
 8007d96:	3004      	addeq	r0, #4
 8007d98:	0799      	lsls	r1, r3, #30
 8007d9a:	bf04      	itt	eq
 8007d9c:	089b      	lsreq	r3, r3, #2
 8007d9e:	3002      	addeq	r0, #2
 8007da0:	07d9      	lsls	r1, r3, #31
 8007da2:	d403      	bmi.n	8007dac <__lo0bits+0x4e>
 8007da4:	085b      	lsrs	r3, r3, #1
 8007da6:	f100 0001 	add.w	r0, r0, #1
 8007daa:	d003      	beq.n	8007db4 <__lo0bits+0x56>
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	4770      	bx	lr
 8007db0:	2000      	movs	r0, #0
 8007db2:	4770      	bx	lr
 8007db4:	2020      	movs	r0, #32
 8007db6:	4770      	bx	lr

08007db8 <__i2b>:
 8007db8:	b510      	push	{r4, lr}
 8007dba:	460c      	mov	r4, r1
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	f7ff ff07 	bl	8007bd0 <_Balloc>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	b928      	cbnz	r0, 8007dd2 <__i2b+0x1a>
 8007dc6:	4b05      	ldr	r3, [pc, #20]	@ (8007ddc <__i2b+0x24>)
 8007dc8:	4805      	ldr	r0, [pc, #20]	@ (8007de0 <__i2b+0x28>)
 8007dca:	f240 1145 	movw	r1, #325	@ 0x145
 8007dce:	f000 fcbd 	bl	800874c <__assert_func>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	6144      	str	r4, [r0, #20]
 8007dd6:	6103      	str	r3, [r0, #16]
 8007dd8:	bd10      	pop	{r4, pc}
 8007dda:	bf00      	nop
 8007ddc:	08008ec8 	.word	0x08008ec8
 8007de0:	08008ed9 	.word	0x08008ed9

08007de4 <__multiply>:
 8007de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de8:	4614      	mov	r4, r2
 8007dea:	690a      	ldr	r2, [r1, #16]
 8007dec:	6923      	ldr	r3, [r4, #16]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	bfa8      	it	ge
 8007df2:	4623      	movge	r3, r4
 8007df4:	460f      	mov	r7, r1
 8007df6:	bfa4      	itt	ge
 8007df8:	460c      	movge	r4, r1
 8007dfa:	461f      	movge	r7, r3
 8007dfc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007e00:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007e04:	68a3      	ldr	r3, [r4, #8]
 8007e06:	6861      	ldr	r1, [r4, #4]
 8007e08:	eb0a 0609 	add.w	r6, sl, r9
 8007e0c:	42b3      	cmp	r3, r6
 8007e0e:	b085      	sub	sp, #20
 8007e10:	bfb8      	it	lt
 8007e12:	3101      	addlt	r1, #1
 8007e14:	f7ff fedc 	bl	8007bd0 <_Balloc>
 8007e18:	b930      	cbnz	r0, 8007e28 <__multiply+0x44>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	4b44      	ldr	r3, [pc, #272]	@ (8007f30 <__multiply+0x14c>)
 8007e1e:	4845      	ldr	r0, [pc, #276]	@ (8007f34 <__multiply+0x150>)
 8007e20:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007e24:	f000 fc92 	bl	800874c <__assert_func>
 8007e28:	f100 0514 	add.w	r5, r0, #20
 8007e2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e30:	462b      	mov	r3, r5
 8007e32:	2200      	movs	r2, #0
 8007e34:	4543      	cmp	r3, r8
 8007e36:	d321      	bcc.n	8007e7c <__multiply+0x98>
 8007e38:	f107 0114 	add.w	r1, r7, #20
 8007e3c:	f104 0214 	add.w	r2, r4, #20
 8007e40:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007e44:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007e48:	9302      	str	r3, [sp, #8]
 8007e4a:	1b13      	subs	r3, r2, r4
 8007e4c:	3b15      	subs	r3, #21
 8007e4e:	f023 0303 	bic.w	r3, r3, #3
 8007e52:	3304      	adds	r3, #4
 8007e54:	f104 0715 	add.w	r7, r4, #21
 8007e58:	42ba      	cmp	r2, r7
 8007e5a:	bf38      	it	cc
 8007e5c:	2304      	movcc	r3, #4
 8007e5e:	9301      	str	r3, [sp, #4]
 8007e60:	9b02      	ldr	r3, [sp, #8]
 8007e62:	9103      	str	r1, [sp, #12]
 8007e64:	428b      	cmp	r3, r1
 8007e66:	d80c      	bhi.n	8007e82 <__multiply+0x9e>
 8007e68:	2e00      	cmp	r6, #0
 8007e6a:	dd03      	ble.n	8007e74 <__multiply+0x90>
 8007e6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d05b      	beq.n	8007f2c <__multiply+0x148>
 8007e74:	6106      	str	r6, [r0, #16]
 8007e76:	b005      	add	sp, #20
 8007e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7c:	f843 2b04 	str.w	r2, [r3], #4
 8007e80:	e7d8      	b.n	8007e34 <__multiply+0x50>
 8007e82:	f8b1 a000 	ldrh.w	sl, [r1]
 8007e86:	f1ba 0f00 	cmp.w	sl, #0
 8007e8a:	d024      	beq.n	8007ed6 <__multiply+0xf2>
 8007e8c:	f104 0e14 	add.w	lr, r4, #20
 8007e90:	46a9      	mov	r9, r5
 8007e92:	f04f 0c00 	mov.w	ip, #0
 8007e96:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e9a:	f8d9 3000 	ldr.w	r3, [r9]
 8007e9e:	fa1f fb87 	uxth.w	fp, r7
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ea8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007eac:	f8d9 7000 	ldr.w	r7, [r9]
 8007eb0:	4463      	add	r3, ip
 8007eb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007eb6:	fb0a c70b 	mla	r7, sl, fp, ip
 8007eba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ec4:	4572      	cmp	r2, lr
 8007ec6:	f849 3b04 	str.w	r3, [r9], #4
 8007eca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ece:	d8e2      	bhi.n	8007e96 <__multiply+0xb2>
 8007ed0:	9b01      	ldr	r3, [sp, #4]
 8007ed2:	f845 c003 	str.w	ip, [r5, r3]
 8007ed6:	9b03      	ldr	r3, [sp, #12]
 8007ed8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007edc:	3104      	adds	r1, #4
 8007ede:	f1b9 0f00 	cmp.w	r9, #0
 8007ee2:	d021      	beq.n	8007f28 <__multiply+0x144>
 8007ee4:	682b      	ldr	r3, [r5, #0]
 8007ee6:	f104 0c14 	add.w	ip, r4, #20
 8007eea:	46ae      	mov	lr, r5
 8007eec:	f04f 0a00 	mov.w	sl, #0
 8007ef0:	f8bc b000 	ldrh.w	fp, [ip]
 8007ef4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007ef8:	fb09 770b 	mla	r7, r9, fp, r7
 8007efc:	4457      	add	r7, sl
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f04:	f84e 3b04 	str.w	r3, [lr], #4
 8007f08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f10:	f8be 3000 	ldrh.w	r3, [lr]
 8007f14:	fb09 330a 	mla	r3, r9, sl, r3
 8007f18:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007f1c:	4562      	cmp	r2, ip
 8007f1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f22:	d8e5      	bhi.n	8007ef0 <__multiply+0x10c>
 8007f24:	9f01      	ldr	r7, [sp, #4]
 8007f26:	51eb      	str	r3, [r5, r7]
 8007f28:	3504      	adds	r5, #4
 8007f2a:	e799      	b.n	8007e60 <__multiply+0x7c>
 8007f2c:	3e01      	subs	r6, #1
 8007f2e:	e79b      	b.n	8007e68 <__multiply+0x84>
 8007f30:	08008ec8 	.word	0x08008ec8
 8007f34:	08008ed9 	.word	0x08008ed9

08007f38 <__pow5mult>:
 8007f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f3c:	4615      	mov	r5, r2
 8007f3e:	f012 0203 	ands.w	r2, r2, #3
 8007f42:	4607      	mov	r7, r0
 8007f44:	460e      	mov	r6, r1
 8007f46:	d007      	beq.n	8007f58 <__pow5mult+0x20>
 8007f48:	4c25      	ldr	r4, [pc, #148]	@ (8007fe0 <__pow5mult+0xa8>)
 8007f4a:	3a01      	subs	r2, #1
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f52:	f7ff fe9f 	bl	8007c94 <__multadd>
 8007f56:	4606      	mov	r6, r0
 8007f58:	10ad      	asrs	r5, r5, #2
 8007f5a:	d03d      	beq.n	8007fd8 <__pow5mult+0xa0>
 8007f5c:	69fc      	ldr	r4, [r7, #28]
 8007f5e:	b97c      	cbnz	r4, 8007f80 <__pow5mult+0x48>
 8007f60:	2010      	movs	r0, #16
 8007f62:	f7ff fd7f 	bl	8007a64 <malloc>
 8007f66:	4602      	mov	r2, r0
 8007f68:	61f8      	str	r0, [r7, #28]
 8007f6a:	b928      	cbnz	r0, 8007f78 <__pow5mult+0x40>
 8007f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007fe4 <__pow5mult+0xac>)
 8007f6e:	481e      	ldr	r0, [pc, #120]	@ (8007fe8 <__pow5mult+0xb0>)
 8007f70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007f74:	f000 fbea 	bl	800874c <__assert_func>
 8007f78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f7c:	6004      	str	r4, [r0, #0]
 8007f7e:	60c4      	str	r4, [r0, #12]
 8007f80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007f84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f88:	b94c      	cbnz	r4, 8007f9e <__pow5mult+0x66>
 8007f8a:	f240 2171 	movw	r1, #625	@ 0x271
 8007f8e:	4638      	mov	r0, r7
 8007f90:	f7ff ff12 	bl	8007db8 <__i2b>
 8007f94:	2300      	movs	r3, #0
 8007f96:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	6003      	str	r3, [r0, #0]
 8007f9e:	f04f 0900 	mov.w	r9, #0
 8007fa2:	07eb      	lsls	r3, r5, #31
 8007fa4:	d50a      	bpl.n	8007fbc <__pow5mult+0x84>
 8007fa6:	4631      	mov	r1, r6
 8007fa8:	4622      	mov	r2, r4
 8007faa:	4638      	mov	r0, r7
 8007fac:	f7ff ff1a 	bl	8007de4 <__multiply>
 8007fb0:	4631      	mov	r1, r6
 8007fb2:	4680      	mov	r8, r0
 8007fb4:	4638      	mov	r0, r7
 8007fb6:	f7ff fe4b 	bl	8007c50 <_Bfree>
 8007fba:	4646      	mov	r6, r8
 8007fbc:	106d      	asrs	r5, r5, #1
 8007fbe:	d00b      	beq.n	8007fd8 <__pow5mult+0xa0>
 8007fc0:	6820      	ldr	r0, [r4, #0]
 8007fc2:	b938      	cbnz	r0, 8007fd4 <__pow5mult+0x9c>
 8007fc4:	4622      	mov	r2, r4
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	4638      	mov	r0, r7
 8007fca:	f7ff ff0b 	bl	8007de4 <__multiply>
 8007fce:	6020      	str	r0, [r4, #0]
 8007fd0:	f8c0 9000 	str.w	r9, [r0]
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	e7e4      	b.n	8007fa2 <__pow5mult+0x6a>
 8007fd8:	4630      	mov	r0, r6
 8007fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fde:	bf00      	nop
 8007fe0:	08008f34 	.word	0x08008f34
 8007fe4:	08008e59 	.word	0x08008e59
 8007fe8:	08008ed9 	.word	0x08008ed9

08007fec <__lshift>:
 8007fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff0:	460c      	mov	r4, r1
 8007ff2:	6849      	ldr	r1, [r1, #4]
 8007ff4:	6923      	ldr	r3, [r4, #16]
 8007ff6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ffa:	68a3      	ldr	r3, [r4, #8]
 8007ffc:	4607      	mov	r7, r0
 8007ffe:	4691      	mov	r9, r2
 8008000:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008004:	f108 0601 	add.w	r6, r8, #1
 8008008:	42b3      	cmp	r3, r6
 800800a:	db0b      	blt.n	8008024 <__lshift+0x38>
 800800c:	4638      	mov	r0, r7
 800800e:	f7ff fddf 	bl	8007bd0 <_Balloc>
 8008012:	4605      	mov	r5, r0
 8008014:	b948      	cbnz	r0, 800802a <__lshift+0x3e>
 8008016:	4602      	mov	r2, r0
 8008018:	4b28      	ldr	r3, [pc, #160]	@ (80080bc <__lshift+0xd0>)
 800801a:	4829      	ldr	r0, [pc, #164]	@ (80080c0 <__lshift+0xd4>)
 800801c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008020:	f000 fb94 	bl	800874c <__assert_func>
 8008024:	3101      	adds	r1, #1
 8008026:	005b      	lsls	r3, r3, #1
 8008028:	e7ee      	b.n	8008008 <__lshift+0x1c>
 800802a:	2300      	movs	r3, #0
 800802c:	f100 0114 	add.w	r1, r0, #20
 8008030:	f100 0210 	add.w	r2, r0, #16
 8008034:	4618      	mov	r0, r3
 8008036:	4553      	cmp	r3, sl
 8008038:	db33      	blt.n	80080a2 <__lshift+0xb6>
 800803a:	6920      	ldr	r0, [r4, #16]
 800803c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008040:	f104 0314 	add.w	r3, r4, #20
 8008044:	f019 091f 	ands.w	r9, r9, #31
 8008048:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800804c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008050:	d02b      	beq.n	80080aa <__lshift+0xbe>
 8008052:	f1c9 0e20 	rsb	lr, r9, #32
 8008056:	468a      	mov	sl, r1
 8008058:	2200      	movs	r2, #0
 800805a:	6818      	ldr	r0, [r3, #0]
 800805c:	fa00 f009 	lsl.w	r0, r0, r9
 8008060:	4310      	orrs	r0, r2
 8008062:	f84a 0b04 	str.w	r0, [sl], #4
 8008066:	f853 2b04 	ldr.w	r2, [r3], #4
 800806a:	459c      	cmp	ip, r3
 800806c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008070:	d8f3      	bhi.n	800805a <__lshift+0x6e>
 8008072:	ebac 0304 	sub.w	r3, ip, r4
 8008076:	3b15      	subs	r3, #21
 8008078:	f023 0303 	bic.w	r3, r3, #3
 800807c:	3304      	adds	r3, #4
 800807e:	f104 0015 	add.w	r0, r4, #21
 8008082:	4584      	cmp	ip, r0
 8008084:	bf38      	it	cc
 8008086:	2304      	movcc	r3, #4
 8008088:	50ca      	str	r2, [r1, r3]
 800808a:	b10a      	cbz	r2, 8008090 <__lshift+0xa4>
 800808c:	f108 0602 	add.w	r6, r8, #2
 8008090:	3e01      	subs	r6, #1
 8008092:	4638      	mov	r0, r7
 8008094:	612e      	str	r6, [r5, #16]
 8008096:	4621      	mov	r1, r4
 8008098:	f7ff fdda 	bl	8007c50 <_Bfree>
 800809c:	4628      	mov	r0, r5
 800809e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80080a6:	3301      	adds	r3, #1
 80080a8:	e7c5      	b.n	8008036 <__lshift+0x4a>
 80080aa:	3904      	subs	r1, #4
 80080ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80080b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80080b4:	459c      	cmp	ip, r3
 80080b6:	d8f9      	bhi.n	80080ac <__lshift+0xc0>
 80080b8:	e7ea      	b.n	8008090 <__lshift+0xa4>
 80080ba:	bf00      	nop
 80080bc:	08008ec8 	.word	0x08008ec8
 80080c0:	08008ed9 	.word	0x08008ed9

080080c4 <__mcmp>:
 80080c4:	690a      	ldr	r2, [r1, #16]
 80080c6:	4603      	mov	r3, r0
 80080c8:	6900      	ldr	r0, [r0, #16]
 80080ca:	1a80      	subs	r0, r0, r2
 80080cc:	b530      	push	{r4, r5, lr}
 80080ce:	d10e      	bne.n	80080ee <__mcmp+0x2a>
 80080d0:	3314      	adds	r3, #20
 80080d2:	3114      	adds	r1, #20
 80080d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80080d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80080dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80080e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80080e4:	4295      	cmp	r5, r2
 80080e6:	d003      	beq.n	80080f0 <__mcmp+0x2c>
 80080e8:	d205      	bcs.n	80080f6 <__mcmp+0x32>
 80080ea:	f04f 30ff 	mov.w	r0, #4294967295
 80080ee:	bd30      	pop	{r4, r5, pc}
 80080f0:	42a3      	cmp	r3, r4
 80080f2:	d3f3      	bcc.n	80080dc <__mcmp+0x18>
 80080f4:	e7fb      	b.n	80080ee <__mcmp+0x2a>
 80080f6:	2001      	movs	r0, #1
 80080f8:	e7f9      	b.n	80080ee <__mcmp+0x2a>
	...

080080fc <__mdiff>:
 80080fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008100:	4689      	mov	r9, r1
 8008102:	4606      	mov	r6, r0
 8008104:	4611      	mov	r1, r2
 8008106:	4648      	mov	r0, r9
 8008108:	4614      	mov	r4, r2
 800810a:	f7ff ffdb 	bl	80080c4 <__mcmp>
 800810e:	1e05      	subs	r5, r0, #0
 8008110:	d112      	bne.n	8008138 <__mdiff+0x3c>
 8008112:	4629      	mov	r1, r5
 8008114:	4630      	mov	r0, r6
 8008116:	f7ff fd5b 	bl	8007bd0 <_Balloc>
 800811a:	4602      	mov	r2, r0
 800811c:	b928      	cbnz	r0, 800812a <__mdiff+0x2e>
 800811e:	4b3f      	ldr	r3, [pc, #252]	@ (800821c <__mdiff+0x120>)
 8008120:	f240 2137 	movw	r1, #567	@ 0x237
 8008124:	483e      	ldr	r0, [pc, #248]	@ (8008220 <__mdiff+0x124>)
 8008126:	f000 fb11 	bl	800874c <__assert_func>
 800812a:	2301      	movs	r3, #1
 800812c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008130:	4610      	mov	r0, r2
 8008132:	b003      	add	sp, #12
 8008134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008138:	bfbc      	itt	lt
 800813a:	464b      	movlt	r3, r9
 800813c:	46a1      	movlt	r9, r4
 800813e:	4630      	mov	r0, r6
 8008140:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008144:	bfba      	itte	lt
 8008146:	461c      	movlt	r4, r3
 8008148:	2501      	movlt	r5, #1
 800814a:	2500      	movge	r5, #0
 800814c:	f7ff fd40 	bl	8007bd0 <_Balloc>
 8008150:	4602      	mov	r2, r0
 8008152:	b918      	cbnz	r0, 800815c <__mdiff+0x60>
 8008154:	4b31      	ldr	r3, [pc, #196]	@ (800821c <__mdiff+0x120>)
 8008156:	f240 2145 	movw	r1, #581	@ 0x245
 800815a:	e7e3      	b.n	8008124 <__mdiff+0x28>
 800815c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008160:	6926      	ldr	r6, [r4, #16]
 8008162:	60c5      	str	r5, [r0, #12]
 8008164:	f109 0310 	add.w	r3, r9, #16
 8008168:	f109 0514 	add.w	r5, r9, #20
 800816c:	f104 0e14 	add.w	lr, r4, #20
 8008170:	f100 0b14 	add.w	fp, r0, #20
 8008174:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008178:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800817c:	9301      	str	r3, [sp, #4]
 800817e:	46d9      	mov	r9, fp
 8008180:	f04f 0c00 	mov.w	ip, #0
 8008184:	9b01      	ldr	r3, [sp, #4]
 8008186:	f85e 0b04 	ldr.w	r0, [lr], #4
 800818a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800818e:	9301      	str	r3, [sp, #4]
 8008190:	fa1f f38a 	uxth.w	r3, sl
 8008194:	4619      	mov	r1, r3
 8008196:	b283      	uxth	r3, r0
 8008198:	1acb      	subs	r3, r1, r3
 800819a:	0c00      	lsrs	r0, r0, #16
 800819c:	4463      	add	r3, ip
 800819e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80081a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80081ac:	4576      	cmp	r6, lr
 80081ae:	f849 3b04 	str.w	r3, [r9], #4
 80081b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80081b6:	d8e5      	bhi.n	8008184 <__mdiff+0x88>
 80081b8:	1b33      	subs	r3, r6, r4
 80081ba:	3b15      	subs	r3, #21
 80081bc:	f023 0303 	bic.w	r3, r3, #3
 80081c0:	3415      	adds	r4, #21
 80081c2:	3304      	adds	r3, #4
 80081c4:	42a6      	cmp	r6, r4
 80081c6:	bf38      	it	cc
 80081c8:	2304      	movcc	r3, #4
 80081ca:	441d      	add	r5, r3
 80081cc:	445b      	add	r3, fp
 80081ce:	461e      	mov	r6, r3
 80081d0:	462c      	mov	r4, r5
 80081d2:	4544      	cmp	r4, r8
 80081d4:	d30e      	bcc.n	80081f4 <__mdiff+0xf8>
 80081d6:	f108 0103 	add.w	r1, r8, #3
 80081da:	1b49      	subs	r1, r1, r5
 80081dc:	f021 0103 	bic.w	r1, r1, #3
 80081e0:	3d03      	subs	r5, #3
 80081e2:	45a8      	cmp	r8, r5
 80081e4:	bf38      	it	cc
 80081e6:	2100      	movcc	r1, #0
 80081e8:	440b      	add	r3, r1
 80081ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80081ee:	b191      	cbz	r1, 8008216 <__mdiff+0x11a>
 80081f0:	6117      	str	r7, [r2, #16]
 80081f2:	e79d      	b.n	8008130 <__mdiff+0x34>
 80081f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80081f8:	46e6      	mov	lr, ip
 80081fa:	0c08      	lsrs	r0, r1, #16
 80081fc:	fa1c fc81 	uxtah	ip, ip, r1
 8008200:	4471      	add	r1, lr
 8008202:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008206:	b289      	uxth	r1, r1
 8008208:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800820c:	f846 1b04 	str.w	r1, [r6], #4
 8008210:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008214:	e7dd      	b.n	80081d2 <__mdiff+0xd6>
 8008216:	3f01      	subs	r7, #1
 8008218:	e7e7      	b.n	80081ea <__mdiff+0xee>
 800821a:	bf00      	nop
 800821c:	08008ec8 	.word	0x08008ec8
 8008220:	08008ed9 	.word	0x08008ed9

08008224 <__d2b>:
 8008224:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008228:	460f      	mov	r7, r1
 800822a:	2101      	movs	r1, #1
 800822c:	ec59 8b10 	vmov	r8, r9, d0
 8008230:	4616      	mov	r6, r2
 8008232:	f7ff fccd 	bl	8007bd0 <_Balloc>
 8008236:	4604      	mov	r4, r0
 8008238:	b930      	cbnz	r0, 8008248 <__d2b+0x24>
 800823a:	4602      	mov	r2, r0
 800823c:	4b23      	ldr	r3, [pc, #140]	@ (80082cc <__d2b+0xa8>)
 800823e:	4824      	ldr	r0, [pc, #144]	@ (80082d0 <__d2b+0xac>)
 8008240:	f240 310f 	movw	r1, #783	@ 0x30f
 8008244:	f000 fa82 	bl	800874c <__assert_func>
 8008248:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800824c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008250:	b10d      	cbz	r5, 8008256 <__d2b+0x32>
 8008252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008256:	9301      	str	r3, [sp, #4]
 8008258:	f1b8 0300 	subs.w	r3, r8, #0
 800825c:	d023      	beq.n	80082a6 <__d2b+0x82>
 800825e:	4668      	mov	r0, sp
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	f7ff fd7c 	bl	8007d5e <__lo0bits>
 8008266:	e9dd 1200 	ldrd	r1, r2, [sp]
 800826a:	b1d0      	cbz	r0, 80082a2 <__d2b+0x7e>
 800826c:	f1c0 0320 	rsb	r3, r0, #32
 8008270:	fa02 f303 	lsl.w	r3, r2, r3
 8008274:	430b      	orrs	r3, r1
 8008276:	40c2      	lsrs	r2, r0
 8008278:	6163      	str	r3, [r4, #20]
 800827a:	9201      	str	r2, [sp, #4]
 800827c:	9b01      	ldr	r3, [sp, #4]
 800827e:	61a3      	str	r3, [r4, #24]
 8008280:	2b00      	cmp	r3, #0
 8008282:	bf0c      	ite	eq
 8008284:	2201      	moveq	r2, #1
 8008286:	2202      	movne	r2, #2
 8008288:	6122      	str	r2, [r4, #16]
 800828a:	b1a5      	cbz	r5, 80082b6 <__d2b+0x92>
 800828c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008290:	4405      	add	r5, r0
 8008292:	603d      	str	r5, [r7, #0]
 8008294:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008298:	6030      	str	r0, [r6, #0]
 800829a:	4620      	mov	r0, r4
 800829c:	b003      	add	sp, #12
 800829e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082a2:	6161      	str	r1, [r4, #20]
 80082a4:	e7ea      	b.n	800827c <__d2b+0x58>
 80082a6:	a801      	add	r0, sp, #4
 80082a8:	f7ff fd59 	bl	8007d5e <__lo0bits>
 80082ac:	9b01      	ldr	r3, [sp, #4]
 80082ae:	6163      	str	r3, [r4, #20]
 80082b0:	3020      	adds	r0, #32
 80082b2:	2201      	movs	r2, #1
 80082b4:	e7e8      	b.n	8008288 <__d2b+0x64>
 80082b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80082be:	6038      	str	r0, [r7, #0]
 80082c0:	6918      	ldr	r0, [r3, #16]
 80082c2:	f7ff fd2d 	bl	8007d20 <__hi0bits>
 80082c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082ca:	e7e5      	b.n	8008298 <__d2b+0x74>
 80082cc:	08008ec8 	.word	0x08008ec8
 80082d0:	08008ed9 	.word	0x08008ed9

080082d4 <__ssputs_r>:
 80082d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d8:	688e      	ldr	r6, [r1, #8]
 80082da:	461f      	mov	r7, r3
 80082dc:	42be      	cmp	r6, r7
 80082de:	680b      	ldr	r3, [r1, #0]
 80082e0:	4682      	mov	sl, r0
 80082e2:	460c      	mov	r4, r1
 80082e4:	4690      	mov	r8, r2
 80082e6:	d82d      	bhi.n	8008344 <__ssputs_r+0x70>
 80082e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80082f0:	d026      	beq.n	8008340 <__ssputs_r+0x6c>
 80082f2:	6965      	ldr	r5, [r4, #20]
 80082f4:	6909      	ldr	r1, [r1, #16]
 80082f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082fa:	eba3 0901 	sub.w	r9, r3, r1
 80082fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008302:	1c7b      	adds	r3, r7, #1
 8008304:	444b      	add	r3, r9
 8008306:	106d      	asrs	r5, r5, #1
 8008308:	429d      	cmp	r5, r3
 800830a:	bf38      	it	cc
 800830c:	461d      	movcc	r5, r3
 800830e:	0553      	lsls	r3, r2, #21
 8008310:	d527      	bpl.n	8008362 <__ssputs_r+0x8e>
 8008312:	4629      	mov	r1, r5
 8008314:	f7ff fbd0 	bl	8007ab8 <_malloc_r>
 8008318:	4606      	mov	r6, r0
 800831a:	b360      	cbz	r0, 8008376 <__ssputs_r+0xa2>
 800831c:	6921      	ldr	r1, [r4, #16]
 800831e:	464a      	mov	r2, r9
 8008320:	f000 fa06 	bl	8008730 <memcpy>
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800832a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800832e:	81a3      	strh	r3, [r4, #12]
 8008330:	6126      	str	r6, [r4, #16]
 8008332:	6165      	str	r5, [r4, #20]
 8008334:	444e      	add	r6, r9
 8008336:	eba5 0509 	sub.w	r5, r5, r9
 800833a:	6026      	str	r6, [r4, #0]
 800833c:	60a5      	str	r5, [r4, #8]
 800833e:	463e      	mov	r6, r7
 8008340:	42be      	cmp	r6, r7
 8008342:	d900      	bls.n	8008346 <__ssputs_r+0x72>
 8008344:	463e      	mov	r6, r7
 8008346:	6820      	ldr	r0, [r4, #0]
 8008348:	4632      	mov	r2, r6
 800834a:	4641      	mov	r1, r8
 800834c:	f000 f9c6 	bl	80086dc <memmove>
 8008350:	68a3      	ldr	r3, [r4, #8]
 8008352:	1b9b      	subs	r3, r3, r6
 8008354:	60a3      	str	r3, [r4, #8]
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	4433      	add	r3, r6
 800835a:	6023      	str	r3, [r4, #0]
 800835c:	2000      	movs	r0, #0
 800835e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008362:	462a      	mov	r2, r5
 8008364:	f000 fa36 	bl	80087d4 <_realloc_r>
 8008368:	4606      	mov	r6, r0
 800836a:	2800      	cmp	r0, #0
 800836c:	d1e0      	bne.n	8008330 <__ssputs_r+0x5c>
 800836e:	6921      	ldr	r1, [r4, #16]
 8008370:	4650      	mov	r0, sl
 8008372:	f7ff fb2d 	bl	80079d0 <_free_r>
 8008376:	230c      	movs	r3, #12
 8008378:	f8ca 3000 	str.w	r3, [sl]
 800837c:	89a3      	ldrh	r3, [r4, #12]
 800837e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008382:	81a3      	strh	r3, [r4, #12]
 8008384:	f04f 30ff 	mov.w	r0, #4294967295
 8008388:	e7e9      	b.n	800835e <__ssputs_r+0x8a>
	...

0800838c <_svfiprintf_r>:
 800838c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008390:	4698      	mov	r8, r3
 8008392:	898b      	ldrh	r3, [r1, #12]
 8008394:	061b      	lsls	r3, r3, #24
 8008396:	b09d      	sub	sp, #116	@ 0x74
 8008398:	4607      	mov	r7, r0
 800839a:	460d      	mov	r5, r1
 800839c:	4614      	mov	r4, r2
 800839e:	d510      	bpl.n	80083c2 <_svfiprintf_r+0x36>
 80083a0:	690b      	ldr	r3, [r1, #16]
 80083a2:	b973      	cbnz	r3, 80083c2 <_svfiprintf_r+0x36>
 80083a4:	2140      	movs	r1, #64	@ 0x40
 80083a6:	f7ff fb87 	bl	8007ab8 <_malloc_r>
 80083aa:	6028      	str	r0, [r5, #0]
 80083ac:	6128      	str	r0, [r5, #16]
 80083ae:	b930      	cbnz	r0, 80083be <_svfiprintf_r+0x32>
 80083b0:	230c      	movs	r3, #12
 80083b2:	603b      	str	r3, [r7, #0]
 80083b4:	f04f 30ff 	mov.w	r0, #4294967295
 80083b8:	b01d      	add	sp, #116	@ 0x74
 80083ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083be:	2340      	movs	r3, #64	@ 0x40
 80083c0:	616b      	str	r3, [r5, #20]
 80083c2:	2300      	movs	r3, #0
 80083c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80083c6:	2320      	movs	r3, #32
 80083c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80083d0:	2330      	movs	r3, #48	@ 0x30
 80083d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008570 <_svfiprintf_r+0x1e4>
 80083d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083da:	f04f 0901 	mov.w	r9, #1
 80083de:	4623      	mov	r3, r4
 80083e0:	469a      	mov	sl, r3
 80083e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083e6:	b10a      	cbz	r2, 80083ec <_svfiprintf_r+0x60>
 80083e8:	2a25      	cmp	r2, #37	@ 0x25
 80083ea:	d1f9      	bne.n	80083e0 <_svfiprintf_r+0x54>
 80083ec:	ebba 0b04 	subs.w	fp, sl, r4
 80083f0:	d00b      	beq.n	800840a <_svfiprintf_r+0x7e>
 80083f2:	465b      	mov	r3, fp
 80083f4:	4622      	mov	r2, r4
 80083f6:	4629      	mov	r1, r5
 80083f8:	4638      	mov	r0, r7
 80083fa:	f7ff ff6b 	bl	80082d4 <__ssputs_r>
 80083fe:	3001      	adds	r0, #1
 8008400:	f000 80a7 	beq.w	8008552 <_svfiprintf_r+0x1c6>
 8008404:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008406:	445a      	add	r2, fp
 8008408:	9209      	str	r2, [sp, #36]	@ 0x24
 800840a:	f89a 3000 	ldrb.w	r3, [sl]
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 809f 	beq.w	8008552 <_svfiprintf_r+0x1c6>
 8008414:	2300      	movs	r3, #0
 8008416:	f04f 32ff 	mov.w	r2, #4294967295
 800841a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800841e:	f10a 0a01 	add.w	sl, sl, #1
 8008422:	9304      	str	r3, [sp, #16]
 8008424:	9307      	str	r3, [sp, #28]
 8008426:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800842a:	931a      	str	r3, [sp, #104]	@ 0x68
 800842c:	4654      	mov	r4, sl
 800842e:	2205      	movs	r2, #5
 8008430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008434:	484e      	ldr	r0, [pc, #312]	@ (8008570 <_svfiprintf_r+0x1e4>)
 8008436:	f7f7 feeb 	bl	8000210 <memchr>
 800843a:	9a04      	ldr	r2, [sp, #16]
 800843c:	b9d8      	cbnz	r0, 8008476 <_svfiprintf_r+0xea>
 800843e:	06d0      	lsls	r0, r2, #27
 8008440:	bf44      	itt	mi
 8008442:	2320      	movmi	r3, #32
 8008444:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008448:	0711      	lsls	r1, r2, #28
 800844a:	bf44      	itt	mi
 800844c:	232b      	movmi	r3, #43	@ 0x2b
 800844e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008452:	f89a 3000 	ldrb.w	r3, [sl]
 8008456:	2b2a      	cmp	r3, #42	@ 0x2a
 8008458:	d015      	beq.n	8008486 <_svfiprintf_r+0xfa>
 800845a:	9a07      	ldr	r2, [sp, #28]
 800845c:	4654      	mov	r4, sl
 800845e:	2000      	movs	r0, #0
 8008460:	f04f 0c0a 	mov.w	ip, #10
 8008464:	4621      	mov	r1, r4
 8008466:	f811 3b01 	ldrb.w	r3, [r1], #1
 800846a:	3b30      	subs	r3, #48	@ 0x30
 800846c:	2b09      	cmp	r3, #9
 800846e:	d94b      	bls.n	8008508 <_svfiprintf_r+0x17c>
 8008470:	b1b0      	cbz	r0, 80084a0 <_svfiprintf_r+0x114>
 8008472:	9207      	str	r2, [sp, #28]
 8008474:	e014      	b.n	80084a0 <_svfiprintf_r+0x114>
 8008476:	eba0 0308 	sub.w	r3, r0, r8
 800847a:	fa09 f303 	lsl.w	r3, r9, r3
 800847e:	4313      	orrs	r3, r2
 8008480:	9304      	str	r3, [sp, #16]
 8008482:	46a2      	mov	sl, r4
 8008484:	e7d2      	b.n	800842c <_svfiprintf_r+0xa0>
 8008486:	9b03      	ldr	r3, [sp, #12]
 8008488:	1d19      	adds	r1, r3, #4
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	9103      	str	r1, [sp, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	bfbb      	ittet	lt
 8008492:	425b      	neglt	r3, r3
 8008494:	f042 0202 	orrlt.w	r2, r2, #2
 8008498:	9307      	strge	r3, [sp, #28]
 800849a:	9307      	strlt	r3, [sp, #28]
 800849c:	bfb8      	it	lt
 800849e:	9204      	strlt	r2, [sp, #16]
 80084a0:	7823      	ldrb	r3, [r4, #0]
 80084a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80084a4:	d10a      	bne.n	80084bc <_svfiprintf_r+0x130>
 80084a6:	7863      	ldrb	r3, [r4, #1]
 80084a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80084aa:	d132      	bne.n	8008512 <_svfiprintf_r+0x186>
 80084ac:	9b03      	ldr	r3, [sp, #12]
 80084ae:	1d1a      	adds	r2, r3, #4
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	9203      	str	r2, [sp, #12]
 80084b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084b8:	3402      	adds	r4, #2
 80084ba:	9305      	str	r3, [sp, #20]
 80084bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008580 <_svfiprintf_r+0x1f4>
 80084c0:	7821      	ldrb	r1, [r4, #0]
 80084c2:	2203      	movs	r2, #3
 80084c4:	4650      	mov	r0, sl
 80084c6:	f7f7 fea3 	bl	8000210 <memchr>
 80084ca:	b138      	cbz	r0, 80084dc <_svfiprintf_r+0x150>
 80084cc:	9b04      	ldr	r3, [sp, #16]
 80084ce:	eba0 000a 	sub.w	r0, r0, sl
 80084d2:	2240      	movs	r2, #64	@ 0x40
 80084d4:	4082      	lsls	r2, r0
 80084d6:	4313      	orrs	r3, r2
 80084d8:	3401      	adds	r4, #1
 80084da:	9304      	str	r3, [sp, #16]
 80084dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e0:	4824      	ldr	r0, [pc, #144]	@ (8008574 <_svfiprintf_r+0x1e8>)
 80084e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084e6:	2206      	movs	r2, #6
 80084e8:	f7f7 fe92 	bl	8000210 <memchr>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	d036      	beq.n	800855e <_svfiprintf_r+0x1d2>
 80084f0:	4b21      	ldr	r3, [pc, #132]	@ (8008578 <_svfiprintf_r+0x1ec>)
 80084f2:	bb1b      	cbnz	r3, 800853c <_svfiprintf_r+0x1b0>
 80084f4:	9b03      	ldr	r3, [sp, #12]
 80084f6:	3307      	adds	r3, #7
 80084f8:	f023 0307 	bic.w	r3, r3, #7
 80084fc:	3308      	adds	r3, #8
 80084fe:	9303      	str	r3, [sp, #12]
 8008500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008502:	4433      	add	r3, r6
 8008504:	9309      	str	r3, [sp, #36]	@ 0x24
 8008506:	e76a      	b.n	80083de <_svfiprintf_r+0x52>
 8008508:	fb0c 3202 	mla	r2, ip, r2, r3
 800850c:	460c      	mov	r4, r1
 800850e:	2001      	movs	r0, #1
 8008510:	e7a8      	b.n	8008464 <_svfiprintf_r+0xd8>
 8008512:	2300      	movs	r3, #0
 8008514:	3401      	adds	r4, #1
 8008516:	9305      	str	r3, [sp, #20]
 8008518:	4619      	mov	r1, r3
 800851a:	f04f 0c0a 	mov.w	ip, #10
 800851e:	4620      	mov	r0, r4
 8008520:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008524:	3a30      	subs	r2, #48	@ 0x30
 8008526:	2a09      	cmp	r2, #9
 8008528:	d903      	bls.n	8008532 <_svfiprintf_r+0x1a6>
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0c6      	beq.n	80084bc <_svfiprintf_r+0x130>
 800852e:	9105      	str	r1, [sp, #20]
 8008530:	e7c4      	b.n	80084bc <_svfiprintf_r+0x130>
 8008532:	fb0c 2101 	mla	r1, ip, r1, r2
 8008536:	4604      	mov	r4, r0
 8008538:	2301      	movs	r3, #1
 800853a:	e7f0      	b.n	800851e <_svfiprintf_r+0x192>
 800853c:	ab03      	add	r3, sp, #12
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	462a      	mov	r2, r5
 8008542:	4b0e      	ldr	r3, [pc, #56]	@ (800857c <_svfiprintf_r+0x1f0>)
 8008544:	a904      	add	r1, sp, #16
 8008546:	4638      	mov	r0, r7
 8008548:	f7fd fe98 	bl	800627c <_printf_float>
 800854c:	1c42      	adds	r2, r0, #1
 800854e:	4606      	mov	r6, r0
 8008550:	d1d6      	bne.n	8008500 <_svfiprintf_r+0x174>
 8008552:	89ab      	ldrh	r3, [r5, #12]
 8008554:	065b      	lsls	r3, r3, #25
 8008556:	f53f af2d 	bmi.w	80083b4 <_svfiprintf_r+0x28>
 800855a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800855c:	e72c      	b.n	80083b8 <_svfiprintf_r+0x2c>
 800855e:	ab03      	add	r3, sp, #12
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	462a      	mov	r2, r5
 8008564:	4b05      	ldr	r3, [pc, #20]	@ (800857c <_svfiprintf_r+0x1f0>)
 8008566:	a904      	add	r1, sp, #16
 8008568:	4638      	mov	r0, r7
 800856a:	f7fe f91f 	bl	80067ac <_printf_i>
 800856e:	e7ed      	b.n	800854c <_svfiprintf_r+0x1c0>
 8008570:	08009030 	.word	0x08009030
 8008574:	0800903a 	.word	0x0800903a
 8008578:	0800627d 	.word	0x0800627d
 800857c:	080082d5 	.word	0x080082d5
 8008580:	08009036 	.word	0x08009036

08008584 <__sflush_r>:
 8008584:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800858c:	0716      	lsls	r6, r2, #28
 800858e:	4605      	mov	r5, r0
 8008590:	460c      	mov	r4, r1
 8008592:	d454      	bmi.n	800863e <__sflush_r+0xba>
 8008594:	684b      	ldr	r3, [r1, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	dc02      	bgt.n	80085a0 <__sflush_r+0x1c>
 800859a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800859c:	2b00      	cmp	r3, #0
 800859e:	dd48      	ble.n	8008632 <__sflush_r+0xae>
 80085a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085a2:	2e00      	cmp	r6, #0
 80085a4:	d045      	beq.n	8008632 <__sflush_r+0xae>
 80085a6:	2300      	movs	r3, #0
 80085a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80085ac:	682f      	ldr	r7, [r5, #0]
 80085ae:	6a21      	ldr	r1, [r4, #32]
 80085b0:	602b      	str	r3, [r5, #0]
 80085b2:	d030      	beq.n	8008616 <__sflush_r+0x92>
 80085b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085b6:	89a3      	ldrh	r3, [r4, #12]
 80085b8:	0759      	lsls	r1, r3, #29
 80085ba:	d505      	bpl.n	80085c8 <__sflush_r+0x44>
 80085bc:	6863      	ldr	r3, [r4, #4]
 80085be:	1ad2      	subs	r2, r2, r3
 80085c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80085c2:	b10b      	cbz	r3, 80085c8 <__sflush_r+0x44>
 80085c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80085c6:	1ad2      	subs	r2, r2, r3
 80085c8:	2300      	movs	r3, #0
 80085ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085cc:	6a21      	ldr	r1, [r4, #32]
 80085ce:	4628      	mov	r0, r5
 80085d0:	47b0      	blx	r6
 80085d2:	1c43      	adds	r3, r0, #1
 80085d4:	89a3      	ldrh	r3, [r4, #12]
 80085d6:	d106      	bne.n	80085e6 <__sflush_r+0x62>
 80085d8:	6829      	ldr	r1, [r5, #0]
 80085da:	291d      	cmp	r1, #29
 80085dc:	d82b      	bhi.n	8008636 <__sflush_r+0xb2>
 80085de:	4a2a      	ldr	r2, [pc, #168]	@ (8008688 <__sflush_r+0x104>)
 80085e0:	410a      	asrs	r2, r1
 80085e2:	07d6      	lsls	r6, r2, #31
 80085e4:	d427      	bmi.n	8008636 <__sflush_r+0xb2>
 80085e6:	2200      	movs	r2, #0
 80085e8:	6062      	str	r2, [r4, #4]
 80085ea:	04d9      	lsls	r1, r3, #19
 80085ec:	6922      	ldr	r2, [r4, #16]
 80085ee:	6022      	str	r2, [r4, #0]
 80085f0:	d504      	bpl.n	80085fc <__sflush_r+0x78>
 80085f2:	1c42      	adds	r2, r0, #1
 80085f4:	d101      	bne.n	80085fa <__sflush_r+0x76>
 80085f6:	682b      	ldr	r3, [r5, #0]
 80085f8:	b903      	cbnz	r3, 80085fc <__sflush_r+0x78>
 80085fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80085fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085fe:	602f      	str	r7, [r5, #0]
 8008600:	b1b9      	cbz	r1, 8008632 <__sflush_r+0xae>
 8008602:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008606:	4299      	cmp	r1, r3
 8008608:	d002      	beq.n	8008610 <__sflush_r+0x8c>
 800860a:	4628      	mov	r0, r5
 800860c:	f7ff f9e0 	bl	80079d0 <_free_r>
 8008610:	2300      	movs	r3, #0
 8008612:	6363      	str	r3, [r4, #52]	@ 0x34
 8008614:	e00d      	b.n	8008632 <__sflush_r+0xae>
 8008616:	2301      	movs	r3, #1
 8008618:	4628      	mov	r0, r5
 800861a:	47b0      	blx	r6
 800861c:	4602      	mov	r2, r0
 800861e:	1c50      	adds	r0, r2, #1
 8008620:	d1c9      	bne.n	80085b6 <__sflush_r+0x32>
 8008622:	682b      	ldr	r3, [r5, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d0c6      	beq.n	80085b6 <__sflush_r+0x32>
 8008628:	2b1d      	cmp	r3, #29
 800862a:	d001      	beq.n	8008630 <__sflush_r+0xac>
 800862c:	2b16      	cmp	r3, #22
 800862e:	d11e      	bne.n	800866e <__sflush_r+0xea>
 8008630:	602f      	str	r7, [r5, #0]
 8008632:	2000      	movs	r0, #0
 8008634:	e022      	b.n	800867c <__sflush_r+0xf8>
 8008636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800863a:	b21b      	sxth	r3, r3
 800863c:	e01b      	b.n	8008676 <__sflush_r+0xf2>
 800863e:	690f      	ldr	r7, [r1, #16]
 8008640:	2f00      	cmp	r7, #0
 8008642:	d0f6      	beq.n	8008632 <__sflush_r+0xae>
 8008644:	0793      	lsls	r3, r2, #30
 8008646:	680e      	ldr	r6, [r1, #0]
 8008648:	bf08      	it	eq
 800864a:	694b      	ldreq	r3, [r1, #20]
 800864c:	600f      	str	r7, [r1, #0]
 800864e:	bf18      	it	ne
 8008650:	2300      	movne	r3, #0
 8008652:	eba6 0807 	sub.w	r8, r6, r7
 8008656:	608b      	str	r3, [r1, #8]
 8008658:	f1b8 0f00 	cmp.w	r8, #0
 800865c:	dde9      	ble.n	8008632 <__sflush_r+0xae>
 800865e:	6a21      	ldr	r1, [r4, #32]
 8008660:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008662:	4643      	mov	r3, r8
 8008664:	463a      	mov	r2, r7
 8008666:	4628      	mov	r0, r5
 8008668:	47b0      	blx	r6
 800866a:	2800      	cmp	r0, #0
 800866c:	dc08      	bgt.n	8008680 <__sflush_r+0xfc>
 800866e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008676:	81a3      	strh	r3, [r4, #12]
 8008678:	f04f 30ff 	mov.w	r0, #4294967295
 800867c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008680:	4407      	add	r7, r0
 8008682:	eba8 0800 	sub.w	r8, r8, r0
 8008686:	e7e7      	b.n	8008658 <__sflush_r+0xd4>
 8008688:	dfbffffe 	.word	0xdfbffffe

0800868c <_fflush_r>:
 800868c:	b538      	push	{r3, r4, r5, lr}
 800868e:	690b      	ldr	r3, [r1, #16]
 8008690:	4605      	mov	r5, r0
 8008692:	460c      	mov	r4, r1
 8008694:	b913      	cbnz	r3, 800869c <_fflush_r+0x10>
 8008696:	2500      	movs	r5, #0
 8008698:	4628      	mov	r0, r5
 800869a:	bd38      	pop	{r3, r4, r5, pc}
 800869c:	b118      	cbz	r0, 80086a6 <_fflush_r+0x1a>
 800869e:	6a03      	ldr	r3, [r0, #32]
 80086a0:	b90b      	cbnz	r3, 80086a6 <_fflush_r+0x1a>
 80086a2:	f7fe fa2f 	bl	8006b04 <__sinit>
 80086a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d0f3      	beq.n	8008696 <_fflush_r+0xa>
 80086ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80086b0:	07d0      	lsls	r0, r2, #31
 80086b2:	d404      	bmi.n	80086be <_fflush_r+0x32>
 80086b4:	0599      	lsls	r1, r3, #22
 80086b6:	d402      	bmi.n	80086be <_fflush_r+0x32>
 80086b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086ba:	f7fe fb3a 	bl	8006d32 <__retarget_lock_acquire_recursive>
 80086be:	4628      	mov	r0, r5
 80086c0:	4621      	mov	r1, r4
 80086c2:	f7ff ff5f 	bl	8008584 <__sflush_r>
 80086c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086c8:	07da      	lsls	r2, r3, #31
 80086ca:	4605      	mov	r5, r0
 80086cc:	d4e4      	bmi.n	8008698 <_fflush_r+0xc>
 80086ce:	89a3      	ldrh	r3, [r4, #12]
 80086d0:	059b      	lsls	r3, r3, #22
 80086d2:	d4e1      	bmi.n	8008698 <_fflush_r+0xc>
 80086d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086d6:	f7fe fb2d 	bl	8006d34 <__retarget_lock_release_recursive>
 80086da:	e7dd      	b.n	8008698 <_fflush_r+0xc>

080086dc <memmove>:
 80086dc:	4288      	cmp	r0, r1
 80086de:	b510      	push	{r4, lr}
 80086e0:	eb01 0402 	add.w	r4, r1, r2
 80086e4:	d902      	bls.n	80086ec <memmove+0x10>
 80086e6:	4284      	cmp	r4, r0
 80086e8:	4623      	mov	r3, r4
 80086ea:	d807      	bhi.n	80086fc <memmove+0x20>
 80086ec:	1e43      	subs	r3, r0, #1
 80086ee:	42a1      	cmp	r1, r4
 80086f0:	d008      	beq.n	8008704 <memmove+0x28>
 80086f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086fa:	e7f8      	b.n	80086ee <memmove+0x12>
 80086fc:	4402      	add	r2, r0
 80086fe:	4601      	mov	r1, r0
 8008700:	428a      	cmp	r2, r1
 8008702:	d100      	bne.n	8008706 <memmove+0x2a>
 8008704:	bd10      	pop	{r4, pc}
 8008706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800870a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800870e:	e7f7      	b.n	8008700 <memmove+0x24>

08008710 <_sbrk_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4d06      	ldr	r5, [pc, #24]	@ (800872c <_sbrk_r+0x1c>)
 8008714:	2300      	movs	r3, #0
 8008716:	4604      	mov	r4, r0
 8008718:	4608      	mov	r0, r1
 800871a:	602b      	str	r3, [r5, #0]
 800871c:	f7f9 f8f0 	bl	8001900 <_sbrk>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	d102      	bne.n	800872a <_sbrk_r+0x1a>
 8008724:	682b      	ldr	r3, [r5, #0]
 8008726:	b103      	cbz	r3, 800872a <_sbrk_r+0x1a>
 8008728:	6023      	str	r3, [r4, #0]
 800872a:	bd38      	pop	{r3, r4, r5, pc}
 800872c:	200003d0 	.word	0x200003d0

08008730 <memcpy>:
 8008730:	440a      	add	r2, r1
 8008732:	4291      	cmp	r1, r2
 8008734:	f100 33ff 	add.w	r3, r0, #4294967295
 8008738:	d100      	bne.n	800873c <memcpy+0xc>
 800873a:	4770      	bx	lr
 800873c:	b510      	push	{r4, lr}
 800873e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008742:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008746:	4291      	cmp	r1, r2
 8008748:	d1f9      	bne.n	800873e <memcpy+0xe>
 800874a:	bd10      	pop	{r4, pc}

0800874c <__assert_func>:
 800874c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800874e:	4614      	mov	r4, r2
 8008750:	461a      	mov	r2, r3
 8008752:	4b09      	ldr	r3, [pc, #36]	@ (8008778 <__assert_func+0x2c>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4605      	mov	r5, r0
 8008758:	68d8      	ldr	r0, [r3, #12]
 800875a:	b954      	cbnz	r4, 8008772 <__assert_func+0x26>
 800875c:	4b07      	ldr	r3, [pc, #28]	@ (800877c <__assert_func+0x30>)
 800875e:	461c      	mov	r4, r3
 8008760:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008764:	9100      	str	r1, [sp, #0]
 8008766:	462b      	mov	r3, r5
 8008768:	4905      	ldr	r1, [pc, #20]	@ (8008780 <__assert_func+0x34>)
 800876a:	f000 f86f 	bl	800884c <fiprintf>
 800876e:	f000 f87f 	bl	8008870 <abort>
 8008772:	4b04      	ldr	r3, [pc, #16]	@ (8008784 <__assert_func+0x38>)
 8008774:	e7f4      	b.n	8008760 <__assert_func+0x14>
 8008776:	bf00      	nop
 8008778:	20000018 	.word	0x20000018
 800877c:	08009086 	.word	0x08009086
 8008780:	08009058 	.word	0x08009058
 8008784:	0800904b 	.word	0x0800904b

08008788 <_calloc_r>:
 8008788:	b570      	push	{r4, r5, r6, lr}
 800878a:	fba1 5402 	umull	r5, r4, r1, r2
 800878e:	b93c      	cbnz	r4, 80087a0 <_calloc_r+0x18>
 8008790:	4629      	mov	r1, r5
 8008792:	f7ff f991 	bl	8007ab8 <_malloc_r>
 8008796:	4606      	mov	r6, r0
 8008798:	b928      	cbnz	r0, 80087a6 <_calloc_r+0x1e>
 800879a:	2600      	movs	r6, #0
 800879c:	4630      	mov	r0, r6
 800879e:	bd70      	pop	{r4, r5, r6, pc}
 80087a0:	220c      	movs	r2, #12
 80087a2:	6002      	str	r2, [r0, #0]
 80087a4:	e7f9      	b.n	800879a <_calloc_r+0x12>
 80087a6:	462a      	mov	r2, r5
 80087a8:	4621      	mov	r1, r4
 80087aa:	f7fe fa44 	bl	8006c36 <memset>
 80087ae:	e7f5      	b.n	800879c <_calloc_r+0x14>

080087b0 <__ascii_mbtowc>:
 80087b0:	b082      	sub	sp, #8
 80087b2:	b901      	cbnz	r1, 80087b6 <__ascii_mbtowc+0x6>
 80087b4:	a901      	add	r1, sp, #4
 80087b6:	b142      	cbz	r2, 80087ca <__ascii_mbtowc+0x1a>
 80087b8:	b14b      	cbz	r3, 80087ce <__ascii_mbtowc+0x1e>
 80087ba:	7813      	ldrb	r3, [r2, #0]
 80087bc:	600b      	str	r3, [r1, #0]
 80087be:	7812      	ldrb	r2, [r2, #0]
 80087c0:	1e10      	subs	r0, r2, #0
 80087c2:	bf18      	it	ne
 80087c4:	2001      	movne	r0, #1
 80087c6:	b002      	add	sp, #8
 80087c8:	4770      	bx	lr
 80087ca:	4610      	mov	r0, r2
 80087cc:	e7fb      	b.n	80087c6 <__ascii_mbtowc+0x16>
 80087ce:	f06f 0001 	mvn.w	r0, #1
 80087d2:	e7f8      	b.n	80087c6 <__ascii_mbtowc+0x16>

080087d4 <_realloc_r>:
 80087d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d8:	4680      	mov	r8, r0
 80087da:	4615      	mov	r5, r2
 80087dc:	460c      	mov	r4, r1
 80087de:	b921      	cbnz	r1, 80087ea <_realloc_r+0x16>
 80087e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087e4:	4611      	mov	r1, r2
 80087e6:	f7ff b967 	b.w	8007ab8 <_malloc_r>
 80087ea:	b92a      	cbnz	r2, 80087f8 <_realloc_r+0x24>
 80087ec:	f7ff f8f0 	bl	80079d0 <_free_r>
 80087f0:	2400      	movs	r4, #0
 80087f2:	4620      	mov	r0, r4
 80087f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f8:	f000 f841 	bl	800887e <_malloc_usable_size_r>
 80087fc:	4285      	cmp	r5, r0
 80087fe:	4606      	mov	r6, r0
 8008800:	d802      	bhi.n	8008808 <_realloc_r+0x34>
 8008802:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008806:	d8f4      	bhi.n	80087f2 <_realloc_r+0x1e>
 8008808:	4629      	mov	r1, r5
 800880a:	4640      	mov	r0, r8
 800880c:	f7ff f954 	bl	8007ab8 <_malloc_r>
 8008810:	4607      	mov	r7, r0
 8008812:	2800      	cmp	r0, #0
 8008814:	d0ec      	beq.n	80087f0 <_realloc_r+0x1c>
 8008816:	42b5      	cmp	r5, r6
 8008818:	462a      	mov	r2, r5
 800881a:	4621      	mov	r1, r4
 800881c:	bf28      	it	cs
 800881e:	4632      	movcs	r2, r6
 8008820:	f7ff ff86 	bl	8008730 <memcpy>
 8008824:	4621      	mov	r1, r4
 8008826:	4640      	mov	r0, r8
 8008828:	f7ff f8d2 	bl	80079d0 <_free_r>
 800882c:	463c      	mov	r4, r7
 800882e:	e7e0      	b.n	80087f2 <_realloc_r+0x1e>

08008830 <__ascii_wctomb>:
 8008830:	4603      	mov	r3, r0
 8008832:	4608      	mov	r0, r1
 8008834:	b141      	cbz	r1, 8008848 <__ascii_wctomb+0x18>
 8008836:	2aff      	cmp	r2, #255	@ 0xff
 8008838:	d904      	bls.n	8008844 <__ascii_wctomb+0x14>
 800883a:	228a      	movs	r2, #138	@ 0x8a
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	f04f 30ff 	mov.w	r0, #4294967295
 8008842:	4770      	bx	lr
 8008844:	700a      	strb	r2, [r1, #0]
 8008846:	2001      	movs	r0, #1
 8008848:	4770      	bx	lr
	...

0800884c <fiprintf>:
 800884c:	b40e      	push	{r1, r2, r3}
 800884e:	b503      	push	{r0, r1, lr}
 8008850:	4601      	mov	r1, r0
 8008852:	ab03      	add	r3, sp, #12
 8008854:	4805      	ldr	r0, [pc, #20]	@ (800886c <fiprintf+0x20>)
 8008856:	f853 2b04 	ldr.w	r2, [r3], #4
 800885a:	6800      	ldr	r0, [r0, #0]
 800885c:	9301      	str	r3, [sp, #4]
 800885e:	f000 f83f 	bl	80088e0 <_vfiprintf_r>
 8008862:	b002      	add	sp, #8
 8008864:	f85d eb04 	ldr.w	lr, [sp], #4
 8008868:	b003      	add	sp, #12
 800886a:	4770      	bx	lr
 800886c:	20000018 	.word	0x20000018

08008870 <abort>:
 8008870:	b508      	push	{r3, lr}
 8008872:	2006      	movs	r0, #6
 8008874:	f000 fa08 	bl	8008c88 <raise>
 8008878:	2001      	movs	r0, #1
 800887a:	f7f8 ffc9 	bl	8001810 <_exit>

0800887e <_malloc_usable_size_r>:
 800887e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008882:	1f18      	subs	r0, r3, #4
 8008884:	2b00      	cmp	r3, #0
 8008886:	bfbc      	itt	lt
 8008888:	580b      	ldrlt	r3, [r1, r0]
 800888a:	18c0      	addlt	r0, r0, r3
 800888c:	4770      	bx	lr

0800888e <__sfputc_r>:
 800888e:	6893      	ldr	r3, [r2, #8]
 8008890:	3b01      	subs	r3, #1
 8008892:	2b00      	cmp	r3, #0
 8008894:	b410      	push	{r4}
 8008896:	6093      	str	r3, [r2, #8]
 8008898:	da08      	bge.n	80088ac <__sfputc_r+0x1e>
 800889a:	6994      	ldr	r4, [r2, #24]
 800889c:	42a3      	cmp	r3, r4
 800889e:	db01      	blt.n	80088a4 <__sfputc_r+0x16>
 80088a0:	290a      	cmp	r1, #10
 80088a2:	d103      	bne.n	80088ac <__sfputc_r+0x1e>
 80088a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088a8:	f000 b932 	b.w	8008b10 <__swbuf_r>
 80088ac:	6813      	ldr	r3, [r2, #0]
 80088ae:	1c58      	adds	r0, r3, #1
 80088b0:	6010      	str	r0, [r2, #0]
 80088b2:	7019      	strb	r1, [r3, #0]
 80088b4:	4608      	mov	r0, r1
 80088b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <__sfputs_r>:
 80088bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088be:	4606      	mov	r6, r0
 80088c0:	460f      	mov	r7, r1
 80088c2:	4614      	mov	r4, r2
 80088c4:	18d5      	adds	r5, r2, r3
 80088c6:	42ac      	cmp	r4, r5
 80088c8:	d101      	bne.n	80088ce <__sfputs_r+0x12>
 80088ca:	2000      	movs	r0, #0
 80088cc:	e007      	b.n	80088de <__sfputs_r+0x22>
 80088ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088d2:	463a      	mov	r2, r7
 80088d4:	4630      	mov	r0, r6
 80088d6:	f7ff ffda 	bl	800888e <__sfputc_r>
 80088da:	1c43      	adds	r3, r0, #1
 80088dc:	d1f3      	bne.n	80088c6 <__sfputs_r+0xa>
 80088de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080088e0 <_vfiprintf_r>:
 80088e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e4:	460d      	mov	r5, r1
 80088e6:	b09d      	sub	sp, #116	@ 0x74
 80088e8:	4614      	mov	r4, r2
 80088ea:	4698      	mov	r8, r3
 80088ec:	4606      	mov	r6, r0
 80088ee:	b118      	cbz	r0, 80088f8 <_vfiprintf_r+0x18>
 80088f0:	6a03      	ldr	r3, [r0, #32]
 80088f2:	b90b      	cbnz	r3, 80088f8 <_vfiprintf_r+0x18>
 80088f4:	f7fe f906 	bl	8006b04 <__sinit>
 80088f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088fa:	07d9      	lsls	r1, r3, #31
 80088fc:	d405      	bmi.n	800890a <_vfiprintf_r+0x2a>
 80088fe:	89ab      	ldrh	r3, [r5, #12]
 8008900:	059a      	lsls	r2, r3, #22
 8008902:	d402      	bmi.n	800890a <_vfiprintf_r+0x2a>
 8008904:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008906:	f7fe fa14 	bl	8006d32 <__retarget_lock_acquire_recursive>
 800890a:	89ab      	ldrh	r3, [r5, #12]
 800890c:	071b      	lsls	r3, r3, #28
 800890e:	d501      	bpl.n	8008914 <_vfiprintf_r+0x34>
 8008910:	692b      	ldr	r3, [r5, #16]
 8008912:	b99b      	cbnz	r3, 800893c <_vfiprintf_r+0x5c>
 8008914:	4629      	mov	r1, r5
 8008916:	4630      	mov	r0, r6
 8008918:	f000 f938 	bl	8008b8c <__swsetup_r>
 800891c:	b170      	cbz	r0, 800893c <_vfiprintf_r+0x5c>
 800891e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008920:	07dc      	lsls	r4, r3, #31
 8008922:	d504      	bpl.n	800892e <_vfiprintf_r+0x4e>
 8008924:	f04f 30ff 	mov.w	r0, #4294967295
 8008928:	b01d      	add	sp, #116	@ 0x74
 800892a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892e:	89ab      	ldrh	r3, [r5, #12]
 8008930:	0598      	lsls	r0, r3, #22
 8008932:	d4f7      	bmi.n	8008924 <_vfiprintf_r+0x44>
 8008934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008936:	f7fe f9fd 	bl	8006d34 <__retarget_lock_release_recursive>
 800893a:	e7f3      	b.n	8008924 <_vfiprintf_r+0x44>
 800893c:	2300      	movs	r3, #0
 800893e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008940:	2320      	movs	r3, #32
 8008942:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008946:	f8cd 800c 	str.w	r8, [sp, #12]
 800894a:	2330      	movs	r3, #48	@ 0x30
 800894c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008afc <_vfiprintf_r+0x21c>
 8008950:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008954:	f04f 0901 	mov.w	r9, #1
 8008958:	4623      	mov	r3, r4
 800895a:	469a      	mov	sl, r3
 800895c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008960:	b10a      	cbz	r2, 8008966 <_vfiprintf_r+0x86>
 8008962:	2a25      	cmp	r2, #37	@ 0x25
 8008964:	d1f9      	bne.n	800895a <_vfiprintf_r+0x7a>
 8008966:	ebba 0b04 	subs.w	fp, sl, r4
 800896a:	d00b      	beq.n	8008984 <_vfiprintf_r+0xa4>
 800896c:	465b      	mov	r3, fp
 800896e:	4622      	mov	r2, r4
 8008970:	4629      	mov	r1, r5
 8008972:	4630      	mov	r0, r6
 8008974:	f7ff ffa2 	bl	80088bc <__sfputs_r>
 8008978:	3001      	adds	r0, #1
 800897a:	f000 80a7 	beq.w	8008acc <_vfiprintf_r+0x1ec>
 800897e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008980:	445a      	add	r2, fp
 8008982:	9209      	str	r2, [sp, #36]	@ 0x24
 8008984:	f89a 3000 	ldrb.w	r3, [sl]
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 809f 	beq.w	8008acc <_vfiprintf_r+0x1ec>
 800898e:	2300      	movs	r3, #0
 8008990:	f04f 32ff 	mov.w	r2, #4294967295
 8008994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008998:	f10a 0a01 	add.w	sl, sl, #1
 800899c:	9304      	str	r3, [sp, #16]
 800899e:	9307      	str	r3, [sp, #28]
 80089a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80089a6:	4654      	mov	r4, sl
 80089a8:	2205      	movs	r2, #5
 80089aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ae:	4853      	ldr	r0, [pc, #332]	@ (8008afc <_vfiprintf_r+0x21c>)
 80089b0:	f7f7 fc2e 	bl	8000210 <memchr>
 80089b4:	9a04      	ldr	r2, [sp, #16]
 80089b6:	b9d8      	cbnz	r0, 80089f0 <_vfiprintf_r+0x110>
 80089b8:	06d1      	lsls	r1, r2, #27
 80089ba:	bf44      	itt	mi
 80089bc:	2320      	movmi	r3, #32
 80089be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089c2:	0713      	lsls	r3, r2, #28
 80089c4:	bf44      	itt	mi
 80089c6:	232b      	movmi	r3, #43	@ 0x2b
 80089c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089cc:	f89a 3000 	ldrb.w	r3, [sl]
 80089d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80089d2:	d015      	beq.n	8008a00 <_vfiprintf_r+0x120>
 80089d4:	9a07      	ldr	r2, [sp, #28]
 80089d6:	4654      	mov	r4, sl
 80089d8:	2000      	movs	r0, #0
 80089da:	f04f 0c0a 	mov.w	ip, #10
 80089de:	4621      	mov	r1, r4
 80089e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089e4:	3b30      	subs	r3, #48	@ 0x30
 80089e6:	2b09      	cmp	r3, #9
 80089e8:	d94b      	bls.n	8008a82 <_vfiprintf_r+0x1a2>
 80089ea:	b1b0      	cbz	r0, 8008a1a <_vfiprintf_r+0x13a>
 80089ec:	9207      	str	r2, [sp, #28]
 80089ee:	e014      	b.n	8008a1a <_vfiprintf_r+0x13a>
 80089f0:	eba0 0308 	sub.w	r3, r0, r8
 80089f4:	fa09 f303 	lsl.w	r3, r9, r3
 80089f8:	4313      	orrs	r3, r2
 80089fa:	9304      	str	r3, [sp, #16]
 80089fc:	46a2      	mov	sl, r4
 80089fe:	e7d2      	b.n	80089a6 <_vfiprintf_r+0xc6>
 8008a00:	9b03      	ldr	r3, [sp, #12]
 8008a02:	1d19      	adds	r1, r3, #4
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	9103      	str	r1, [sp, #12]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	bfbb      	ittet	lt
 8008a0c:	425b      	neglt	r3, r3
 8008a0e:	f042 0202 	orrlt.w	r2, r2, #2
 8008a12:	9307      	strge	r3, [sp, #28]
 8008a14:	9307      	strlt	r3, [sp, #28]
 8008a16:	bfb8      	it	lt
 8008a18:	9204      	strlt	r2, [sp, #16]
 8008a1a:	7823      	ldrb	r3, [r4, #0]
 8008a1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a1e:	d10a      	bne.n	8008a36 <_vfiprintf_r+0x156>
 8008a20:	7863      	ldrb	r3, [r4, #1]
 8008a22:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a24:	d132      	bne.n	8008a8c <_vfiprintf_r+0x1ac>
 8008a26:	9b03      	ldr	r3, [sp, #12]
 8008a28:	1d1a      	adds	r2, r3, #4
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	9203      	str	r2, [sp, #12]
 8008a2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a32:	3402      	adds	r4, #2
 8008a34:	9305      	str	r3, [sp, #20]
 8008a36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008b0c <_vfiprintf_r+0x22c>
 8008a3a:	7821      	ldrb	r1, [r4, #0]
 8008a3c:	2203      	movs	r2, #3
 8008a3e:	4650      	mov	r0, sl
 8008a40:	f7f7 fbe6 	bl	8000210 <memchr>
 8008a44:	b138      	cbz	r0, 8008a56 <_vfiprintf_r+0x176>
 8008a46:	9b04      	ldr	r3, [sp, #16]
 8008a48:	eba0 000a 	sub.w	r0, r0, sl
 8008a4c:	2240      	movs	r2, #64	@ 0x40
 8008a4e:	4082      	lsls	r2, r0
 8008a50:	4313      	orrs	r3, r2
 8008a52:	3401      	adds	r4, #1
 8008a54:	9304      	str	r3, [sp, #16]
 8008a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a5a:	4829      	ldr	r0, [pc, #164]	@ (8008b00 <_vfiprintf_r+0x220>)
 8008a5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a60:	2206      	movs	r2, #6
 8008a62:	f7f7 fbd5 	bl	8000210 <memchr>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d03f      	beq.n	8008aea <_vfiprintf_r+0x20a>
 8008a6a:	4b26      	ldr	r3, [pc, #152]	@ (8008b04 <_vfiprintf_r+0x224>)
 8008a6c:	bb1b      	cbnz	r3, 8008ab6 <_vfiprintf_r+0x1d6>
 8008a6e:	9b03      	ldr	r3, [sp, #12]
 8008a70:	3307      	adds	r3, #7
 8008a72:	f023 0307 	bic.w	r3, r3, #7
 8008a76:	3308      	adds	r3, #8
 8008a78:	9303      	str	r3, [sp, #12]
 8008a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a7c:	443b      	add	r3, r7
 8008a7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a80:	e76a      	b.n	8008958 <_vfiprintf_r+0x78>
 8008a82:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a86:	460c      	mov	r4, r1
 8008a88:	2001      	movs	r0, #1
 8008a8a:	e7a8      	b.n	80089de <_vfiprintf_r+0xfe>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	3401      	adds	r4, #1
 8008a90:	9305      	str	r3, [sp, #20]
 8008a92:	4619      	mov	r1, r3
 8008a94:	f04f 0c0a 	mov.w	ip, #10
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a9e:	3a30      	subs	r2, #48	@ 0x30
 8008aa0:	2a09      	cmp	r2, #9
 8008aa2:	d903      	bls.n	8008aac <_vfiprintf_r+0x1cc>
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d0c6      	beq.n	8008a36 <_vfiprintf_r+0x156>
 8008aa8:	9105      	str	r1, [sp, #20]
 8008aaa:	e7c4      	b.n	8008a36 <_vfiprintf_r+0x156>
 8008aac:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e7f0      	b.n	8008a98 <_vfiprintf_r+0x1b8>
 8008ab6:	ab03      	add	r3, sp, #12
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	462a      	mov	r2, r5
 8008abc:	4b12      	ldr	r3, [pc, #72]	@ (8008b08 <_vfiprintf_r+0x228>)
 8008abe:	a904      	add	r1, sp, #16
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	f7fd fbdb 	bl	800627c <_printf_float>
 8008ac6:	4607      	mov	r7, r0
 8008ac8:	1c78      	adds	r0, r7, #1
 8008aca:	d1d6      	bne.n	8008a7a <_vfiprintf_r+0x19a>
 8008acc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ace:	07d9      	lsls	r1, r3, #31
 8008ad0:	d405      	bmi.n	8008ade <_vfiprintf_r+0x1fe>
 8008ad2:	89ab      	ldrh	r3, [r5, #12]
 8008ad4:	059a      	lsls	r2, r3, #22
 8008ad6:	d402      	bmi.n	8008ade <_vfiprintf_r+0x1fe>
 8008ad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ada:	f7fe f92b 	bl	8006d34 <__retarget_lock_release_recursive>
 8008ade:	89ab      	ldrh	r3, [r5, #12]
 8008ae0:	065b      	lsls	r3, r3, #25
 8008ae2:	f53f af1f 	bmi.w	8008924 <_vfiprintf_r+0x44>
 8008ae6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ae8:	e71e      	b.n	8008928 <_vfiprintf_r+0x48>
 8008aea:	ab03      	add	r3, sp, #12
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	462a      	mov	r2, r5
 8008af0:	4b05      	ldr	r3, [pc, #20]	@ (8008b08 <_vfiprintf_r+0x228>)
 8008af2:	a904      	add	r1, sp, #16
 8008af4:	4630      	mov	r0, r6
 8008af6:	f7fd fe59 	bl	80067ac <_printf_i>
 8008afa:	e7e4      	b.n	8008ac6 <_vfiprintf_r+0x1e6>
 8008afc:	08009030 	.word	0x08009030
 8008b00:	0800903a 	.word	0x0800903a
 8008b04:	0800627d 	.word	0x0800627d
 8008b08:	080088bd 	.word	0x080088bd
 8008b0c:	08009036 	.word	0x08009036

08008b10 <__swbuf_r>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	460e      	mov	r6, r1
 8008b14:	4614      	mov	r4, r2
 8008b16:	4605      	mov	r5, r0
 8008b18:	b118      	cbz	r0, 8008b22 <__swbuf_r+0x12>
 8008b1a:	6a03      	ldr	r3, [r0, #32]
 8008b1c:	b90b      	cbnz	r3, 8008b22 <__swbuf_r+0x12>
 8008b1e:	f7fd fff1 	bl	8006b04 <__sinit>
 8008b22:	69a3      	ldr	r3, [r4, #24]
 8008b24:	60a3      	str	r3, [r4, #8]
 8008b26:	89a3      	ldrh	r3, [r4, #12]
 8008b28:	071a      	lsls	r2, r3, #28
 8008b2a:	d501      	bpl.n	8008b30 <__swbuf_r+0x20>
 8008b2c:	6923      	ldr	r3, [r4, #16]
 8008b2e:	b943      	cbnz	r3, 8008b42 <__swbuf_r+0x32>
 8008b30:	4621      	mov	r1, r4
 8008b32:	4628      	mov	r0, r5
 8008b34:	f000 f82a 	bl	8008b8c <__swsetup_r>
 8008b38:	b118      	cbz	r0, 8008b42 <__swbuf_r+0x32>
 8008b3a:	f04f 37ff 	mov.w	r7, #4294967295
 8008b3e:	4638      	mov	r0, r7
 8008b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	6922      	ldr	r2, [r4, #16]
 8008b46:	1a98      	subs	r0, r3, r2
 8008b48:	6963      	ldr	r3, [r4, #20]
 8008b4a:	b2f6      	uxtb	r6, r6
 8008b4c:	4283      	cmp	r3, r0
 8008b4e:	4637      	mov	r7, r6
 8008b50:	dc05      	bgt.n	8008b5e <__swbuf_r+0x4e>
 8008b52:	4621      	mov	r1, r4
 8008b54:	4628      	mov	r0, r5
 8008b56:	f7ff fd99 	bl	800868c <_fflush_r>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d1ed      	bne.n	8008b3a <__swbuf_r+0x2a>
 8008b5e:	68a3      	ldr	r3, [r4, #8]
 8008b60:	3b01      	subs	r3, #1
 8008b62:	60a3      	str	r3, [r4, #8]
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	6022      	str	r2, [r4, #0]
 8008b6a:	701e      	strb	r6, [r3, #0]
 8008b6c:	6962      	ldr	r2, [r4, #20]
 8008b6e:	1c43      	adds	r3, r0, #1
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d004      	beq.n	8008b7e <__swbuf_r+0x6e>
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	07db      	lsls	r3, r3, #31
 8008b78:	d5e1      	bpl.n	8008b3e <__swbuf_r+0x2e>
 8008b7a:	2e0a      	cmp	r6, #10
 8008b7c:	d1df      	bne.n	8008b3e <__swbuf_r+0x2e>
 8008b7e:	4621      	mov	r1, r4
 8008b80:	4628      	mov	r0, r5
 8008b82:	f7ff fd83 	bl	800868c <_fflush_r>
 8008b86:	2800      	cmp	r0, #0
 8008b88:	d0d9      	beq.n	8008b3e <__swbuf_r+0x2e>
 8008b8a:	e7d6      	b.n	8008b3a <__swbuf_r+0x2a>

08008b8c <__swsetup_r>:
 8008b8c:	b538      	push	{r3, r4, r5, lr}
 8008b8e:	4b29      	ldr	r3, [pc, #164]	@ (8008c34 <__swsetup_r+0xa8>)
 8008b90:	4605      	mov	r5, r0
 8008b92:	6818      	ldr	r0, [r3, #0]
 8008b94:	460c      	mov	r4, r1
 8008b96:	b118      	cbz	r0, 8008ba0 <__swsetup_r+0x14>
 8008b98:	6a03      	ldr	r3, [r0, #32]
 8008b9a:	b90b      	cbnz	r3, 8008ba0 <__swsetup_r+0x14>
 8008b9c:	f7fd ffb2 	bl	8006b04 <__sinit>
 8008ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ba4:	0719      	lsls	r1, r3, #28
 8008ba6:	d422      	bmi.n	8008bee <__swsetup_r+0x62>
 8008ba8:	06da      	lsls	r2, r3, #27
 8008baa:	d407      	bmi.n	8008bbc <__swsetup_r+0x30>
 8008bac:	2209      	movs	r2, #9
 8008bae:	602a      	str	r2, [r5, #0]
 8008bb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bb4:	81a3      	strh	r3, [r4, #12]
 8008bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bba:	e033      	b.n	8008c24 <__swsetup_r+0x98>
 8008bbc:	0758      	lsls	r0, r3, #29
 8008bbe:	d512      	bpl.n	8008be6 <__swsetup_r+0x5a>
 8008bc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008bc2:	b141      	cbz	r1, 8008bd6 <__swsetup_r+0x4a>
 8008bc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bc8:	4299      	cmp	r1, r3
 8008bca:	d002      	beq.n	8008bd2 <__swsetup_r+0x46>
 8008bcc:	4628      	mov	r0, r5
 8008bce:	f7fe feff 	bl	80079d0 <_free_r>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008bdc:	81a3      	strh	r3, [r4, #12]
 8008bde:	2300      	movs	r3, #0
 8008be0:	6063      	str	r3, [r4, #4]
 8008be2:	6923      	ldr	r3, [r4, #16]
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	89a3      	ldrh	r3, [r4, #12]
 8008be8:	f043 0308 	orr.w	r3, r3, #8
 8008bec:	81a3      	strh	r3, [r4, #12]
 8008bee:	6923      	ldr	r3, [r4, #16]
 8008bf0:	b94b      	cbnz	r3, 8008c06 <__swsetup_r+0x7a>
 8008bf2:	89a3      	ldrh	r3, [r4, #12]
 8008bf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bfc:	d003      	beq.n	8008c06 <__swsetup_r+0x7a>
 8008bfe:	4621      	mov	r1, r4
 8008c00:	4628      	mov	r0, r5
 8008c02:	f000 f883 	bl	8008d0c <__smakebuf_r>
 8008c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c0a:	f013 0201 	ands.w	r2, r3, #1
 8008c0e:	d00a      	beq.n	8008c26 <__swsetup_r+0x9a>
 8008c10:	2200      	movs	r2, #0
 8008c12:	60a2      	str	r2, [r4, #8]
 8008c14:	6962      	ldr	r2, [r4, #20]
 8008c16:	4252      	negs	r2, r2
 8008c18:	61a2      	str	r2, [r4, #24]
 8008c1a:	6922      	ldr	r2, [r4, #16]
 8008c1c:	b942      	cbnz	r2, 8008c30 <__swsetup_r+0xa4>
 8008c1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c22:	d1c5      	bne.n	8008bb0 <__swsetup_r+0x24>
 8008c24:	bd38      	pop	{r3, r4, r5, pc}
 8008c26:	0799      	lsls	r1, r3, #30
 8008c28:	bf58      	it	pl
 8008c2a:	6962      	ldrpl	r2, [r4, #20]
 8008c2c:	60a2      	str	r2, [r4, #8]
 8008c2e:	e7f4      	b.n	8008c1a <__swsetup_r+0x8e>
 8008c30:	2000      	movs	r0, #0
 8008c32:	e7f7      	b.n	8008c24 <__swsetup_r+0x98>
 8008c34:	20000018 	.word	0x20000018

08008c38 <_raise_r>:
 8008c38:	291f      	cmp	r1, #31
 8008c3a:	b538      	push	{r3, r4, r5, lr}
 8008c3c:	4605      	mov	r5, r0
 8008c3e:	460c      	mov	r4, r1
 8008c40:	d904      	bls.n	8008c4c <_raise_r+0x14>
 8008c42:	2316      	movs	r3, #22
 8008c44:	6003      	str	r3, [r0, #0]
 8008c46:	f04f 30ff 	mov.w	r0, #4294967295
 8008c4a:	bd38      	pop	{r3, r4, r5, pc}
 8008c4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c4e:	b112      	cbz	r2, 8008c56 <_raise_r+0x1e>
 8008c50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c54:	b94b      	cbnz	r3, 8008c6a <_raise_r+0x32>
 8008c56:	4628      	mov	r0, r5
 8008c58:	f000 f830 	bl	8008cbc <_getpid_r>
 8008c5c:	4622      	mov	r2, r4
 8008c5e:	4601      	mov	r1, r0
 8008c60:	4628      	mov	r0, r5
 8008c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c66:	f000 b817 	b.w	8008c98 <_kill_r>
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d00a      	beq.n	8008c84 <_raise_r+0x4c>
 8008c6e:	1c59      	adds	r1, r3, #1
 8008c70:	d103      	bne.n	8008c7a <_raise_r+0x42>
 8008c72:	2316      	movs	r3, #22
 8008c74:	6003      	str	r3, [r0, #0]
 8008c76:	2001      	movs	r0, #1
 8008c78:	e7e7      	b.n	8008c4a <_raise_r+0x12>
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008c80:	4620      	mov	r0, r4
 8008c82:	4798      	blx	r3
 8008c84:	2000      	movs	r0, #0
 8008c86:	e7e0      	b.n	8008c4a <_raise_r+0x12>

08008c88 <raise>:
 8008c88:	4b02      	ldr	r3, [pc, #8]	@ (8008c94 <raise+0xc>)
 8008c8a:	4601      	mov	r1, r0
 8008c8c:	6818      	ldr	r0, [r3, #0]
 8008c8e:	f7ff bfd3 	b.w	8008c38 <_raise_r>
 8008c92:	bf00      	nop
 8008c94:	20000018 	.word	0x20000018

08008c98 <_kill_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4d07      	ldr	r5, [pc, #28]	@ (8008cb8 <_kill_r+0x20>)
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	4608      	mov	r0, r1
 8008ca2:	4611      	mov	r1, r2
 8008ca4:	602b      	str	r3, [r5, #0]
 8008ca6:	f7f8 fda3 	bl	80017f0 <_kill>
 8008caa:	1c43      	adds	r3, r0, #1
 8008cac:	d102      	bne.n	8008cb4 <_kill_r+0x1c>
 8008cae:	682b      	ldr	r3, [r5, #0]
 8008cb0:	b103      	cbz	r3, 8008cb4 <_kill_r+0x1c>
 8008cb2:	6023      	str	r3, [r4, #0]
 8008cb4:	bd38      	pop	{r3, r4, r5, pc}
 8008cb6:	bf00      	nop
 8008cb8:	200003d0 	.word	0x200003d0

08008cbc <_getpid_r>:
 8008cbc:	f7f8 bd90 	b.w	80017e0 <_getpid>

08008cc0 <__swhatbuf_r>:
 8008cc0:	b570      	push	{r4, r5, r6, lr}
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc8:	2900      	cmp	r1, #0
 8008cca:	b096      	sub	sp, #88	@ 0x58
 8008ccc:	4615      	mov	r5, r2
 8008cce:	461e      	mov	r6, r3
 8008cd0:	da0d      	bge.n	8008cee <__swhatbuf_r+0x2e>
 8008cd2:	89a3      	ldrh	r3, [r4, #12]
 8008cd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008cd8:	f04f 0100 	mov.w	r1, #0
 8008cdc:	bf14      	ite	ne
 8008cde:	2340      	movne	r3, #64	@ 0x40
 8008ce0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	6031      	str	r1, [r6, #0]
 8008ce8:	602b      	str	r3, [r5, #0]
 8008cea:	b016      	add	sp, #88	@ 0x58
 8008cec:	bd70      	pop	{r4, r5, r6, pc}
 8008cee:	466a      	mov	r2, sp
 8008cf0:	f000 f848 	bl	8008d84 <_fstat_r>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	dbec      	blt.n	8008cd2 <__swhatbuf_r+0x12>
 8008cf8:	9901      	ldr	r1, [sp, #4]
 8008cfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008cfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d02:	4259      	negs	r1, r3
 8008d04:	4159      	adcs	r1, r3
 8008d06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d0a:	e7eb      	b.n	8008ce4 <__swhatbuf_r+0x24>

08008d0c <__smakebuf_r>:
 8008d0c:	898b      	ldrh	r3, [r1, #12]
 8008d0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d10:	079d      	lsls	r5, r3, #30
 8008d12:	4606      	mov	r6, r0
 8008d14:	460c      	mov	r4, r1
 8008d16:	d507      	bpl.n	8008d28 <__smakebuf_r+0x1c>
 8008d18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d1c:	6023      	str	r3, [r4, #0]
 8008d1e:	6123      	str	r3, [r4, #16]
 8008d20:	2301      	movs	r3, #1
 8008d22:	6163      	str	r3, [r4, #20]
 8008d24:	b003      	add	sp, #12
 8008d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d28:	ab01      	add	r3, sp, #4
 8008d2a:	466a      	mov	r2, sp
 8008d2c:	f7ff ffc8 	bl	8008cc0 <__swhatbuf_r>
 8008d30:	9f00      	ldr	r7, [sp, #0]
 8008d32:	4605      	mov	r5, r0
 8008d34:	4639      	mov	r1, r7
 8008d36:	4630      	mov	r0, r6
 8008d38:	f7fe febe 	bl	8007ab8 <_malloc_r>
 8008d3c:	b948      	cbnz	r0, 8008d52 <__smakebuf_r+0x46>
 8008d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d42:	059a      	lsls	r2, r3, #22
 8008d44:	d4ee      	bmi.n	8008d24 <__smakebuf_r+0x18>
 8008d46:	f023 0303 	bic.w	r3, r3, #3
 8008d4a:	f043 0302 	orr.w	r3, r3, #2
 8008d4e:	81a3      	strh	r3, [r4, #12]
 8008d50:	e7e2      	b.n	8008d18 <__smakebuf_r+0xc>
 8008d52:	89a3      	ldrh	r3, [r4, #12]
 8008d54:	6020      	str	r0, [r4, #0]
 8008d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d5a:	81a3      	strh	r3, [r4, #12]
 8008d5c:	9b01      	ldr	r3, [sp, #4]
 8008d5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d62:	b15b      	cbz	r3, 8008d7c <__smakebuf_r+0x70>
 8008d64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d68:	4630      	mov	r0, r6
 8008d6a:	f000 f81d 	bl	8008da8 <_isatty_r>
 8008d6e:	b128      	cbz	r0, 8008d7c <__smakebuf_r+0x70>
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	f023 0303 	bic.w	r3, r3, #3
 8008d76:	f043 0301 	orr.w	r3, r3, #1
 8008d7a:	81a3      	strh	r3, [r4, #12]
 8008d7c:	89a3      	ldrh	r3, [r4, #12]
 8008d7e:	431d      	orrs	r5, r3
 8008d80:	81a5      	strh	r5, [r4, #12]
 8008d82:	e7cf      	b.n	8008d24 <__smakebuf_r+0x18>

08008d84 <_fstat_r>:
 8008d84:	b538      	push	{r3, r4, r5, lr}
 8008d86:	4d07      	ldr	r5, [pc, #28]	@ (8008da4 <_fstat_r+0x20>)
 8008d88:	2300      	movs	r3, #0
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	4608      	mov	r0, r1
 8008d8e:	4611      	mov	r1, r2
 8008d90:	602b      	str	r3, [r5, #0]
 8008d92:	f7f8 fd8d 	bl	80018b0 <_fstat>
 8008d96:	1c43      	adds	r3, r0, #1
 8008d98:	d102      	bne.n	8008da0 <_fstat_r+0x1c>
 8008d9a:	682b      	ldr	r3, [r5, #0]
 8008d9c:	b103      	cbz	r3, 8008da0 <_fstat_r+0x1c>
 8008d9e:	6023      	str	r3, [r4, #0]
 8008da0:	bd38      	pop	{r3, r4, r5, pc}
 8008da2:	bf00      	nop
 8008da4:	200003d0 	.word	0x200003d0

08008da8 <_isatty_r>:
 8008da8:	b538      	push	{r3, r4, r5, lr}
 8008daa:	4d06      	ldr	r5, [pc, #24]	@ (8008dc4 <_isatty_r+0x1c>)
 8008dac:	2300      	movs	r3, #0
 8008dae:	4604      	mov	r4, r0
 8008db0:	4608      	mov	r0, r1
 8008db2:	602b      	str	r3, [r5, #0]
 8008db4:	f7f8 fd8c 	bl	80018d0 <_isatty>
 8008db8:	1c43      	adds	r3, r0, #1
 8008dba:	d102      	bne.n	8008dc2 <_isatty_r+0x1a>
 8008dbc:	682b      	ldr	r3, [r5, #0]
 8008dbe:	b103      	cbz	r3, 8008dc2 <_isatty_r+0x1a>
 8008dc0:	6023      	str	r3, [r4, #0]
 8008dc2:	bd38      	pop	{r3, r4, r5, pc}
 8008dc4:	200003d0 	.word	0x200003d0

08008dc8 <_init>:
 8008dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dca:	bf00      	nop
 8008dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dce:	bc08      	pop	{r3}
 8008dd0:	469e      	mov	lr, r3
 8008dd2:	4770      	bx	lr

08008dd4 <_fini>:
 8008dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd6:	bf00      	nop
 8008dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dda:	bc08      	pop	{r3}
 8008ddc:	469e      	mov	lr, r3
 8008dde:	4770      	bx	lr
