#include "main.h"
#include "adress_defines.h"
#include <stdint.h>
#include <stdio.h>

#define SENSOR_RIGHT_UPPER 0x29
#define SENSOR_RIGHT_LOWER 0x28

I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
void Error_Handler(void);

void Read_Accelerometer(I2C_HandleTypeDef *i2c, uint16_t sensor_address, int16_t *accel_data);
void I2C_Scan(I2C_HandleTypeDef *i2c);
void BNO055_Init(I2C_HandleTypeDef *hi2c);

int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_I2C1_Init();

    I2C_Scan(&hi2c1);
    BNO055_Init(&hi2c1);

    int16_t accel_x = 0; // Initialize to zero
    while (1) {
        Read_Accelerometer(&hi2c1, SENSOR_RIGHT_UPPER, &accel_x); // Pass by reference
        printf("accle_X: %d Â°C\n", accel_x);
        HAL_Delay(100); // Delay 100ms between reads
    }
}

void I2C_Scan(I2C_HandleTypeDef *i2c) {
    uint8_t address;
    for (address = 0; address < 128; address++) {
        if (HAL_I2C_IsDeviceReady(i2c, (address << 1), 1, 10) == HAL_OK) {
            printf("I2C device found at address: 0x%X\n", address);
        }
    }
}

void Read_Accelerometer(I2C_HandleTypeDef *i2c, uint16_t sensor_address, int16_t *temperature) {
    uint8_t accel_x;
    uint8_t temp_address = BNO055_ACCEL_DATA_X_LSB_ADDR;
    HAL_StatusTypeDef ret;

    // Write the register address from which to read
    ret=HAL_I2C_Master_Transmit(i2c, sensor_address << 1, &temp_address, sizeof(temp_address), 50);
    if (ret !=HAL_OK)
	{
		Error_Handler();
	}

    // Read the temperature data
    ret=HAL_I2C_Master_Receive(i2c, (sensor_address << 1) | 1, &accel_x, 1, 50);
	if (ret !=HAL_OK)
	{
		Error_Handler();
	}

    *temperature = accel_x;
}

void BNO055_Init(I2C_HandleTypeDef *hi2c) {
    uint8_t config_data = OPERATION_MODE_CONFIG;
    HAL_I2C_Mem_Write(hi2c, SENSOR_RIGHT_UPPER << 1, BNO055_OPR_MODE_ADDR, I2C_MEMADD_SIZE_8BIT, &config_data, 1, 100);
    HAL_Delay(25); // Wait for the sensor to switch to config mode

    uint8_t power_mode = POWER_MODE_NORMAL;
    HAL_I2C_Mem_Write(hi2c, SENSOR_RIGHT_UPPER << 1, BNO055_PWR_MODE_ADDR, I2C_MEMADD_SIZE_8BIT, &power_mode, 1, 100);
    HAL_Delay(10);

    uint8_t sys_trigger = 0x00;
    HAL_I2C_Mem_Write(hi2c, SENSOR_RIGHT_UPPER << 1, BNO055_SYS_TRIGGER_ADDR, I2C_MEMADD_SIZE_8BIT, &sys_trigger, 1, 100);
    HAL_Delay(10);

    uint8_t unit_sel = UNIT_SEL;
    HAL_I2C_Mem_Write(hi2c, SENSOR_RIGHT_UPPER << 1, BNO055_UNIT_SEL_ADDR, I2C_MEMADD_SIZE_8BIT, &unit_sel, 1, 100);
    HAL_Delay(10);

    config_data = OPERATION_MODE_NDOF;
    HAL_I2C_Mem_Write(hi2c, SENSOR_RIGHT_UPPER << 1, BNO055_OPR_MODE_ADDR, I2C_MEMADD_SIZE_8BIT, &config_data, 1, 100);
    HAL_Delay(20); // Wait for the sensor to switch to NDOF mode
}


void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}


static void MX_I2C1_Init(void)
{
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
}

static void MX_GPIO_Init(void)
{
  __HAL_RCC_GPIOB_CLK_ENABLE();

}

void Error_Handler(void)
{
  __disable_irq();
  while (1)
  {
  }
}

#ifdef  USE_FULL_ASSERT

void assert_failed(uint8_t *file, uint32_t line)
{
}
#endif
