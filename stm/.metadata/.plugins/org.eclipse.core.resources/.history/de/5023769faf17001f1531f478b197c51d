#include "main.h"
#include <stdint.h>
#include <stdio.h>

#define BNO055_ADDRESS 0x29
#define BNO055_OPR_MODE_ADDR 0x3D
#define BNO055_ACCEL_DATA_X_LSB_ADDR 0x08
#define BNO055_PWR_MODE_ADDR 0x3E
#define BNO055_SYS_TRIGGER_ADDR 0x3F
#define BNO055_UNIT_SEL_ADDR 0x3B

#define OPERATION_MODE_CONFIG 0x00
#define OPERATION_MODE_NDOF 0x0C

#define POWER_MODE_NORMAL 0x00
#define UNIT_SEL 0x00

I2C_HandleTypeDef hi2c1;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
void Error_Handler(void);

void BNO055_Init(I2C_HandleTypeDef *hi2c);
void Read_Accelerometer(I2C_HandleTypeDef *hi2c, uint16_t sensor_address, int16_t *accel_data);
void I2C_Scan(I2C_HandleTypeDef *i2c);

int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_I2C1_Init();

    I2C_Scan(&hi2c1);
    BNO055_Init(&hi2c1);

    int16_t accel_data[3] = {0};

    while (1) {
        Read_Accelerometer(&hi2c1, BNO055_ADDRESS, accel_data);
        printf("Accel X: %d, Y: %d, Z: %d\n", accel_data[0], accel_data[1], accel_data[2]);
        HAL_Delay(100); // Delay 100ms between reads
    }
}

void I2C_Scan(I2C_HandleTypeDef *i2c) {
    uint8_t address;
    for (address = 0; address < 128; address++) {
        if (HAL_I2C_IsDeviceReady(i2c, (address << 1), 1, 10) == HAL_OK) {
            printf("I2C device found at address: 0x%X\n", address);
        }
    }
}

void BNO055_Init(I2C_HandleTypeDef *hi2c) {
    uint8_t config_data = OPERATION_MODE_CONFIG;
    HAL_I2C_Mem_Write(hi2c, BNO055_ADDRESS << 1, BNO055_OPR_MODE_ADDR, I2C_MEMADD_SIZE_8BIT, &config_data, 1, 100);
    HAL_Delay(25); // Wait for the sensor to switch to config mode

    uint8_t power_mode = POWER_MODE_NORMAL;
    HAL_I2C_Mem_Write(hi2c, BNO055_ADDRESS << 1, BNO055_PWR_MODE_ADDR, I2C_MEMADD_SIZE_8BIT, &power_mode, 1, 100);
    HAL_Delay(10);

    uint8_t sys_trigger = 0x00;
    HAL_I2C_Mem_Write(hi2c, BNO055_ADDRESS << 1, BNO055_SYS_TRIGGER_ADDR, I2C_MEMADD_SIZE_8BIT, &sys_trigger, 1, 100);
    HAL_Delay(10);

    uint8_t unit_sel = UNIT_SEL;
    HAL_I2C_Mem_Write(hi2c, BNO055_ADDRESS << 1, BNO055_UNIT_SEL_ADDR, I2C_MEMADD_SIZE_8BIT, &unit_sel, 1, 100);
    HAL_Delay(10);

    config_data = OPERATION_MODE_NDOF;
    HAL_I2C_Mem_Write(hi2c, BNO055_ADDRESS << 1, BNO055_OPR_MODE_ADDR, I2C_MEMADD_SIZE_8BIT, &config_data, 1, 100);
    HAL_Delay(20); // Wait for the sensor to switch to NDOF mode
}

void Read_Accelerometer(I2C_HandleTypeDef *hi2c, uint16_t sensor_address, int16_t *accel_data) {
    uint8_t buffer[6];
    HAL_StatusTypeDef ret;

    ret = HAL_I2C_Mem_Read(hi2c, sensor_address << 1, BNO055_ACCEL_DATA_X_LSB_ADDR, I2C_MEMADD_SIZE_8BIT, buffer, 6, 100);
    if (ret == HAL_OK) {
        accel_data[0] = (int16_t)((buffer[1] << 8) | buffer[0]); // X-axis
        accel_data[1] = (int16_t)((buffer[3] << 8) | buffer[2]); // Y-axis
        accel_data[2] = (int16_t)((buffer[5] << 8) | buffer[4]); // Z-axis
    } else {
        Error_Handler();
    }
}

void SystemClock_Config(void) {
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    __HAL_RCC_PWR_CLK_ENABLE();
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
        Error_Handler();
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
        Error_Handler();
    }
}

static void MX_I2C1_Init(void) {
    hi2c1.Instance = I2C1;
    hi2c1.Init.ClockSpeed = 100000;
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    hi2c1.Init.OwnAddress2 = 0;
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
        Error_Handler();
    }
}

static void MX_GPIO_Init(void) {
    __HAL_RCC_GPIOB_CLK_ENABLE();
}

void Error_Handler(void) {
    __disable_irq();
    while (1) {
        // Implement a way to indicate an error, such as blinking an LED
    }
}

#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line) {
    // User can add their own implementation to report the HAL assert_param error return state
}
#endif
