
Licenta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003c94  08003c94  00004c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cf8  08003cf8  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003cf8  08003cf8  00004cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d00  08003d00  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d00  08003d00  00004d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d04  08003d04  00004d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003d08  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000068  08003d70  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003d70  00005280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000792e  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e6  00000000  00000000  0000c9c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0000e0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000623  00000000  00000000  0000e8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021eee  00000000  00000000  0000eee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b076  00000000  00000000  00030dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cae46  00000000  00000000  0003be47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106c8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027dc  00000000  00000000  00106cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001094ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003c7c 	.word	0x08003c7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08003c7c 	.word	0x08003c7c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
void Error_Handler(void);

void BNO055_Init(I2C_HandleTypeDef *i2c, uint16_t sensor_address);
void Read_Accelerometer(I2C_HandleTypeDef *i2c, uint16_t sensor_address, int16_t *accel_data);

int main(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
    HAL_Init();
 80005a6:	f000 fb5b 	bl	8000c60 <HAL_Init>
    SystemClock_Config();
 80005aa:	f000 f895 	bl	80006d8 <SystemClock_Config>
    MX_GPIO_Init();
 80005ae:	f000 f955 	bl	800085c <MX_GPIO_Init>
    MX_I2C1_Init();
 80005b2:	f000 f8ff 	bl	80007b4 <MX_I2C1_Init>
    MX_I2C2_Init();
 80005b6:	f000 f929 	bl	800080c <MX_I2C2_Init>

    // Initialize the sensors
    BNO055_Init(&hi2c1, SENSOR_RIGHT_LOWER);
 80005ba:	2128      	movs	r1, #40	@ 0x28
 80005bc:	480c      	ldr	r0, [pc, #48]	@ (80005f0 <main+0x50>)
 80005be:	f000 f81b 	bl	80005f8 <BNO055_Init>

    int16_t accel_data[3]; // X, Y, Z acceleration data

    while (1) {
        // Read accelerometer data from SENSOR_RIGHT_LOWER
        Read_Accelerometer(&hi2c1, SENSOR_RIGHT_LOWER, accel_data);
 80005c2:	463b      	mov	r3, r7
 80005c4:	461a      	mov	r2, r3
 80005c6:	2128      	movs	r1, #40	@ 0x28
 80005c8:	4809      	ldr	r0, [pc, #36]	@ (80005f0 <main+0x50>)
 80005ca:	f000 f839 	bl	8000640 <Read_Accelerometer>

        printf("X: %d, Y: %d, Z: %d\n", accel_data[0], accel_data[1], accel_data[2]);
 80005ce:	f9b7 3000 	ldrsh.w	r3, [r7]
 80005d2:	4619      	mov	r1, r3
 80005d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005d8:	461a      	mov	r2, r3
 80005da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005de:	4805      	ldr	r0, [pc, #20]	@ (80005f4 <main+0x54>)
 80005e0:	f002 fcde 	bl	8002fa0 <iprintf>

        HAL_Delay(100); // Delay 100ms between reads
 80005e4:	2064      	movs	r0, #100	@ 0x64
 80005e6:	f000 fbad 	bl	8000d44 <HAL_Delay>
        Read_Accelerometer(&hi2c1, SENSOR_RIGHT_LOWER, accel_data);
 80005ea:	bf00      	nop
 80005ec:	e7e9      	b.n	80005c2 <main+0x22>
 80005ee:	bf00      	nop
 80005f0:	20000084 	.word	0x20000084
 80005f4:	08003c94 	.word	0x08003c94

080005f8 <BNO055_Init>:
    }
}

void BNO055_Init(I2C_HandleTypeDef *i2c, uint16_t sensor_address) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af02      	add	r7, sp, #8
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	807b      	strh	r3, [r7, #2]
    uint8_t opr_mode = 0x08; // Accel-only mode
 8000604:	2308      	movs	r3, #8
 8000606:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2];

    data[0] = BNO055_OPR_MODE_ADDR; // Register for operation mode
 8000608:	233d      	movs	r3, #61	@ 0x3d
 800060a:	733b      	strb	r3, [r7, #12]
    data[1] = opr_mode; // Set to accelerometer mode
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	737b      	strb	r3, [r7, #13]

    if (HAL_I2C_Master_Transmit(i2c, sensor_address << 1, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8000610:	887b      	ldrh	r3, [r7, #2]
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	b299      	uxth	r1, r3
 8000616:	f107 020c 	add.w	r2, r7, #12
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2302      	movs	r3, #2
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f000 ff70 	bl	8001508 <HAL_I2C_Master_Transmit>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <BNO055_Init+0x3a>
        Error_Handler(); // Handle errors
 800062e:	f000 f93d 	bl	80008ac <Error_Handler>
    }

    HAL_Delay(20); // Delay for mode change stabilization
 8000632:	2014      	movs	r0, #20
 8000634:	f000 fb86 	bl	8000d44 <HAL_Delay>
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <Read_Accelerometer>:

void Read_Accelerometer(I2C_HandleTypeDef *i2c, uint16_t sensor_address, int16_t *accel_data) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af02      	add	r7, sp, #8
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	460b      	mov	r3, r1
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	817b      	strh	r3, [r7, #10]
    uint8_t accel_reg_start = BNO055_ACCEL_DATA_X_LSB_ADDR; // Starting register
 800064e:	2308      	movs	r3, #8
 8000650:	75fb      	strb	r3, [r7, #23]
    uint8_t accel_raw[6]; // Store raw bytes of accelerometer data

    if (HAL_I2C_Master_Transmit(i2c, sensor_address << 1, &accel_reg_start, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000652:	897b      	ldrh	r3, [r7, #10]
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	b299      	uxth	r1, r3
 8000658:	f107 0217 	add.w	r2, r7, #23
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2301      	movs	r3, #1
 8000664:	68f8      	ldr	r0, [r7, #12]
 8000666:	f000 ff4f 	bl	8001508 <HAL_I2C_Master_Transmit>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <Read_Accelerometer+0x34>
        Error_Handler(); // Handle errors
 8000670:	f000 f91c 	bl	80008ac <Error_Handler>
    }

    if (HAL_I2C_Master_Receive(i2c, sensor_address << 1, accel_raw, 6, HAL_MAX_DELAY) != HAL_OK) {
 8000674:	897b      	ldrh	r3, [r7, #10]
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	b299      	uxth	r1, r3
 800067a:	f107 0210 	add.w	r2, r7, #16
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2306      	movs	r3, #6
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f001 f83c 	bl	8001704 <HAL_I2C_Master_Receive>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <Read_Accelerometer+0x56>
        Error_Handler(); // Handle errors
 8000692:	f000 f90b 	bl	80008ac <Error_Handler>
    }

    // Convert raw data to 16-bit signed integers
    accel_data[0] = (int16_t)((accel_raw[1] << 8) | accel_raw[0]); // X
 8000696:	7c7b      	ldrb	r3, [r7, #17]
 8000698:	021b      	lsls	r3, r3, #8
 800069a:	b21a      	sxth	r2, r3
 800069c:	7c3b      	ldrb	r3, [r7, #16]
 800069e:	b21b      	sxth	r3, r3
 80006a0:	4313      	orrs	r3, r2
 80006a2:	b21a      	sxth	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	801a      	strh	r2, [r3, #0]
    accel_data[1] = (int16_t)((accel_raw[3] << 8) | accel_raw[2]); // Y
 80006a8:	7cfb      	ldrb	r3, [r7, #19]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	b219      	sxth	r1, r3
 80006ae:	7cbb      	ldrb	r3, [r7, #18]
 80006b0:	b21a      	sxth	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	3302      	adds	r3, #2
 80006b6:	430a      	orrs	r2, r1
 80006b8:	b212      	sxth	r2, r2
 80006ba:	801a      	strh	r2, [r3, #0]
    accel_data[2] = (int16_t)((accel_raw[5] << 8) | accel_raw[4]); // Z
 80006bc:	7d7b      	ldrb	r3, [r7, #21]
 80006be:	021b      	lsls	r3, r3, #8
 80006c0:	b219      	sxth	r1, r3
 80006c2:	7d3b      	ldrb	r3, [r7, #20]
 80006c4:	b21a      	sxth	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	3304      	adds	r3, #4
 80006ca:	430a      	orrs	r2, r1
 80006cc:	b212      	sxth	r2, r2
 80006ce:	801a      	strh	r2, [r3, #0]
}
 80006d0:	bf00      	nop
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <SystemClock_Config>:


void SystemClock_Config(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	@ 0x50
 80006dc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	2234      	movs	r2, #52	@ 0x34
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fcaf 	bl	800304a <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b2a      	ldr	r3, [pc, #168]	@ (80007ac <SystemClock_Config+0xd4>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000704:	4a29      	ldr	r2, [pc, #164]	@ (80007ac <SystemClock_Config+0xd4>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	@ 0x40
 800070c:	4b27      	ldr	r3, [pc, #156]	@ (80007ac <SystemClock_Config+0xd4>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000718:	2300      	movs	r3, #0
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4b24      	ldr	r3, [pc, #144]	@ (80007b0 <SystemClock_Config+0xd8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000724:	4a22      	ldr	r2, [pc, #136]	@ (80007b0 <SystemClock_Config+0xd8>)
 8000726:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <SystemClock_Config+0xd8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000738:	2302      	movs	r3, #2
 800073a:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000744:	2302      	movs	r3, #2
 8000746:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLM = 16;
 800074c:	2310      	movs	r3, #16
 800074e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000750:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000754:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000756:	2304      	movs	r3, #4
 8000758:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 800075a:	2302      	movs	r3, #2
 800075c:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 800075e:	2302      	movs	r3, #2
 8000760:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4618      	mov	r0, r3
 8000768:	f002 f8ba 	bl	80028e0 <HAL_RCC_OscConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x9e>
        Error_Handler();
 8000772:	f000 f89b 	bl	80008ac <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000776:	230f      	movs	r3, #15
 8000778:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077a:	2302      	movs	r3, #2
 800077c:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000782:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000786:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800078c:	f107 0308 	add.w	r3, r7, #8
 8000790:	2102      	movs	r1, #2
 8000792:	4618      	mov	r0, r3
 8000794:	f001 fd6e 	bl	8002274 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xca>
        Error_Handler();
 800079e:	f000 f885 	bl	80008ac <Error_Handler>
    }
}
 80007a2:	bf00      	nop
 80007a4:	3750      	adds	r7, #80	@ 0x50
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_I2C1_Init>:

static void MX_I2C1_Init(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 80007b8:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <MX_I2C1_Init+0x4c>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	@ (8000804 <MX_I2C1_Init+0x50>)
 80007bc:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 80007be:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <MX_I2C1_Init+0x4c>)
 80007c0:	4a11      	ldr	r2, [pc, #68]	@ (8000808 <MX_I2C1_Init+0x54>)
 80007c2:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <MX_I2C1_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <MX_I2C1_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <MX_I2C1_Init+0x4c>)
 80007d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007d6:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d8:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_I2C1_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <MX_I2C1_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_I2C1_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]

    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80007ea:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_I2C1_Init+0x4c>)
 80007ec:	f000 fd48 	bl	8001280 <HAL_I2C_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_I2C1_Init+0x46>
        Error_Handler();
 80007f6:	f000 f859 	bl	80008ac <Error_Handler>
    }
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000084 	.word	0x20000084
 8000804:	40005400 	.word	0x40005400
 8000808:	000186a0 	.word	0x000186a0

0800080c <MX_I2C2_Init>:

static void MX_I2C2_Init(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
    hi2c2.Instance = I2C2;
 8000810:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <MX_I2C2_Init+0x44>)
 8000812:	4a10      	ldr	r2, [pc, #64]	@ (8000854 <MX_I2C2_Init+0x48>)
 8000814:	601a      	str	r2, [r3, #0]
    hi2c2.Init.ClockSpeed = 100000;
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <MX_I2C2_Init+0x44>)
 8000818:	4a0f      	ldr	r2, [pc, #60]	@ (8000858 <MX_I2C2_Init+0x4c>)
 800081a:	605a      	str	r2, [r3, #4]
    hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_I2C2_Init+0x44>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
    hi2c2.Init.OwnAddress1 = 0;
 8000822:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <MX_I2C2_Init+0x44>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <MX_I2C2_Init+0x44>)
 800082a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800082e:	611a      	str	r2, [r3, #16]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000830:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <MX_I2C2_Init+0x44>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000836:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <MX_I2C2_Init+0x44>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]

    if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800083c:	4804      	ldr	r0, [pc, #16]	@ (8000850 <MX_I2C2_Init+0x44>)
 800083e:	f000 fd1f 	bl	8001280 <HAL_I2C_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C2_Init+0x40>
        Error_Handler();
 8000848:	f000 f830 	bl	80008ac <Error_Handler>
    }
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200000d8 	.word	0x200000d8
 8000854:	40005800 	.word	0x40005800
 8000858:	000186a0 	.word	0x000186a0

0800085c <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <MX_GPIO_Init+0x4c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a0f      	ldr	r2, [pc, #60]	@ (80008a8 <MX_GPIO_Init+0x4c>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b0d      	ldr	r3, [pc, #52]	@ (80008a8 <MX_GPIO_Init+0x4c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_GPIO_Init+0x4c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a08      	ldr	r2, [pc, #32]	@ (80008a8 <MX_GPIO_Init+0x4c>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_GPIO_Init+0x4c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800

080008ac <Error_Handler>:

void Error_Handler(void) {
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
    __disable_irq();
    while (1) {
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <Error_Handler+0x8>

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <HAL_MspInit+0x4c>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000904 <HAL_MspInit+0x4c>)
 80008c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000904 <HAL_MspInit+0x4c>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <HAL_MspInit+0x4c>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e2:	4a08      	ldr	r2, [pc, #32]	@ (8000904 <HAL_MspInit+0x4c>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ea:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008f6:	2007      	movs	r0, #7
 80008f8:	f000 fafa 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40023800 	.word	0x40023800

08000908 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	@ 0x30
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a42      	ldr	r2, [pc, #264]	@ (8000a30 <HAL_I2C_MspInit+0x128>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d12c      	bne.n	8000984 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
 800092e:	4b41      	ldr	r3, [pc, #260]	@ (8000a34 <HAL_I2C_MspInit+0x12c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a40      	ldr	r2, [pc, #256]	@ (8000a34 <HAL_I2C_MspInit+0x12c>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a34 <HAL_I2C_MspInit+0x12c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000946:	23c0      	movs	r3, #192	@ 0xc0
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094a:	2312      	movs	r3, #18
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000956:	2304      	movs	r3, #4
 8000958:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4835      	ldr	r0, [pc, #212]	@ (8000a38 <HAL_I2C_MspInit+0x130>)
 8000962:	f000 faf9 	bl	8000f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	4b32      	ldr	r3, [pc, #200]	@ (8000a34 <HAL_I2C_MspInit+0x12c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	4a31      	ldr	r2, [pc, #196]	@ (8000a34 <HAL_I2C_MspInit+0x12c>)
 8000970:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000974:	6413      	str	r3, [r2, #64]	@ 0x40
 8000976:	4b2f      	ldr	r3, [pc, #188]	@ (8000a34 <HAL_I2C_MspInit+0x12c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000982:	e050      	b.n	8000a26 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a2c      	ldr	r2, [pc, #176]	@ (8000a3c <HAL_I2C_MspInit+0x134>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d14b      	bne.n	8000a26 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b28      	ldr	r3, [pc, #160]	@ (8000a34 <HAL_I2C_MspInit+0x12c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a27      	ldr	r2, [pc, #156]	@ (8000a34 <HAL_I2C_MspInit+0x12c>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b25      	ldr	r3, [pc, #148]	@ (8000a34 <HAL_I2C_MspInit+0x12c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b21      	ldr	r3, [pc, #132]	@ (8000a34 <HAL_I2C_MspInit+0x12c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a20      	ldr	r2, [pc, #128]	@ (8000a34 <HAL_I2C_MspInit+0x12c>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000a34 <HAL_I2C_MspInit+0x12c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009cc:	2312      	movs	r3, #18
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009d8:	2304      	movs	r3, #4
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4815      	ldr	r0, [pc, #84]	@ (8000a38 <HAL_I2C_MspInit+0x130>)
 80009e4:	f000 fab8 	bl	8000f58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ee:	2312      	movs	r3, #18
 80009f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009fa:	2304      	movs	r3, #4
 80009fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	480e      	ldr	r0, [pc, #56]	@ (8000a40 <HAL_I2C_MspInit+0x138>)
 8000a06:	f000 faa7 	bl	8000f58 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <HAL_I2C_MspInit+0x12c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	@ (8000a34 <HAL_I2C_MspInit+0x12c>)
 8000a14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_I2C_MspInit+0x12c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
}
 8000a26:	bf00      	nop
 8000a28:	3730      	adds	r7, #48	@ 0x30
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40005400 	.word	0x40005400
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020400 	.word	0x40020400
 8000a3c:	40005800 	.word	0x40005800
 8000a40:	40020800 	.word	0x40020800

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <NMI_Handler+0x4>

08000a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9a:	f000 f933 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	e00a      	b.n	8000aca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ab4:	f3af 8000 	nop.w
 8000ab8:	4601      	mov	r1, r0
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	1c5a      	adds	r2, r3, #1
 8000abe:	60ba      	str	r2, [r7, #8]
 8000ac0:	b2ca      	uxtb	r2, r1
 8000ac2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	dbf0      	blt.n	8000ab4 <_read+0x12>
  }

  return len;
 8000ad2:	687b      	ldr	r3, [r7, #4]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	e009      	b.n	8000b02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	1c5a      	adds	r2, r3, #1
 8000af2:	60ba      	str	r2, [r7, #8]
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	3301      	adds	r3, #1
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	697a      	ldr	r2, [r7, #20]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	dbf1      	blt.n	8000aee <_write+0x12>
  }
  return len;
 8000b0a:	687b      	ldr	r3, [r7, #4]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <_close>:

int _close(int file)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b3c:	605a      	str	r2, [r3, #4]
  return 0;
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <_isatty>:

int _isatty(int file)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b54:	2301      	movs	r3, #1
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b085      	sub	sp, #20
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	60f8      	str	r0, [r7, #12]
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b84:	4a14      	ldr	r2, [pc, #80]	@ (8000bd8 <_sbrk+0x5c>)
 8000b86:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <_sbrk+0x60>)
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b90:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b98:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <_sbrk+0x64>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	@ (8000be4 <_sbrk+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d207      	bcs.n	8000bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bac:	f002 fa9c 	bl	80030e8 <__errno>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bba:	e009      	b.n	8000bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc2:	4b07      	ldr	r3, [pc, #28]	@ (8000be0 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a05      	ldr	r2, [pc, #20]	@ (8000be0 <_sbrk+0x64>)
 8000bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bce:	68fb      	ldr	r3, [r7, #12]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20020000 	.word	0x20020000
 8000bdc:	00000400 	.word	0x00000400
 8000be0:	2000012c 	.word	0x2000012c
 8000be4:	20000280 	.word	0x20000280

08000be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bec:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <SystemInit+0x20>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bf2:	4a05      	ldr	r2, [pc, #20]	@ (8000c08 <SystemInit+0x20>)
 8000bf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c10:	f7ff ffea 	bl	8000be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c14:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c16:	490d      	ldr	r1, [pc, #52]	@ (8000c4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c18:	4a0d      	ldr	r2, [pc, #52]	@ (8000c50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f002 fa5b 	bl	80030f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3e:	f7ff fcaf 	bl	80005a0 <main>
  bx  lr    
 8000c42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c50:	08003d08 	.word	0x08003d08
  ldr r2, =_sbss
 8000c54:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c58:	20000280 	.word	0x20000280

08000c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC_IRQHandler>
	...

08000c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca0 <HAL_Init+0x40>)
 8000c6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <HAL_Init+0x40>)
 8000c76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a07      	ldr	r2, [pc, #28]	@ (8000ca0 <HAL_Init+0x40>)
 8000c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 f931 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 f808 	bl	8000ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c94:	f7ff fe10 	bl	80008b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023c00 	.word	0x40023c00

08000ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cac:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <HAL_InitTick+0x54>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <HAL_InitTick+0x58>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f93b 	bl	8000f3e <HAL_SYSTICK_Config>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00e      	b.n	8000cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d80a      	bhi.n	8000cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f000 f911 	bl	8000f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce4:	4a06      	ldr	r2, [pc, #24]	@ (8000d00 <HAL_InitTick+0x5c>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e000      	b.n	8000cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000004 	.word	0x20000004

08000d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	@ (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20000130 	.word	0x20000130

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b03      	ldr	r3, [pc, #12]	@ (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000130 	.word	0x20000130

08000d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d4c:	f7ff ffee 	bl	8000d2c <HAL_GetTick>
 8000d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5c:	d005      	beq.n	8000d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <HAL_Delay+0x44>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4413      	add	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d6a:	bf00      	nop
 8000d6c:	f7ff ffde 	bl	8000d2c <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d8f7      	bhi.n	8000d6c <HAL_Delay+0x28>
  {
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	@ (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	@ (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	@ (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	@ (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	@ 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	@ 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ebc:	d301      	bcc.n	8000ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00f      	b.n	8000ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <SysTick_Config+0x40>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eca:	210f      	movs	r1, #15
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f7ff ff8e 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <SysTick_Config+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eda:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <SysTick_Config+0x40>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff47 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f18:	f7ff ff5c 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff ff8e 	bl	8000e44 <NVIC_EncodePriority>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff5d 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ffb0 	bl	8000eac <SysTick_Config>
 8000f4c:	4603      	mov	r3, r0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	@ 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
 8000f72:	e165      	b.n	8001240 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f74:	2201      	movs	r2, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	f040 8154 	bne.w	800123a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d005      	beq.n	8000faa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d130      	bne.n	800100c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	091b      	lsrs	r3, r3, #4
 8000ff6:	f003 0201 	and.w	r2, r3, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b03      	cmp	r3, #3
 8001016:	d017      	beq.n	8001048 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d123      	bne.n	800109c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	69b9      	ldr	r1, [r7, #24]
 8001098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0203 	and.w	r2, r3, #3
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80ae 	beq.w	800123a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001258 <HAL_GPIO_Init+0x300>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001258 <HAL_GPIO_Init+0x300>)
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001258 <HAL_GPIO_Init+0x300>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010fa:	4a58      	ldr	r2, [pc, #352]	@ (800125c <HAL_GPIO_Init+0x304>)
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4f      	ldr	r2, [pc, #316]	@ (8001260 <HAL_GPIO_Init+0x308>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d025      	beq.n	8001172 <HAL_GPIO_Init+0x21a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4e      	ldr	r2, [pc, #312]	@ (8001264 <HAL_GPIO_Init+0x30c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d01f      	beq.n	800116e <HAL_GPIO_Init+0x216>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4d      	ldr	r2, [pc, #308]	@ (8001268 <HAL_GPIO_Init+0x310>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d019      	beq.n	800116a <HAL_GPIO_Init+0x212>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4c      	ldr	r2, [pc, #304]	@ (800126c <HAL_GPIO_Init+0x314>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d013      	beq.n	8001166 <HAL_GPIO_Init+0x20e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4b      	ldr	r2, [pc, #300]	@ (8001270 <HAL_GPIO_Init+0x318>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d00d      	beq.n	8001162 <HAL_GPIO_Init+0x20a>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4a      	ldr	r2, [pc, #296]	@ (8001274 <HAL_GPIO_Init+0x31c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x206>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a49      	ldr	r2, [pc, #292]	@ (8001278 <HAL_GPIO_Init+0x320>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <HAL_GPIO_Init+0x202>
 8001156:	2306      	movs	r3, #6
 8001158:	e00c      	b.n	8001174 <HAL_GPIO_Init+0x21c>
 800115a:	2307      	movs	r3, #7
 800115c:	e00a      	b.n	8001174 <HAL_GPIO_Init+0x21c>
 800115e:	2305      	movs	r3, #5
 8001160:	e008      	b.n	8001174 <HAL_GPIO_Init+0x21c>
 8001162:	2304      	movs	r3, #4
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x21c>
 8001166:	2303      	movs	r3, #3
 8001168:	e004      	b.n	8001174 <HAL_GPIO_Init+0x21c>
 800116a:	2302      	movs	r3, #2
 800116c:	e002      	b.n	8001174 <HAL_GPIO_Init+0x21c>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_GPIO_Init+0x21c>
 8001172:	2300      	movs	r3, #0
 8001174:	69fa      	ldr	r2, [r7, #28]
 8001176:	f002 0203 	and.w	r2, r2, #3
 800117a:	0092      	lsls	r2, r2, #2
 800117c:	4093      	lsls	r3, r2
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001184:	4935      	ldr	r1, [pc, #212]	@ (800125c <HAL_GPIO_Init+0x304>)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	3302      	adds	r3, #2
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001192:	4b3a      	ldr	r3, [pc, #232]	@ (800127c <HAL_GPIO_Init+0x324>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011b6:	4a31      	ldr	r2, [pc, #196]	@ (800127c <HAL_GPIO_Init+0x324>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011bc:	4b2f      	ldr	r3, [pc, #188]	@ (800127c <HAL_GPIO_Init+0x324>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e0:	4a26      	ldr	r2, [pc, #152]	@ (800127c <HAL_GPIO_Init+0x324>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011e6:	4b25      	ldr	r3, [pc, #148]	@ (800127c <HAL_GPIO_Init+0x324>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800120a:	4a1c      	ldr	r2, [pc, #112]	@ (800127c <HAL_GPIO_Init+0x324>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001210:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <HAL_GPIO_Init+0x324>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001234:	4a11      	ldr	r2, [pc, #68]	@ (800127c <HAL_GPIO_Init+0x324>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3301      	adds	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	2b0f      	cmp	r3, #15
 8001244:	f67f ae96 	bls.w	8000f74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3724      	adds	r7, #36	@ 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40013800 	.word	0x40013800
 8001260:	40020000 	.word	0x40020000
 8001264:	40020400 	.word	0x40020400
 8001268:	40020800 	.word	0x40020800
 800126c:	40020c00 	.word	0x40020c00
 8001270:	40021000 	.word	0x40021000
 8001274:	40021400 	.word	0x40021400
 8001278:	40021800 	.word	0x40021800
 800127c:	40013c00 	.word	0x40013c00

08001280 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e12b      	b.n	80014ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d106      	bne.n	80012ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fb2e 	bl	8000908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2224      	movs	r2, #36	@ 0x24
 80012b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0201 	bic.w	r2, r2, #1
 80012c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012e4:	f001 f8b8 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 80012e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4a81      	ldr	r2, [pc, #516]	@ (80014f4 <HAL_I2C_Init+0x274>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d807      	bhi.n	8001304 <HAL_I2C_Init+0x84>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4a80      	ldr	r2, [pc, #512]	@ (80014f8 <HAL_I2C_Init+0x278>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	bf94      	ite	ls
 80012fc:	2301      	movls	r3, #1
 80012fe:	2300      	movhi	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	e006      	b.n	8001312 <HAL_I2C_Init+0x92>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4a7d      	ldr	r2, [pc, #500]	@ (80014fc <HAL_I2C_Init+0x27c>)
 8001308:	4293      	cmp	r3, r2
 800130a:	bf94      	ite	ls
 800130c:	2301      	movls	r3, #1
 800130e:	2300      	movhi	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e0e7      	b.n	80014ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4a78      	ldr	r2, [pc, #480]	@ (8001500 <HAL_I2C_Init+0x280>)
 800131e:	fba2 2303 	umull	r2, r3, r2, r3
 8001322:	0c9b      	lsrs	r3, r3, #18
 8001324:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	430a      	orrs	r2, r1
 8001338:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	4a6a      	ldr	r2, [pc, #424]	@ (80014f4 <HAL_I2C_Init+0x274>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d802      	bhi.n	8001354 <HAL_I2C_Init+0xd4>
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	3301      	adds	r3, #1
 8001352:	e009      	b.n	8001368 <HAL_I2C_Init+0xe8>
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	4a69      	ldr	r2, [pc, #420]	@ (8001504 <HAL_I2C_Init+0x284>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	099b      	lsrs	r3, r3, #6
 8001366:	3301      	adds	r3, #1
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	430b      	orrs	r3, r1
 800136e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800137a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	495c      	ldr	r1, [pc, #368]	@ (80014f4 <HAL_I2C_Init+0x274>)
 8001384:	428b      	cmp	r3, r1
 8001386:	d819      	bhi.n	80013bc <HAL_I2C_Init+0x13c>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	1e59      	subs	r1, r3, #1
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	fbb1 f3f3 	udiv	r3, r1, r3
 8001396:	1c59      	adds	r1, r3, #1
 8001398:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800139c:	400b      	ands	r3, r1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00a      	beq.n	80013b8 <HAL_I2C_Init+0x138>
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	1e59      	subs	r1, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80013b0:	3301      	adds	r3, #1
 80013b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013b6:	e051      	b.n	800145c <HAL_I2C_Init+0x1dc>
 80013b8:	2304      	movs	r3, #4
 80013ba:	e04f      	b.n	800145c <HAL_I2C_Init+0x1dc>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d111      	bne.n	80013e8 <HAL_I2C_Init+0x168>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	1e58      	subs	r0, r3, #1
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6859      	ldr	r1, [r3, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	440b      	add	r3, r1
 80013d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013d6:	3301      	adds	r3, #1
 80013d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013dc:	2b00      	cmp	r3, #0
 80013de:	bf0c      	ite	eq
 80013e0:	2301      	moveq	r3, #1
 80013e2:	2300      	movne	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	e012      	b.n	800140e <HAL_I2C_Init+0x18e>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	1e58      	subs	r0, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6859      	ldr	r1, [r3, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	0099      	lsls	r1, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80013fe:	3301      	adds	r3, #1
 8001400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001404:	2b00      	cmp	r3, #0
 8001406:	bf0c      	ite	eq
 8001408:	2301      	moveq	r3, #1
 800140a:	2300      	movne	r3, #0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_I2C_Init+0x196>
 8001412:	2301      	movs	r3, #1
 8001414:	e022      	b.n	800145c <HAL_I2C_Init+0x1dc>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10e      	bne.n	800143c <HAL_I2C_Init+0x1bc>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1e58      	subs	r0, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6859      	ldr	r1, [r3, #4]
 8001426:	460b      	mov	r3, r1
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	440b      	add	r3, r1
 800142c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001430:	3301      	adds	r3, #1
 8001432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800143a:	e00f      	b.n	800145c <HAL_I2C_Init+0x1dc>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1e58      	subs	r0, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6859      	ldr	r1, [r3, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	0099      	lsls	r1, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001452:	3301      	adds	r3, #1
 8001454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001458:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	6809      	ldr	r1, [r1, #0]
 8001460:	4313      	orrs	r3, r2
 8001462:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69da      	ldr	r2, [r3, #28]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800148a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6911      	ldr	r1, [r2, #16]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68d2      	ldr	r2, [r2, #12]
 8001496:	4311      	orrs	r1, r2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	430b      	orrs	r3, r1
 800149e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695a      	ldr	r2, [r3, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2220      	movs	r2, #32
 80014d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	000186a0 	.word	0x000186a0
 80014f8:	001e847f 	.word	0x001e847f
 80014fc:	003d08ff 	.word	0x003d08ff
 8001500:	431bde83 	.word	0x431bde83
 8001504:	10624dd3 	.word	0x10624dd3

08001508 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af02      	add	r7, sp, #8
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	461a      	mov	r2, r3
 8001514:	460b      	mov	r3, r1
 8001516:	817b      	strh	r3, [r7, #10]
 8001518:	4613      	mov	r3, r2
 800151a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800151c:	f7ff fc06 	bl	8000d2c <HAL_GetTick>
 8001520:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b20      	cmp	r3, #32
 800152c:	f040 80e0 	bne.w	80016f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2319      	movs	r3, #25
 8001536:	2201      	movs	r2, #1
 8001538:	4970      	ldr	r1, [pc, #448]	@ (80016fc <HAL_I2C_Master_Transmit+0x1f4>)
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f000 fc64 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001546:	2302      	movs	r3, #2
 8001548:	e0d3      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_I2C_Master_Transmit+0x50>
 8001554:	2302      	movs	r3, #2
 8001556:	e0cc      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1ea>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b01      	cmp	r3, #1
 800156c:	d007      	beq.n	800157e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f042 0201 	orr.w	r2, r2, #1
 800157c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800158c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2221      	movs	r2, #33	@ 0x21
 8001592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2210      	movs	r2, #16
 800159a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	893a      	ldrh	r2, [r7, #8]
 80015ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4a50      	ldr	r2, [pc, #320]	@ (8001700 <HAL_I2C_Master_Transmit+0x1f8>)
 80015be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015c0:	8979      	ldrh	r1, [r7, #10]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	6a3a      	ldr	r2, [r7, #32]
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f000 face 	bl	8001b68 <I2C_MasterRequestWrite>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e08d      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80015ec:	e066      	b.n	80016bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	6a39      	ldr	r1, [r7, #32]
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f000 fd22 	bl	800203c <I2C_WaitOnTXEFlagUntilTimeout>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00d      	beq.n	800161a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	2b04      	cmp	r3, #4
 8001604:	d107      	bne.n	8001616 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001614:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e06b      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161e:	781a      	ldrb	r2, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001634:	b29b      	uxth	r3, r3
 8001636:	3b01      	subs	r3, #1
 8001638:	b29a      	uxth	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001642:	3b01      	subs	r3, #1
 8001644:	b29a      	uxth	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b04      	cmp	r3, #4
 8001656:	d11b      	bne.n	8001690 <HAL_I2C_Master_Transmit+0x188>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800165c:	2b00      	cmp	r3, #0
 800165e:	d017      	beq.n	8001690 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001664:	781a      	ldrb	r2, [r3, #0]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800167a:	b29b      	uxth	r3, r3
 800167c:	3b01      	subs	r3, #1
 800167e:	b29a      	uxth	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001688:	3b01      	subs	r3, #1
 800168a:	b29a      	uxth	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	6a39      	ldr	r1, [r7, #32]
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f000 fd19 	bl	80020cc <I2C_WaitOnBTFFlagUntilTimeout>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00d      	beq.n	80016bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d107      	bne.n	80016b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e01a      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d194      	bne.n	80015ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2220      	movs	r2, #32
 80016d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e000      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80016f0:	2302      	movs	r3, #2
  }
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	00100002 	.word	0x00100002
 8001700:	ffff0000 	.word	0xffff0000

08001704 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	@ 0x30
 8001708:	af02      	add	r7, sp, #8
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	461a      	mov	r2, r3
 8001710:	460b      	mov	r3, r1
 8001712:	817b      	strh	r3, [r7, #10]
 8001714:	4613      	mov	r3, r2
 8001716:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff fb08 	bl	8000d2c <HAL_GetTick>
 800171c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b20      	cmp	r3, #32
 8001728:	f040 8217 	bne.w	8001b5a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800172c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2319      	movs	r3, #25
 8001732:	2201      	movs	r2, #1
 8001734:	497c      	ldr	r1, [pc, #496]	@ (8001928 <HAL_I2C_Master_Receive+0x224>)
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 fb66 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001742:	2302      	movs	r3, #2
 8001744:	e20a      	b.n	8001b5c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <HAL_I2C_Master_Receive+0x50>
 8001750:	2302      	movs	r3, #2
 8001752:	e203      	b.n	8001b5c <HAL_I2C_Master_Receive+0x458>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b01      	cmp	r3, #1
 8001768:	d007      	beq.n	800177a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0201 	orr.w	r2, r2, #1
 8001778:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001788:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2222      	movs	r2, #34	@ 0x22
 800178e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2210      	movs	r2, #16
 8001796:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	893a      	ldrh	r2, [r7, #8]
 80017aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4a5c      	ldr	r2, [pc, #368]	@ (800192c <HAL_I2C_Master_Receive+0x228>)
 80017ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017bc:	8979      	ldrh	r1, [r7, #10]
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 fa52 	bl	8001c6c <I2C_MasterRequestRead>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e1c4      	b.n	8001b5c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d113      	bne.n	8001802 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	623b      	str	r3, [r7, #32]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	623b      	str	r3, [r7, #32]
 80017ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	e198      	b.n	8001b34 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001806:	2b01      	cmp	r3, #1
 8001808:	d11b      	bne.n	8001842 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001818:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	61fb      	str	r3, [r7, #28]
 800182e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	e178      	b.n	8001b34 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001846:	2b02      	cmp	r3, #2
 8001848:	d11b      	bne.n	8001882 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001858:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001868:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	e158      	b.n	8001b34 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001890:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80018a8:	e144      	b.n	8001b34 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	f200 80f1 	bhi.w	8001a96 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d123      	bne.n	8001904 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 fc4b 	bl	800215c <I2C_WaitOnRXNEFlagUntilTimeout>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e145      	b.n	8001b5c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	691a      	ldr	r2, [r3, #16]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001902:	e117      	b.n	8001b34 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001908:	2b02      	cmp	r3, #2
 800190a:	d14e      	bne.n	80019aa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001912:	2200      	movs	r2, #0
 8001914:	4906      	ldr	r1, [pc, #24]	@ (8001930 <HAL_I2C_Master_Receive+0x22c>)
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 fa76 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d008      	beq.n	8001934 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e11a      	b.n	8001b5c <HAL_I2C_Master_Receive+0x458>
 8001926:	bf00      	nop
 8001928:	00100002 	.word	0x00100002
 800192c:	ffff0000 	.word	0xffff0000
 8001930:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001942:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691a      	ldr	r2, [r3, #16]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001960:	3b01      	subs	r3, #1
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800196c:	b29b      	uxth	r3, r3
 800196e:	3b01      	subs	r3, #1
 8001970:	b29a      	uxth	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001992:	3b01      	subs	r3, #1
 8001994:	b29a      	uxth	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800199e:	b29b      	uxth	r3, r3
 80019a0:	3b01      	subs	r3, #1
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80019a8:	e0c4      	b.n	8001b34 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019b0:	2200      	movs	r2, #0
 80019b2:	496c      	ldr	r1, [pc, #432]	@ (8001b64 <HAL_I2C_Master_Receive+0x460>)
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 fa27 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0cb      	b.n	8001b5c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	691a      	ldr	r2, [r3, #16]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	3b01      	subs	r3, #1
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4955      	ldr	r1, [pc, #340]	@ (8001b64 <HAL_I2C_Master_Receive+0x460>)
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 f9f9 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e09d      	b.n	8001b5c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	691a      	ldr	r2, [r3, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001a94:	e04e      	b.n	8001b34 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 fb5e 	bl	800215c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e058      	b.n	8001b5c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d124      	bne.n	8001b34 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d107      	bne.n	8001b02 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b00:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	691a      	ldr	r2, [r3, #16]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b14:	1c5a      	adds	r2, r3, #1
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f47f aeb6 	bne.w	80018aa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2220      	movs	r2, #32
 8001b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e000      	b.n	8001b5c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001b5a:	2302      	movs	r3, #2
  }
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3728      	adds	r7, #40	@ 0x28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	00010004 	.word	0x00010004

08001b68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	460b      	mov	r3, r1
 8001b76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d006      	beq.n	8001b92 <I2C_MasterRequestWrite+0x2a>
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d003      	beq.n	8001b92 <I2C_MasterRequestWrite+0x2a>
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b90:	d108      	bne.n	8001ba4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	e00b      	b.n	8001bbc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba8:	2b12      	cmp	r3, #18
 8001baa:	d107      	bne.n	8001bbc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 f91d 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00d      	beq.n	8001bf0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001be2:	d103      	bne.n	8001bec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e035      	b.n	8001c5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001bf8:	d108      	bne.n	8001c0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bfa:	897b      	ldrh	r3, [r7, #10]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c08:	611a      	str	r2, [r3, #16]
 8001c0a:	e01b      	b.n	8001c44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c0c:	897b      	ldrh	r3, [r7, #10]
 8001c0e:	11db      	asrs	r3, r3, #7
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	f003 0306 	and.w	r3, r3, #6
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	f063 030f 	orn	r3, r3, #15
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	490e      	ldr	r1, [pc, #56]	@ (8001c64 <I2C_MasterRequestWrite+0xfc>)
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 f966 	bl	8001efc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e010      	b.n	8001c5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c3a:	897b      	ldrh	r3, [r7, #10]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	4907      	ldr	r1, [pc, #28]	@ (8001c68 <I2C_MasterRequestWrite+0x100>)
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 f956 	bl	8001efc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	00010008 	.word	0x00010008
 8001c68:	00010002 	.word	0x00010002

08001c6c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c80:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c90:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d006      	beq.n	8001ca6 <I2C_MasterRequestRead+0x3a>
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d003      	beq.n	8001ca6 <I2C_MasterRequestRead+0x3a>
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ca4:	d108      	bne.n	8001cb8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	e00b      	b.n	8001cd0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbc:	2b11      	cmp	r3, #17
 8001cbe:	d107      	bne.n	8001cd0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f893 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00d      	beq.n	8001d04 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cf6:	d103      	bne.n	8001d00 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cfe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e079      	b.n	8001df8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d0c:	d108      	bne.n	8001d20 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d0e:	897b      	ldrh	r3, [r7, #10]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	611a      	str	r2, [r3, #16]
 8001d1e:	e05f      	b.n	8001de0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d20:	897b      	ldrh	r3, [r7, #10]
 8001d22:	11db      	asrs	r3, r3, #7
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	f003 0306 	and.w	r3, r3, #6
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f063 030f 	orn	r3, r3, #15
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	4930      	ldr	r1, [pc, #192]	@ (8001e00 <I2C_MasterRequestRead+0x194>)
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 f8dc 	bl	8001efc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e054      	b.n	8001df8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d4e:	897b      	ldrh	r3, [r7, #10]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	4929      	ldr	r1, [pc, #164]	@ (8001e04 <I2C_MasterRequestRead+0x198>)
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 f8cc 	bl	8001efc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e044      	b.n	8001df8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d92:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 f831 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00d      	beq.n	8001dc8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dba:	d103      	bne.n	8001dc4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dc2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e017      	b.n	8001df8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001dc8:	897b      	ldrh	r3, [r7, #10]
 8001dca:	11db      	asrs	r3, r3, #7
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	f003 0306 	and.w	r3, r3, #6
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	f063 030e 	orn	r3, r3, #14
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	4907      	ldr	r1, [pc, #28]	@ (8001e04 <I2C_MasterRequestRead+0x198>)
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f888 	bl	8001efc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	00010008 	.word	0x00010008
 8001e04:	00010002 	.word	0x00010002

08001e08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	4613      	mov	r3, r2
 8001e16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e18:	e048      	b.n	8001eac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e20:	d044      	beq.n	8001eac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e22:	f7fe ff83 	bl	8000d2c <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d302      	bcc.n	8001e38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d139      	bne.n	8001eac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	0c1b      	lsrs	r3, r3, #16
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d10d      	bne.n	8001e5e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	43da      	mvns	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bf0c      	ite	eq
 8001e54:	2301      	moveq	r3, #1
 8001e56:	2300      	movne	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	e00c      	b.n	8001e78 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	43da      	mvns	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	461a      	mov	r2, r3
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d116      	bne.n	8001eac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	f043 0220 	orr.w	r2, r3, #32
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e023      	b.n	8001ef4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	0c1b      	lsrs	r3, r3, #16
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d10d      	bne.n	8001ed2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	43da      	mvns	r2, r3
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	e00c      	b.n	8001eec <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	43da      	mvns	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	4013      	ands	r3, r2
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d093      	beq.n	8001e1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f0a:	e071      	b.n	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f1a:	d123      	bne.n	8001f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f2a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	f043 0204 	orr.w	r2, r3, #4
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e067      	b.n	8002034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6a:	d041      	beq.n	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6c:	f7fe fede 	bl	8000d2c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d302      	bcc.n	8001f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d136      	bne.n	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	0c1b      	lsrs	r3, r3, #16
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d10c      	bne.n	8001fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	43da      	mvns	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4013      	ands	r3, r2
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bf14      	ite	ne
 8001f9e:	2301      	movne	r3, #1
 8001fa0:	2300      	moveq	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	e00b      	b.n	8001fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	43da      	mvns	r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf14      	ite	ne
 8001fb8:	2301      	movne	r3, #1
 8001fba:	2300      	moveq	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d016      	beq.n	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fdc:	f043 0220 	orr.w	r2, r3, #32
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e021      	b.n	8002034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	0c1b      	lsrs	r3, r3, #16
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d10c      	bne.n	8002014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	43da      	mvns	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	4013      	ands	r3, r2
 8002006:	b29b      	uxth	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	bf14      	ite	ne
 800200c:	2301      	movne	r3, #1
 800200e:	2300      	moveq	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	e00b      	b.n	800202c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	43da      	mvns	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4013      	ands	r3, r2
 8002020:	b29b      	uxth	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	bf14      	ite	ne
 8002026:	2301      	movne	r3, #1
 8002028:	2300      	moveq	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	f47f af6d 	bne.w	8001f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002048:	e034      	b.n	80020b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f8e3 	bl	8002216 <I2C_IsAcknowledgeFailed>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e034      	b.n	80020c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d028      	beq.n	80020b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002062:	f7fe fe63 	bl	8000d2c <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	429a      	cmp	r2, r3
 8002070:	d302      	bcc.n	8002078 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d11d      	bne.n	80020b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002082:	2b80      	cmp	r3, #128	@ 0x80
 8002084:	d016      	beq.n	80020b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2220      	movs	r2, #32
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a0:	f043 0220 	orr.w	r2, r3, #32
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e007      	b.n	80020c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020be:	2b80      	cmp	r3, #128	@ 0x80
 80020c0:	d1c3      	bne.n	800204a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020d8:	e034      	b.n	8002144 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f89b 	bl	8002216 <I2C_IsAcknowledgeFailed>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e034      	b.n	8002154 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f0:	d028      	beq.n	8002144 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f2:	f7fe fe1b 	bl	8000d2c <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d302      	bcc.n	8002108 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d11d      	bne.n	8002144 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b04      	cmp	r3, #4
 8002114:	d016      	beq.n	8002144 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	f043 0220 	orr.w	r2, r3, #32
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e007      	b.n	8002154 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b04      	cmp	r3, #4
 8002150:	d1c3      	bne.n	80020da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002168:	e049      	b.n	80021fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b10      	cmp	r3, #16
 8002176:	d119      	bne.n	80021ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0210 	mvn.w	r2, #16
 8002180:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e030      	b.n	800220e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ac:	f7fe fdbe 	bl	8000d2c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d302      	bcc.n	80021c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d11d      	bne.n	80021fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021cc:	2b40      	cmp	r3, #64	@ 0x40
 80021ce:	d016      	beq.n	80021fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2220      	movs	r2, #32
 80021da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	f043 0220 	orr.w	r2, r3, #32
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e007      	b.n	800220e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002208:	2b40      	cmp	r3, #64	@ 0x40
 800220a:	d1ae      	bne.n	800216a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800222c:	d11b      	bne.n	8002266 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002236:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2220      	movs	r2, #32
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	f043 0204 	orr.w	r2, r3, #4
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0cc      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002288:	4b68      	ldr	r3, [pc, #416]	@ (800242c <HAL_RCC_ClockConfig+0x1b8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 030f 	and.w	r3, r3, #15
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d90c      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002296:	4b65      	ldr	r3, [pc, #404]	@ (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229e:	4b63      	ldr	r3, [pc, #396]	@ (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0b8      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d020      	beq.n	80022fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c8:	4b59      	ldr	r3, [pc, #356]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4a58      	ldr	r2, [pc, #352]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022e0:	4b53      	ldr	r3, [pc, #332]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a52      	ldr	r2, [pc, #328]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ec:	4b50      	ldr	r3, [pc, #320]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	494d      	ldr	r1, [pc, #308]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d044      	beq.n	8002394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d107      	bne.n	8002322 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	4b47      	ldr	r3, [pc, #284]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d119      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e07f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d003      	beq.n	8002332 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232e:	2b03      	cmp	r3, #3
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002332:	4b3f      	ldr	r3, [pc, #252]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e06f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002342:	4b3b      	ldr	r3, [pc, #236]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e067      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002352:	4b37      	ldr	r3, [pc, #220]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f023 0203 	bic.w	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4934      	ldr	r1, [pc, #208]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	4313      	orrs	r3, r2
 8002362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002364:	f7fe fce2 	bl	8000d2c <HAL_GetTick>
 8002368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	e00a      	b.n	8002382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236c:	f7fe fcde 	bl	8000d2c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e04f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	4b2b      	ldr	r3, [pc, #172]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 020c 	and.w	r2, r3, #12
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	429a      	cmp	r2, r3
 8002392:	d1eb      	bne.n	800236c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002394:	4b25      	ldr	r3, [pc, #148]	@ (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d20c      	bcs.n	80023bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b22      	ldr	r3, [pc, #136]	@ (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b20      	ldr	r3, [pc, #128]	@ (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e032      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c8:	4b19      	ldr	r3, [pc, #100]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4916      	ldr	r1, [pc, #88]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e6:	4b12      	ldr	r3, [pc, #72]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	490e      	ldr	r1, [pc, #56]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023fa:	f000 f841 	bl	8002480 <HAL_RCC_GetSysClockFreq>
 80023fe:	4602      	mov	r2, r0
 8002400:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	490a      	ldr	r1, [pc, #40]	@ (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	5ccb      	ldrb	r3, [r1, r3]
 800240e:	fa22 f303 	lsr.w	r3, r2, r3
 8002412:	4a09      	ldr	r2, [pc, #36]	@ (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002416:	4b09      	ldr	r3, [pc, #36]	@ (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe fc42 	bl	8000ca4 <HAL_InitTick>

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023c00 	.word	0x40023c00
 8002430:	40023800 	.word	0x40023800
 8002434:	08003cac 	.word	0x08003cac
 8002438:	20000000 	.word	0x20000000
 800243c:	20000004 	.word	0x20000004

08002440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002444:	4b03      	ldr	r3, [pc, #12]	@ (8002454 <HAL_RCC_GetHCLKFreq+0x14>)
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	20000000 	.word	0x20000000

08002458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800245c:	f7ff fff0 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	0a9b      	lsrs	r3, r3, #10
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4903      	ldr	r1, [pc, #12]	@ (800247c <HAL_RCC_GetPCLK1Freq+0x24>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40023800 	.word	0x40023800
 800247c:	08003cbc 	.word	0x08003cbc

08002480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002484:	b0ae      	sub	sp, #184	@ 0xb8
 8002486:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024a6:	4bcb      	ldr	r3, [pc, #812]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b0c      	cmp	r3, #12
 80024b0:	f200 8206 	bhi.w	80028c0 <HAL_RCC_GetSysClockFreq+0x440>
 80024b4:	a201      	add	r2, pc, #4	@ (adr r2, 80024bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80024b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ba:	bf00      	nop
 80024bc:	080024f1 	.word	0x080024f1
 80024c0:	080028c1 	.word	0x080028c1
 80024c4:	080028c1 	.word	0x080028c1
 80024c8:	080028c1 	.word	0x080028c1
 80024cc:	080024f9 	.word	0x080024f9
 80024d0:	080028c1 	.word	0x080028c1
 80024d4:	080028c1 	.word	0x080028c1
 80024d8:	080028c1 	.word	0x080028c1
 80024dc:	08002501 	.word	0x08002501
 80024e0:	080028c1 	.word	0x080028c1
 80024e4:	080028c1 	.word	0x080028c1
 80024e8:	080028c1 	.word	0x080028c1
 80024ec:	080026f1 	.word	0x080026f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024f0:	4bb9      	ldr	r3, [pc, #740]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x358>)
 80024f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80024f6:	e1e7      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024f8:	4bb8      	ldr	r3, [pc, #736]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x35c>)
 80024fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024fe:	e1e3      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002500:	4bb4      	ldr	r3, [pc, #720]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002508:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800250c:	4bb1      	ldr	r3, [pc, #708]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d071      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002518:	4bae      	ldr	r3, [pc, #696]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	099b      	lsrs	r3, r3, #6
 800251e:	2200      	movs	r2, #0
 8002520:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002524:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002528:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800252c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002530:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002534:	2300      	movs	r3, #0
 8002536:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800253a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800253e:	4622      	mov	r2, r4
 8002540:	462b      	mov	r3, r5
 8002542:	f04f 0000 	mov.w	r0, #0
 8002546:	f04f 0100 	mov.w	r1, #0
 800254a:	0159      	lsls	r1, r3, #5
 800254c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002550:	0150      	lsls	r0, r2, #5
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4621      	mov	r1, r4
 8002558:	1a51      	subs	r1, r2, r1
 800255a:	6439      	str	r1, [r7, #64]	@ 0x40
 800255c:	4629      	mov	r1, r5
 800255e:	eb63 0301 	sbc.w	r3, r3, r1
 8002562:	647b      	str	r3, [r7, #68]	@ 0x44
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002570:	4649      	mov	r1, r9
 8002572:	018b      	lsls	r3, r1, #6
 8002574:	4641      	mov	r1, r8
 8002576:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800257a:	4641      	mov	r1, r8
 800257c:	018a      	lsls	r2, r1, #6
 800257e:	4641      	mov	r1, r8
 8002580:	1a51      	subs	r1, r2, r1
 8002582:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002584:	4649      	mov	r1, r9
 8002586:	eb63 0301 	sbc.w	r3, r3, r1
 800258a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002598:	4649      	mov	r1, r9
 800259a:	00cb      	lsls	r3, r1, #3
 800259c:	4641      	mov	r1, r8
 800259e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025a2:	4641      	mov	r1, r8
 80025a4:	00ca      	lsls	r2, r1, #3
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	4603      	mov	r3, r0
 80025ac:	4622      	mov	r2, r4
 80025ae:	189b      	adds	r3, r3, r2
 80025b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80025b2:	462b      	mov	r3, r5
 80025b4:	460a      	mov	r2, r1
 80025b6:	eb42 0303 	adc.w	r3, r2, r3
 80025ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025c8:	4629      	mov	r1, r5
 80025ca:	024b      	lsls	r3, r1, #9
 80025cc:	4621      	mov	r1, r4
 80025ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025d2:	4621      	mov	r1, r4
 80025d4:	024a      	lsls	r2, r1, #9
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025de:	2200      	movs	r2, #0
 80025e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80025e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80025e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80025ec:	f7fd fe60 	bl	80002b0 <__aeabi_uldivmod>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4613      	mov	r3, r2
 80025f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025fa:	e067      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025fc:	4b75      	ldr	r3, [pc, #468]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	099b      	lsrs	r3, r3, #6
 8002602:	2200      	movs	r2, #0
 8002604:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002608:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800260c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002614:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002616:	2300      	movs	r3, #0
 8002618:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800261a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800261e:	4622      	mov	r2, r4
 8002620:	462b      	mov	r3, r5
 8002622:	f04f 0000 	mov.w	r0, #0
 8002626:	f04f 0100 	mov.w	r1, #0
 800262a:	0159      	lsls	r1, r3, #5
 800262c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002630:	0150      	lsls	r0, r2, #5
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4621      	mov	r1, r4
 8002638:	1a51      	subs	r1, r2, r1
 800263a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800263c:	4629      	mov	r1, r5
 800263e:	eb63 0301 	sbc.w	r3, r3, r1
 8002642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002650:	4649      	mov	r1, r9
 8002652:	018b      	lsls	r3, r1, #6
 8002654:	4641      	mov	r1, r8
 8002656:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800265a:	4641      	mov	r1, r8
 800265c:	018a      	lsls	r2, r1, #6
 800265e:	4641      	mov	r1, r8
 8002660:	ebb2 0a01 	subs.w	sl, r2, r1
 8002664:	4649      	mov	r1, r9
 8002666:	eb63 0b01 	sbc.w	fp, r3, r1
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002676:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800267a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800267e:	4692      	mov	sl, r2
 8002680:	469b      	mov	fp, r3
 8002682:	4623      	mov	r3, r4
 8002684:	eb1a 0303 	adds.w	r3, sl, r3
 8002688:	623b      	str	r3, [r7, #32]
 800268a:	462b      	mov	r3, r5
 800268c:	eb4b 0303 	adc.w	r3, fp, r3
 8002690:	627b      	str	r3, [r7, #36]	@ 0x24
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800269e:	4629      	mov	r1, r5
 80026a0:	028b      	lsls	r3, r1, #10
 80026a2:	4621      	mov	r1, r4
 80026a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026a8:	4621      	mov	r1, r4
 80026aa:	028a      	lsls	r2, r1, #10
 80026ac:	4610      	mov	r0, r2
 80026ae:	4619      	mov	r1, r3
 80026b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026b4:	2200      	movs	r2, #0
 80026b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80026b8:	677a      	str	r2, [r7, #116]	@ 0x74
 80026ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80026be:	f7fd fdf7 	bl	80002b0 <__aeabi_uldivmod>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4613      	mov	r3, r2
 80026c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026cc:	4b41      	ldr	r3, [pc, #260]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	0c1b      	lsrs	r3, r3, #16
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	3301      	adds	r3, #1
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80026de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80026e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026ee:	e0eb      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026f0:	4b38      	ldr	r3, [pc, #224]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026fc:	4b35      	ldr	r3, [pc, #212]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d06b      	beq.n	80027e0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002708:	4b32      	ldr	r3, [pc, #200]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	099b      	lsrs	r3, r3, #6
 800270e:	2200      	movs	r2, #0
 8002710:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002712:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002714:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800271a:	663b      	str	r3, [r7, #96]	@ 0x60
 800271c:	2300      	movs	r3, #0
 800271e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002720:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002724:	4622      	mov	r2, r4
 8002726:	462b      	mov	r3, r5
 8002728:	f04f 0000 	mov.w	r0, #0
 800272c:	f04f 0100 	mov.w	r1, #0
 8002730:	0159      	lsls	r1, r3, #5
 8002732:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002736:	0150      	lsls	r0, r2, #5
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4621      	mov	r1, r4
 800273e:	1a51      	subs	r1, r2, r1
 8002740:	61b9      	str	r1, [r7, #24]
 8002742:	4629      	mov	r1, r5
 8002744:	eb63 0301 	sbc.w	r3, r3, r1
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002756:	4659      	mov	r1, fp
 8002758:	018b      	lsls	r3, r1, #6
 800275a:	4651      	mov	r1, sl
 800275c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002760:	4651      	mov	r1, sl
 8002762:	018a      	lsls	r2, r1, #6
 8002764:	4651      	mov	r1, sl
 8002766:	ebb2 0801 	subs.w	r8, r2, r1
 800276a:	4659      	mov	r1, fp
 800276c:	eb63 0901 	sbc.w	r9, r3, r1
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800277c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002780:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002784:	4690      	mov	r8, r2
 8002786:	4699      	mov	r9, r3
 8002788:	4623      	mov	r3, r4
 800278a:	eb18 0303 	adds.w	r3, r8, r3
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	462b      	mov	r3, r5
 8002792:	eb49 0303 	adc.w	r3, r9, r3
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80027a4:	4629      	mov	r1, r5
 80027a6:	024b      	lsls	r3, r1, #9
 80027a8:	4621      	mov	r1, r4
 80027aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027ae:	4621      	mov	r1, r4
 80027b0:	024a      	lsls	r2, r1, #9
 80027b2:	4610      	mov	r0, r2
 80027b4:	4619      	mov	r1, r3
 80027b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027ba:	2200      	movs	r2, #0
 80027bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027be:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80027c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027c4:	f7fd fd74 	bl	80002b0 <__aeabi_uldivmod>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4613      	mov	r3, r2
 80027ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027d2:	e065      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x420>
 80027d4:	40023800 	.word	0x40023800
 80027d8:	00f42400 	.word	0x00f42400
 80027dc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e0:	4b3d      	ldr	r3, [pc, #244]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	099b      	lsrs	r3, r3, #6
 80027e6:	2200      	movs	r2, #0
 80027e8:	4618      	mov	r0, r3
 80027ea:	4611      	mov	r1, r2
 80027ec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80027f2:	2300      	movs	r3, #0
 80027f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80027f6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80027fa:	4642      	mov	r2, r8
 80027fc:	464b      	mov	r3, r9
 80027fe:	f04f 0000 	mov.w	r0, #0
 8002802:	f04f 0100 	mov.w	r1, #0
 8002806:	0159      	lsls	r1, r3, #5
 8002808:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800280c:	0150      	lsls	r0, r2, #5
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4641      	mov	r1, r8
 8002814:	1a51      	subs	r1, r2, r1
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	4649      	mov	r1, r9
 800281a:	eb63 0301 	sbc.w	r3, r3, r1
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800282c:	4659      	mov	r1, fp
 800282e:	018b      	lsls	r3, r1, #6
 8002830:	4651      	mov	r1, sl
 8002832:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002836:	4651      	mov	r1, sl
 8002838:	018a      	lsls	r2, r1, #6
 800283a:	4651      	mov	r1, sl
 800283c:	1a54      	subs	r4, r2, r1
 800283e:	4659      	mov	r1, fp
 8002840:	eb63 0501 	sbc.w	r5, r3, r1
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	00eb      	lsls	r3, r5, #3
 800284e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002852:	00e2      	lsls	r2, r4, #3
 8002854:	4614      	mov	r4, r2
 8002856:	461d      	mov	r5, r3
 8002858:	4643      	mov	r3, r8
 800285a:	18e3      	adds	r3, r4, r3
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	464b      	mov	r3, r9
 8002860:	eb45 0303 	adc.w	r3, r5, r3
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002872:	4629      	mov	r1, r5
 8002874:	028b      	lsls	r3, r1, #10
 8002876:	4621      	mov	r1, r4
 8002878:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800287c:	4621      	mov	r1, r4
 800287e:	028a      	lsls	r2, r1, #10
 8002880:	4610      	mov	r0, r2
 8002882:	4619      	mov	r1, r3
 8002884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002888:	2200      	movs	r2, #0
 800288a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800288c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800288e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002892:	f7fd fd0d 	bl	80002b0 <__aeabi_uldivmod>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4613      	mov	r3, r2
 800289c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80028a0:	4b0d      	ldr	r3, [pc, #52]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	0f1b      	lsrs	r3, r3, #28
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80028ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80028b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028be:	e003      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028c0:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x45c>)
 80028c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	37b8      	adds	r7, #184	@ 0xb8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800
 80028dc:	00f42400 	.word	0x00f42400

080028e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e28d      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 8083 	beq.w	8002a06 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002900:	4b94      	ldr	r3, [pc, #592]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b04      	cmp	r3, #4
 800290a:	d019      	beq.n	8002940 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800290c:	4b91      	ldr	r3, [pc, #580]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002914:	2b08      	cmp	r3, #8
 8002916:	d106      	bne.n	8002926 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002918:	4b8e      	ldr	r3, [pc, #568]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002920:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002924:	d00c      	beq.n	8002940 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002926:	4b8b      	ldr	r3, [pc, #556]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800292e:	2b0c      	cmp	r3, #12
 8002930:	d112      	bne.n	8002958 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002932:	4b88      	ldr	r3, [pc, #544]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800293a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800293e:	d10b      	bne.n	8002958 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	4b84      	ldr	r3, [pc, #528]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d05b      	beq.n	8002a04 <HAL_RCC_OscConfig+0x124>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d157      	bne.n	8002a04 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e25a      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002960:	d106      	bne.n	8002970 <HAL_RCC_OscConfig+0x90>
 8002962:	4b7c      	ldr	r3, [pc, #496]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a7b      	ldr	r2, [pc, #492]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002968:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e01d      	b.n	80029ac <HAL_RCC_OscConfig+0xcc>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0xb4>
 800297a:	4b76      	ldr	r3, [pc, #472]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a75      	ldr	r2, [pc, #468]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002980:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	4b73      	ldr	r3, [pc, #460]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a72      	ldr	r2, [pc, #456]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0xcc>
 8002994:	4b6f      	ldr	r3, [pc, #444]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a6e      	ldr	r2, [pc, #440]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 800299a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b6c      	ldr	r3, [pc, #432]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a6b      	ldr	r2, [pc, #428]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 80029a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d013      	beq.n	80029dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe f9ba 	bl	8000d2c <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029bc:	f7fe f9b6 	bl	8000d2c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	@ 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e21f      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b61      	ldr	r3, [pc, #388]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0xdc>
 80029da:	e014      	b.n	8002a06 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7fe f9a6 	bl	8000d2c <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e4:	f7fe f9a2 	bl	8000d2c <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	@ 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e20b      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f6:	4b57      	ldr	r3, [pc, #348]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x104>
 8002a02:	e000      	b.n	8002a06 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d06f      	beq.n	8002af2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a12:	4b50      	ldr	r3, [pc, #320]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d017      	beq.n	8002a4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a1e:	4b4d      	ldr	r3, [pc, #308]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d105      	bne.n	8002a36 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a36:	4b47      	ldr	r3, [pc, #284]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a3e:	2b0c      	cmp	r3, #12
 8002a40:	d11c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a42:	4b44      	ldr	r3, [pc, #272]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d116      	bne.n	8002a7c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4e:	4b41      	ldr	r3, [pc, #260]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_RCC_OscConfig+0x186>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d001      	beq.n	8002a66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e1d3      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a66:	4b3b      	ldr	r3, [pc, #236]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4937      	ldr	r1, [pc, #220]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	e03a      	b.n	8002af2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d020      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a84:	4b34      	ldr	r3, [pc, #208]	@ (8002b58 <HAL_RCC_OscConfig+0x278>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8a:	f7fe f94f 	bl	8000d2c <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a92:	f7fe f94b 	bl	8000d2c <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e1b4      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab0:	4b28      	ldr	r3, [pc, #160]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4925      	ldr	r1, [pc, #148]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	600b      	str	r3, [r1, #0]
 8002ac4:	e015      	b.n	8002af2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac6:	4b24      	ldr	r3, [pc, #144]	@ (8002b58 <HAL_RCC_OscConfig+0x278>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7fe f92e 	bl	8000d2c <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ad4:	f7fe f92a 	bl	8000d2c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e193      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d036      	beq.n	8002b6c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d016      	beq.n	8002b34 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b06:	4b15      	ldr	r3, [pc, #84]	@ (8002b5c <HAL_RCC_OscConfig+0x27c>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0c:	f7fe f90e 	bl	8000d2c <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b14:	f7fe f90a 	bl	8000d2c <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e173      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b26:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x234>
 8002b32:	e01b      	b.n	8002b6c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b34:	4b09      	ldr	r3, [pc, #36]	@ (8002b5c <HAL_RCC_OscConfig+0x27c>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3a:	f7fe f8f7 	bl	8000d2c <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b40:	e00e      	b.n	8002b60 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b42:	f7fe f8f3 	bl	8000d2c <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d907      	bls.n	8002b60 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e15c      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
 8002b54:	40023800 	.word	0x40023800
 8002b58:	42470000 	.word	0x42470000
 8002b5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b60:	4b8a      	ldr	r3, [pc, #552]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1ea      	bne.n	8002b42 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 8097 	beq.w	8002ca8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b7e:	4b83      	ldr	r3, [pc, #524]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10f      	bne.n	8002baa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	4a7e      	ldr	r2, [pc, #504]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b9a:	4b7c      	ldr	r3, [pc, #496]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002baa:	4b79      	ldr	r3, [pc, #484]	@ (8002d90 <HAL_RCC_OscConfig+0x4b0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d118      	bne.n	8002be8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb6:	4b76      	ldr	r3, [pc, #472]	@ (8002d90 <HAL_RCC_OscConfig+0x4b0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a75      	ldr	r2, [pc, #468]	@ (8002d90 <HAL_RCC_OscConfig+0x4b0>)
 8002bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc2:	f7fe f8b3 	bl	8000d2c <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bca:	f7fe f8af 	bl	8000d2c <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e118      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bdc:	4b6c      	ldr	r3, [pc, #432]	@ (8002d90 <HAL_RCC_OscConfig+0x4b0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d106      	bne.n	8002bfe <HAL_RCC_OscConfig+0x31e>
 8002bf0:	4b66      	ldr	r3, [pc, #408]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf4:	4a65      	ldr	r2, [pc, #404]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bfc:	e01c      	b.n	8002c38 <HAL_RCC_OscConfig+0x358>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b05      	cmp	r3, #5
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCC_OscConfig+0x340>
 8002c06:	4b61      	ldr	r3, [pc, #388]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0a:	4a60      	ldr	r2, [pc, #384]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c0c:	f043 0304 	orr.w	r3, r3, #4
 8002c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c12:	4b5e      	ldr	r3, [pc, #376]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c16:	4a5d      	ldr	r2, [pc, #372]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c1e:	e00b      	b.n	8002c38 <HAL_RCC_OscConfig+0x358>
 8002c20:	4b5a      	ldr	r3, [pc, #360]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c24:	4a59      	ldr	r2, [pc, #356]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c26:	f023 0301 	bic.w	r3, r3, #1
 8002c2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c2c:	4b57      	ldr	r3, [pc, #348]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c30:	4a56      	ldr	r2, [pc, #344]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c32:	f023 0304 	bic.w	r3, r3, #4
 8002c36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d015      	beq.n	8002c6c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c40:	f7fe f874 	bl	8000d2c <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c48:	f7fe f870 	bl	8000d2c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e0d7      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5e:	4b4b      	ldr	r3, [pc, #300]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0ee      	beq.n	8002c48 <HAL_RCC_OscConfig+0x368>
 8002c6a:	e014      	b.n	8002c96 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6c:	f7fe f85e 	bl	8000d2c <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c74:	f7fe f85a 	bl	8000d2c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e0c1      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c8a:	4b40      	ldr	r3, [pc, #256]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1ee      	bne.n	8002c74 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d105      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	4a3a      	ldr	r2, [pc, #232]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002ca2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ca6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80ad 	beq.w	8002e0c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cb2:	4b36      	ldr	r3, [pc, #216]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d060      	beq.n	8002d80 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d145      	bne.n	8002d52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc6:	4b33      	ldr	r3, [pc, #204]	@ (8002d94 <HAL_RCC_OscConfig+0x4b4>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fe f82e 	bl	8000d2c <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7fe f82a 	bl	8000d2c <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e093      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce6:	4b29      	ldr	r3, [pc, #164]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69da      	ldr	r2, [r3, #28]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	019b      	lsls	r3, r3, #6
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d08:	085b      	lsrs	r3, r3, #1
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	041b      	lsls	r3, r3, #16
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d14:	061b      	lsls	r3, r3, #24
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1c:	071b      	lsls	r3, r3, #28
 8002d1e:	491b      	ldr	r1, [pc, #108]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d24:	4b1b      	ldr	r3, [pc, #108]	@ (8002d94 <HAL_RCC_OscConfig+0x4b4>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7fd ffff 	bl	8000d2c <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d32:	f7fd fffb 	bl	8000d2c <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e064      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d44:	4b11      	ldr	r3, [pc, #68]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x452>
 8002d50:	e05c      	b.n	8002e0c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d52:	4b10      	ldr	r3, [pc, #64]	@ (8002d94 <HAL_RCC_OscConfig+0x4b4>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7fd ffe8 	bl	8000d2c <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d60:	f7fd ffe4 	bl	8000d2c <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e04d      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d72:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x480>
 8002d7e:	e045      	b.n	8002e0c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e040      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40007000 	.word	0x40007000
 8002d94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d98:	4b1f      	ldr	r3, [pc, #124]	@ (8002e18 <HAL_RCC_OscConfig+0x538>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d030      	beq.n	8002e08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d129      	bne.n	8002e08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d122      	bne.n	8002e08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002dc8:	4013      	ands	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d119      	bne.n	8002e08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dde:	085b      	lsrs	r3, r3, #1
 8002de0:	3b01      	subs	r3, #1
 8002de2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d10f      	bne.n	8002e08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d107      	bne.n	8002e08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800

08002e1c <std>:
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	b510      	push	{r4, lr}
 8002e20:	4604      	mov	r4, r0
 8002e22:	e9c0 3300 	strd	r3, r3, [r0]
 8002e26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e2a:	6083      	str	r3, [r0, #8]
 8002e2c:	8181      	strh	r1, [r0, #12]
 8002e2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002e30:	81c2      	strh	r2, [r0, #14]
 8002e32:	6183      	str	r3, [r0, #24]
 8002e34:	4619      	mov	r1, r3
 8002e36:	2208      	movs	r2, #8
 8002e38:	305c      	adds	r0, #92	@ 0x5c
 8002e3a:	f000 f906 	bl	800304a <memset>
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e74 <std+0x58>)
 8002e40:	6263      	str	r3, [r4, #36]	@ 0x24
 8002e42:	4b0d      	ldr	r3, [pc, #52]	@ (8002e78 <std+0x5c>)
 8002e44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002e46:	4b0d      	ldr	r3, [pc, #52]	@ (8002e7c <std+0x60>)
 8002e48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e80 <std+0x64>)
 8002e4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e84 <std+0x68>)
 8002e50:	6224      	str	r4, [r4, #32]
 8002e52:	429c      	cmp	r4, r3
 8002e54:	d006      	beq.n	8002e64 <std+0x48>
 8002e56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002e5a:	4294      	cmp	r4, r2
 8002e5c:	d002      	beq.n	8002e64 <std+0x48>
 8002e5e:	33d0      	adds	r3, #208	@ 0xd0
 8002e60:	429c      	cmp	r4, r3
 8002e62:	d105      	bne.n	8002e70 <std+0x54>
 8002e64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e6c:	f000 b966 	b.w	800313c <__retarget_lock_init_recursive>
 8002e70:	bd10      	pop	{r4, pc}
 8002e72:	bf00      	nop
 8002e74:	08002fc5 	.word	0x08002fc5
 8002e78:	08002fe7 	.word	0x08002fe7
 8002e7c:	0800301f 	.word	0x0800301f
 8002e80:	08003043 	.word	0x08003043
 8002e84:	20000134 	.word	0x20000134

08002e88 <stdio_exit_handler>:
 8002e88:	4a02      	ldr	r2, [pc, #8]	@ (8002e94 <stdio_exit_handler+0xc>)
 8002e8a:	4903      	ldr	r1, [pc, #12]	@ (8002e98 <stdio_exit_handler+0x10>)
 8002e8c:	4803      	ldr	r0, [pc, #12]	@ (8002e9c <stdio_exit_handler+0x14>)
 8002e8e:	f000 b869 	b.w	8002f64 <_fwalk_sglue>
 8002e92:	bf00      	nop
 8002e94:	2000000c 	.word	0x2000000c
 8002e98:	080039dd 	.word	0x080039dd
 8002e9c:	2000001c 	.word	0x2000001c

08002ea0 <cleanup_stdio>:
 8002ea0:	6841      	ldr	r1, [r0, #4]
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed4 <cleanup_stdio+0x34>)
 8002ea4:	4299      	cmp	r1, r3
 8002ea6:	b510      	push	{r4, lr}
 8002ea8:	4604      	mov	r4, r0
 8002eaa:	d001      	beq.n	8002eb0 <cleanup_stdio+0x10>
 8002eac:	f000 fd96 	bl	80039dc <_fflush_r>
 8002eb0:	68a1      	ldr	r1, [r4, #8]
 8002eb2:	4b09      	ldr	r3, [pc, #36]	@ (8002ed8 <cleanup_stdio+0x38>)
 8002eb4:	4299      	cmp	r1, r3
 8002eb6:	d002      	beq.n	8002ebe <cleanup_stdio+0x1e>
 8002eb8:	4620      	mov	r0, r4
 8002eba:	f000 fd8f 	bl	80039dc <_fflush_r>
 8002ebe:	68e1      	ldr	r1, [r4, #12]
 8002ec0:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <cleanup_stdio+0x3c>)
 8002ec2:	4299      	cmp	r1, r3
 8002ec4:	d004      	beq.n	8002ed0 <cleanup_stdio+0x30>
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ecc:	f000 bd86 	b.w	80039dc <_fflush_r>
 8002ed0:	bd10      	pop	{r4, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000134 	.word	0x20000134
 8002ed8:	2000019c 	.word	0x2000019c
 8002edc:	20000204 	.word	0x20000204

08002ee0 <global_stdio_init.part.0>:
 8002ee0:	b510      	push	{r4, lr}
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <global_stdio_init.part.0+0x30>)
 8002ee4:	4c0b      	ldr	r4, [pc, #44]	@ (8002f14 <global_stdio_init.part.0+0x34>)
 8002ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8002f18 <global_stdio_init.part.0+0x38>)
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	4620      	mov	r0, r4
 8002eec:	2200      	movs	r2, #0
 8002eee:	2104      	movs	r1, #4
 8002ef0:	f7ff ff94 	bl	8002e1c <std>
 8002ef4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002ef8:	2201      	movs	r2, #1
 8002efa:	2109      	movs	r1, #9
 8002efc:	f7ff ff8e 	bl	8002e1c <std>
 8002f00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002f04:	2202      	movs	r2, #2
 8002f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f0a:	2112      	movs	r1, #18
 8002f0c:	f7ff bf86 	b.w	8002e1c <std>
 8002f10:	2000026c 	.word	0x2000026c
 8002f14:	20000134 	.word	0x20000134
 8002f18:	08002e89 	.word	0x08002e89

08002f1c <__sfp_lock_acquire>:
 8002f1c:	4801      	ldr	r0, [pc, #4]	@ (8002f24 <__sfp_lock_acquire+0x8>)
 8002f1e:	f000 b90e 	b.w	800313e <__retarget_lock_acquire_recursive>
 8002f22:	bf00      	nop
 8002f24:	20000275 	.word	0x20000275

08002f28 <__sfp_lock_release>:
 8002f28:	4801      	ldr	r0, [pc, #4]	@ (8002f30 <__sfp_lock_release+0x8>)
 8002f2a:	f000 b909 	b.w	8003140 <__retarget_lock_release_recursive>
 8002f2e:	bf00      	nop
 8002f30:	20000275 	.word	0x20000275

08002f34 <__sinit>:
 8002f34:	b510      	push	{r4, lr}
 8002f36:	4604      	mov	r4, r0
 8002f38:	f7ff fff0 	bl	8002f1c <__sfp_lock_acquire>
 8002f3c:	6a23      	ldr	r3, [r4, #32]
 8002f3e:	b11b      	cbz	r3, 8002f48 <__sinit+0x14>
 8002f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f44:	f7ff bff0 	b.w	8002f28 <__sfp_lock_release>
 8002f48:	4b04      	ldr	r3, [pc, #16]	@ (8002f5c <__sinit+0x28>)
 8002f4a:	6223      	str	r3, [r4, #32]
 8002f4c:	4b04      	ldr	r3, [pc, #16]	@ (8002f60 <__sinit+0x2c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f5      	bne.n	8002f40 <__sinit+0xc>
 8002f54:	f7ff ffc4 	bl	8002ee0 <global_stdio_init.part.0>
 8002f58:	e7f2      	b.n	8002f40 <__sinit+0xc>
 8002f5a:	bf00      	nop
 8002f5c:	08002ea1 	.word	0x08002ea1
 8002f60:	2000026c 	.word	0x2000026c

08002f64 <_fwalk_sglue>:
 8002f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f68:	4607      	mov	r7, r0
 8002f6a:	4688      	mov	r8, r1
 8002f6c:	4614      	mov	r4, r2
 8002f6e:	2600      	movs	r6, #0
 8002f70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f74:	f1b9 0901 	subs.w	r9, r9, #1
 8002f78:	d505      	bpl.n	8002f86 <_fwalk_sglue+0x22>
 8002f7a:	6824      	ldr	r4, [r4, #0]
 8002f7c:	2c00      	cmp	r4, #0
 8002f7e:	d1f7      	bne.n	8002f70 <_fwalk_sglue+0xc>
 8002f80:	4630      	mov	r0, r6
 8002f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f86:	89ab      	ldrh	r3, [r5, #12]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d907      	bls.n	8002f9c <_fwalk_sglue+0x38>
 8002f8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f90:	3301      	adds	r3, #1
 8002f92:	d003      	beq.n	8002f9c <_fwalk_sglue+0x38>
 8002f94:	4629      	mov	r1, r5
 8002f96:	4638      	mov	r0, r7
 8002f98:	47c0      	blx	r8
 8002f9a:	4306      	orrs	r6, r0
 8002f9c:	3568      	adds	r5, #104	@ 0x68
 8002f9e:	e7e9      	b.n	8002f74 <_fwalk_sglue+0x10>

08002fa0 <iprintf>:
 8002fa0:	b40f      	push	{r0, r1, r2, r3}
 8002fa2:	b507      	push	{r0, r1, r2, lr}
 8002fa4:	4906      	ldr	r1, [pc, #24]	@ (8002fc0 <iprintf+0x20>)
 8002fa6:	ab04      	add	r3, sp, #16
 8002fa8:	6808      	ldr	r0, [r1, #0]
 8002faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fae:	6881      	ldr	r1, [r0, #8]
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	f000 f9e9 	bl	8003388 <_vfiprintf_r>
 8002fb6:	b003      	add	sp, #12
 8002fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fbc:	b004      	add	sp, #16
 8002fbe:	4770      	bx	lr
 8002fc0:	20000018 	.word	0x20000018

08002fc4 <__sread>:
 8002fc4:	b510      	push	{r4, lr}
 8002fc6:	460c      	mov	r4, r1
 8002fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fcc:	f000 f868 	bl	80030a0 <_read_r>
 8002fd0:	2800      	cmp	r0, #0
 8002fd2:	bfab      	itete	ge
 8002fd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8002fd8:	181b      	addge	r3, r3, r0
 8002fda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002fde:	bfac      	ite	ge
 8002fe0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002fe2:	81a3      	strhlt	r3, [r4, #12]
 8002fe4:	bd10      	pop	{r4, pc}

08002fe6 <__swrite>:
 8002fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fea:	461f      	mov	r7, r3
 8002fec:	898b      	ldrh	r3, [r1, #12]
 8002fee:	05db      	lsls	r3, r3, #23
 8002ff0:	4605      	mov	r5, r0
 8002ff2:	460c      	mov	r4, r1
 8002ff4:	4616      	mov	r6, r2
 8002ff6:	d505      	bpl.n	8003004 <__swrite+0x1e>
 8002ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	2200      	movs	r2, #0
 8003000:	f000 f83c 	bl	800307c <_lseek_r>
 8003004:	89a3      	ldrh	r3, [r4, #12]
 8003006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800300a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800300e:	81a3      	strh	r3, [r4, #12]
 8003010:	4632      	mov	r2, r6
 8003012:	463b      	mov	r3, r7
 8003014:	4628      	mov	r0, r5
 8003016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800301a:	f000 b853 	b.w	80030c4 <_write_r>

0800301e <__sseek>:
 800301e:	b510      	push	{r4, lr}
 8003020:	460c      	mov	r4, r1
 8003022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003026:	f000 f829 	bl	800307c <_lseek_r>
 800302a:	1c43      	adds	r3, r0, #1
 800302c:	89a3      	ldrh	r3, [r4, #12]
 800302e:	bf15      	itete	ne
 8003030:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003032:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003036:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800303a:	81a3      	strheq	r3, [r4, #12]
 800303c:	bf18      	it	ne
 800303e:	81a3      	strhne	r3, [r4, #12]
 8003040:	bd10      	pop	{r4, pc}

08003042 <__sclose>:
 8003042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003046:	f000 b809 	b.w	800305c <_close_r>

0800304a <memset>:
 800304a:	4402      	add	r2, r0
 800304c:	4603      	mov	r3, r0
 800304e:	4293      	cmp	r3, r2
 8003050:	d100      	bne.n	8003054 <memset+0xa>
 8003052:	4770      	bx	lr
 8003054:	f803 1b01 	strb.w	r1, [r3], #1
 8003058:	e7f9      	b.n	800304e <memset+0x4>
	...

0800305c <_close_r>:
 800305c:	b538      	push	{r3, r4, r5, lr}
 800305e:	4d06      	ldr	r5, [pc, #24]	@ (8003078 <_close_r+0x1c>)
 8003060:	2300      	movs	r3, #0
 8003062:	4604      	mov	r4, r0
 8003064:	4608      	mov	r0, r1
 8003066:	602b      	str	r3, [r5, #0]
 8003068:	f7fd fd54 	bl	8000b14 <_close>
 800306c:	1c43      	adds	r3, r0, #1
 800306e:	d102      	bne.n	8003076 <_close_r+0x1a>
 8003070:	682b      	ldr	r3, [r5, #0]
 8003072:	b103      	cbz	r3, 8003076 <_close_r+0x1a>
 8003074:	6023      	str	r3, [r4, #0]
 8003076:	bd38      	pop	{r3, r4, r5, pc}
 8003078:	20000270 	.word	0x20000270

0800307c <_lseek_r>:
 800307c:	b538      	push	{r3, r4, r5, lr}
 800307e:	4d07      	ldr	r5, [pc, #28]	@ (800309c <_lseek_r+0x20>)
 8003080:	4604      	mov	r4, r0
 8003082:	4608      	mov	r0, r1
 8003084:	4611      	mov	r1, r2
 8003086:	2200      	movs	r2, #0
 8003088:	602a      	str	r2, [r5, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	f7fd fd69 	bl	8000b62 <_lseek>
 8003090:	1c43      	adds	r3, r0, #1
 8003092:	d102      	bne.n	800309a <_lseek_r+0x1e>
 8003094:	682b      	ldr	r3, [r5, #0]
 8003096:	b103      	cbz	r3, 800309a <_lseek_r+0x1e>
 8003098:	6023      	str	r3, [r4, #0]
 800309a:	bd38      	pop	{r3, r4, r5, pc}
 800309c:	20000270 	.word	0x20000270

080030a0 <_read_r>:
 80030a0:	b538      	push	{r3, r4, r5, lr}
 80030a2:	4d07      	ldr	r5, [pc, #28]	@ (80030c0 <_read_r+0x20>)
 80030a4:	4604      	mov	r4, r0
 80030a6:	4608      	mov	r0, r1
 80030a8:	4611      	mov	r1, r2
 80030aa:	2200      	movs	r2, #0
 80030ac:	602a      	str	r2, [r5, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	f7fd fcf7 	bl	8000aa2 <_read>
 80030b4:	1c43      	adds	r3, r0, #1
 80030b6:	d102      	bne.n	80030be <_read_r+0x1e>
 80030b8:	682b      	ldr	r3, [r5, #0]
 80030ba:	b103      	cbz	r3, 80030be <_read_r+0x1e>
 80030bc:	6023      	str	r3, [r4, #0]
 80030be:	bd38      	pop	{r3, r4, r5, pc}
 80030c0:	20000270 	.word	0x20000270

080030c4 <_write_r>:
 80030c4:	b538      	push	{r3, r4, r5, lr}
 80030c6:	4d07      	ldr	r5, [pc, #28]	@ (80030e4 <_write_r+0x20>)
 80030c8:	4604      	mov	r4, r0
 80030ca:	4608      	mov	r0, r1
 80030cc:	4611      	mov	r1, r2
 80030ce:	2200      	movs	r2, #0
 80030d0:	602a      	str	r2, [r5, #0]
 80030d2:	461a      	mov	r2, r3
 80030d4:	f7fd fd02 	bl	8000adc <_write>
 80030d8:	1c43      	adds	r3, r0, #1
 80030da:	d102      	bne.n	80030e2 <_write_r+0x1e>
 80030dc:	682b      	ldr	r3, [r5, #0]
 80030de:	b103      	cbz	r3, 80030e2 <_write_r+0x1e>
 80030e0:	6023      	str	r3, [r4, #0]
 80030e2:	bd38      	pop	{r3, r4, r5, pc}
 80030e4:	20000270 	.word	0x20000270

080030e8 <__errno>:
 80030e8:	4b01      	ldr	r3, [pc, #4]	@ (80030f0 <__errno+0x8>)
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	20000018 	.word	0x20000018

080030f4 <__libc_init_array>:
 80030f4:	b570      	push	{r4, r5, r6, lr}
 80030f6:	4d0d      	ldr	r5, [pc, #52]	@ (800312c <__libc_init_array+0x38>)
 80030f8:	4c0d      	ldr	r4, [pc, #52]	@ (8003130 <__libc_init_array+0x3c>)
 80030fa:	1b64      	subs	r4, r4, r5
 80030fc:	10a4      	asrs	r4, r4, #2
 80030fe:	2600      	movs	r6, #0
 8003100:	42a6      	cmp	r6, r4
 8003102:	d109      	bne.n	8003118 <__libc_init_array+0x24>
 8003104:	4d0b      	ldr	r5, [pc, #44]	@ (8003134 <__libc_init_array+0x40>)
 8003106:	4c0c      	ldr	r4, [pc, #48]	@ (8003138 <__libc_init_array+0x44>)
 8003108:	f000 fdb8 	bl	8003c7c <_init>
 800310c:	1b64      	subs	r4, r4, r5
 800310e:	10a4      	asrs	r4, r4, #2
 8003110:	2600      	movs	r6, #0
 8003112:	42a6      	cmp	r6, r4
 8003114:	d105      	bne.n	8003122 <__libc_init_array+0x2e>
 8003116:	bd70      	pop	{r4, r5, r6, pc}
 8003118:	f855 3b04 	ldr.w	r3, [r5], #4
 800311c:	4798      	blx	r3
 800311e:	3601      	adds	r6, #1
 8003120:	e7ee      	b.n	8003100 <__libc_init_array+0xc>
 8003122:	f855 3b04 	ldr.w	r3, [r5], #4
 8003126:	4798      	blx	r3
 8003128:	3601      	adds	r6, #1
 800312a:	e7f2      	b.n	8003112 <__libc_init_array+0x1e>
 800312c:	08003d00 	.word	0x08003d00
 8003130:	08003d00 	.word	0x08003d00
 8003134:	08003d00 	.word	0x08003d00
 8003138:	08003d04 	.word	0x08003d04

0800313c <__retarget_lock_init_recursive>:
 800313c:	4770      	bx	lr

0800313e <__retarget_lock_acquire_recursive>:
 800313e:	4770      	bx	lr

08003140 <__retarget_lock_release_recursive>:
 8003140:	4770      	bx	lr
	...

08003144 <_free_r>:
 8003144:	b538      	push	{r3, r4, r5, lr}
 8003146:	4605      	mov	r5, r0
 8003148:	2900      	cmp	r1, #0
 800314a:	d041      	beq.n	80031d0 <_free_r+0x8c>
 800314c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003150:	1f0c      	subs	r4, r1, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	bfb8      	it	lt
 8003156:	18e4      	addlt	r4, r4, r3
 8003158:	f000 f8e0 	bl	800331c <__malloc_lock>
 800315c:	4a1d      	ldr	r2, [pc, #116]	@ (80031d4 <_free_r+0x90>)
 800315e:	6813      	ldr	r3, [r2, #0]
 8003160:	b933      	cbnz	r3, 8003170 <_free_r+0x2c>
 8003162:	6063      	str	r3, [r4, #4]
 8003164:	6014      	str	r4, [r2, #0]
 8003166:	4628      	mov	r0, r5
 8003168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800316c:	f000 b8dc 	b.w	8003328 <__malloc_unlock>
 8003170:	42a3      	cmp	r3, r4
 8003172:	d908      	bls.n	8003186 <_free_r+0x42>
 8003174:	6820      	ldr	r0, [r4, #0]
 8003176:	1821      	adds	r1, r4, r0
 8003178:	428b      	cmp	r3, r1
 800317a:	bf01      	itttt	eq
 800317c:	6819      	ldreq	r1, [r3, #0]
 800317e:	685b      	ldreq	r3, [r3, #4]
 8003180:	1809      	addeq	r1, r1, r0
 8003182:	6021      	streq	r1, [r4, #0]
 8003184:	e7ed      	b.n	8003162 <_free_r+0x1e>
 8003186:	461a      	mov	r2, r3
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	b10b      	cbz	r3, 8003190 <_free_r+0x4c>
 800318c:	42a3      	cmp	r3, r4
 800318e:	d9fa      	bls.n	8003186 <_free_r+0x42>
 8003190:	6811      	ldr	r1, [r2, #0]
 8003192:	1850      	adds	r0, r2, r1
 8003194:	42a0      	cmp	r0, r4
 8003196:	d10b      	bne.n	80031b0 <_free_r+0x6c>
 8003198:	6820      	ldr	r0, [r4, #0]
 800319a:	4401      	add	r1, r0
 800319c:	1850      	adds	r0, r2, r1
 800319e:	4283      	cmp	r3, r0
 80031a0:	6011      	str	r1, [r2, #0]
 80031a2:	d1e0      	bne.n	8003166 <_free_r+0x22>
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	6053      	str	r3, [r2, #4]
 80031aa:	4408      	add	r0, r1
 80031ac:	6010      	str	r0, [r2, #0]
 80031ae:	e7da      	b.n	8003166 <_free_r+0x22>
 80031b0:	d902      	bls.n	80031b8 <_free_r+0x74>
 80031b2:	230c      	movs	r3, #12
 80031b4:	602b      	str	r3, [r5, #0]
 80031b6:	e7d6      	b.n	8003166 <_free_r+0x22>
 80031b8:	6820      	ldr	r0, [r4, #0]
 80031ba:	1821      	adds	r1, r4, r0
 80031bc:	428b      	cmp	r3, r1
 80031be:	bf04      	itt	eq
 80031c0:	6819      	ldreq	r1, [r3, #0]
 80031c2:	685b      	ldreq	r3, [r3, #4]
 80031c4:	6063      	str	r3, [r4, #4]
 80031c6:	bf04      	itt	eq
 80031c8:	1809      	addeq	r1, r1, r0
 80031ca:	6021      	streq	r1, [r4, #0]
 80031cc:	6054      	str	r4, [r2, #4]
 80031ce:	e7ca      	b.n	8003166 <_free_r+0x22>
 80031d0:	bd38      	pop	{r3, r4, r5, pc}
 80031d2:	bf00      	nop
 80031d4:	2000027c 	.word	0x2000027c

080031d8 <sbrk_aligned>:
 80031d8:	b570      	push	{r4, r5, r6, lr}
 80031da:	4e0f      	ldr	r6, [pc, #60]	@ (8003218 <sbrk_aligned+0x40>)
 80031dc:	460c      	mov	r4, r1
 80031de:	6831      	ldr	r1, [r6, #0]
 80031e0:	4605      	mov	r5, r0
 80031e2:	b911      	cbnz	r1, 80031ea <sbrk_aligned+0x12>
 80031e4:	f000 fcb6 	bl	8003b54 <_sbrk_r>
 80031e8:	6030      	str	r0, [r6, #0]
 80031ea:	4621      	mov	r1, r4
 80031ec:	4628      	mov	r0, r5
 80031ee:	f000 fcb1 	bl	8003b54 <_sbrk_r>
 80031f2:	1c43      	adds	r3, r0, #1
 80031f4:	d103      	bne.n	80031fe <sbrk_aligned+0x26>
 80031f6:	f04f 34ff 	mov.w	r4, #4294967295
 80031fa:	4620      	mov	r0, r4
 80031fc:	bd70      	pop	{r4, r5, r6, pc}
 80031fe:	1cc4      	adds	r4, r0, #3
 8003200:	f024 0403 	bic.w	r4, r4, #3
 8003204:	42a0      	cmp	r0, r4
 8003206:	d0f8      	beq.n	80031fa <sbrk_aligned+0x22>
 8003208:	1a21      	subs	r1, r4, r0
 800320a:	4628      	mov	r0, r5
 800320c:	f000 fca2 	bl	8003b54 <_sbrk_r>
 8003210:	3001      	adds	r0, #1
 8003212:	d1f2      	bne.n	80031fa <sbrk_aligned+0x22>
 8003214:	e7ef      	b.n	80031f6 <sbrk_aligned+0x1e>
 8003216:	bf00      	nop
 8003218:	20000278 	.word	0x20000278

0800321c <_malloc_r>:
 800321c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003220:	1ccd      	adds	r5, r1, #3
 8003222:	f025 0503 	bic.w	r5, r5, #3
 8003226:	3508      	adds	r5, #8
 8003228:	2d0c      	cmp	r5, #12
 800322a:	bf38      	it	cc
 800322c:	250c      	movcc	r5, #12
 800322e:	2d00      	cmp	r5, #0
 8003230:	4606      	mov	r6, r0
 8003232:	db01      	blt.n	8003238 <_malloc_r+0x1c>
 8003234:	42a9      	cmp	r1, r5
 8003236:	d904      	bls.n	8003242 <_malloc_r+0x26>
 8003238:	230c      	movs	r3, #12
 800323a:	6033      	str	r3, [r6, #0]
 800323c:	2000      	movs	r0, #0
 800323e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003242:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003318 <_malloc_r+0xfc>
 8003246:	f000 f869 	bl	800331c <__malloc_lock>
 800324a:	f8d8 3000 	ldr.w	r3, [r8]
 800324e:	461c      	mov	r4, r3
 8003250:	bb44      	cbnz	r4, 80032a4 <_malloc_r+0x88>
 8003252:	4629      	mov	r1, r5
 8003254:	4630      	mov	r0, r6
 8003256:	f7ff ffbf 	bl	80031d8 <sbrk_aligned>
 800325a:	1c43      	adds	r3, r0, #1
 800325c:	4604      	mov	r4, r0
 800325e:	d158      	bne.n	8003312 <_malloc_r+0xf6>
 8003260:	f8d8 4000 	ldr.w	r4, [r8]
 8003264:	4627      	mov	r7, r4
 8003266:	2f00      	cmp	r7, #0
 8003268:	d143      	bne.n	80032f2 <_malloc_r+0xd6>
 800326a:	2c00      	cmp	r4, #0
 800326c:	d04b      	beq.n	8003306 <_malloc_r+0xea>
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	4639      	mov	r1, r7
 8003272:	4630      	mov	r0, r6
 8003274:	eb04 0903 	add.w	r9, r4, r3
 8003278:	f000 fc6c 	bl	8003b54 <_sbrk_r>
 800327c:	4581      	cmp	r9, r0
 800327e:	d142      	bne.n	8003306 <_malloc_r+0xea>
 8003280:	6821      	ldr	r1, [r4, #0]
 8003282:	1a6d      	subs	r5, r5, r1
 8003284:	4629      	mov	r1, r5
 8003286:	4630      	mov	r0, r6
 8003288:	f7ff ffa6 	bl	80031d8 <sbrk_aligned>
 800328c:	3001      	adds	r0, #1
 800328e:	d03a      	beq.n	8003306 <_malloc_r+0xea>
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	442b      	add	r3, r5
 8003294:	6023      	str	r3, [r4, #0]
 8003296:	f8d8 3000 	ldr.w	r3, [r8]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	bb62      	cbnz	r2, 80032f8 <_malloc_r+0xdc>
 800329e:	f8c8 7000 	str.w	r7, [r8]
 80032a2:	e00f      	b.n	80032c4 <_malloc_r+0xa8>
 80032a4:	6822      	ldr	r2, [r4, #0]
 80032a6:	1b52      	subs	r2, r2, r5
 80032a8:	d420      	bmi.n	80032ec <_malloc_r+0xd0>
 80032aa:	2a0b      	cmp	r2, #11
 80032ac:	d917      	bls.n	80032de <_malloc_r+0xc2>
 80032ae:	1961      	adds	r1, r4, r5
 80032b0:	42a3      	cmp	r3, r4
 80032b2:	6025      	str	r5, [r4, #0]
 80032b4:	bf18      	it	ne
 80032b6:	6059      	strne	r1, [r3, #4]
 80032b8:	6863      	ldr	r3, [r4, #4]
 80032ba:	bf08      	it	eq
 80032bc:	f8c8 1000 	streq.w	r1, [r8]
 80032c0:	5162      	str	r2, [r4, r5]
 80032c2:	604b      	str	r3, [r1, #4]
 80032c4:	4630      	mov	r0, r6
 80032c6:	f000 f82f 	bl	8003328 <__malloc_unlock>
 80032ca:	f104 000b 	add.w	r0, r4, #11
 80032ce:	1d23      	adds	r3, r4, #4
 80032d0:	f020 0007 	bic.w	r0, r0, #7
 80032d4:	1ac2      	subs	r2, r0, r3
 80032d6:	bf1c      	itt	ne
 80032d8:	1a1b      	subne	r3, r3, r0
 80032da:	50a3      	strne	r3, [r4, r2]
 80032dc:	e7af      	b.n	800323e <_malloc_r+0x22>
 80032de:	6862      	ldr	r2, [r4, #4]
 80032e0:	42a3      	cmp	r3, r4
 80032e2:	bf0c      	ite	eq
 80032e4:	f8c8 2000 	streq.w	r2, [r8]
 80032e8:	605a      	strne	r2, [r3, #4]
 80032ea:	e7eb      	b.n	80032c4 <_malloc_r+0xa8>
 80032ec:	4623      	mov	r3, r4
 80032ee:	6864      	ldr	r4, [r4, #4]
 80032f0:	e7ae      	b.n	8003250 <_malloc_r+0x34>
 80032f2:	463c      	mov	r4, r7
 80032f4:	687f      	ldr	r7, [r7, #4]
 80032f6:	e7b6      	b.n	8003266 <_malloc_r+0x4a>
 80032f8:	461a      	mov	r2, r3
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	42a3      	cmp	r3, r4
 80032fe:	d1fb      	bne.n	80032f8 <_malloc_r+0xdc>
 8003300:	2300      	movs	r3, #0
 8003302:	6053      	str	r3, [r2, #4]
 8003304:	e7de      	b.n	80032c4 <_malloc_r+0xa8>
 8003306:	230c      	movs	r3, #12
 8003308:	6033      	str	r3, [r6, #0]
 800330a:	4630      	mov	r0, r6
 800330c:	f000 f80c 	bl	8003328 <__malloc_unlock>
 8003310:	e794      	b.n	800323c <_malloc_r+0x20>
 8003312:	6005      	str	r5, [r0, #0]
 8003314:	e7d6      	b.n	80032c4 <_malloc_r+0xa8>
 8003316:	bf00      	nop
 8003318:	2000027c 	.word	0x2000027c

0800331c <__malloc_lock>:
 800331c:	4801      	ldr	r0, [pc, #4]	@ (8003324 <__malloc_lock+0x8>)
 800331e:	f7ff bf0e 	b.w	800313e <__retarget_lock_acquire_recursive>
 8003322:	bf00      	nop
 8003324:	20000274 	.word	0x20000274

08003328 <__malloc_unlock>:
 8003328:	4801      	ldr	r0, [pc, #4]	@ (8003330 <__malloc_unlock+0x8>)
 800332a:	f7ff bf09 	b.w	8003140 <__retarget_lock_release_recursive>
 800332e:	bf00      	nop
 8003330:	20000274 	.word	0x20000274

08003334 <__sfputc_r>:
 8003334:	6893      	ldr	r3, [r2, #8]
 8003336:	3b01      	subs	r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	b410      	push	{r4}
 800333c:	6093      	str	r3, [r2, #8]
 800333e:	da08      	bge.n	8003352 <__sfputc_r+0x1e>
 8003340:	6994      	ldr	r4, [r2, #24]
 8003342:	42a3      	cmp	r3, r4
 8003344:	db01      	blt.n	800334a <__sfputc_r+0x16>
 8003346:	290a      	cmp	r1, #10
 8003348:	d103      	bne.n	8003352 <__sfputc_r+0x1e>
 800334a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800334e:	f000 bb6d 	b.w	8003a2c <__swbuf_r>
 8003352:	6813      	ldr	r3, [r2, #0]
 8003354:	1c58      	adds	r0, r3, #1
 8003356:	6010      	str	r0, [r2, #0]
 8003358:	7019      	strb	r1, [r3, #0]
 800335a:	4608      	mov	r0, r1
 800335c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003360:	4770      	bx	lr

08003362 <__sfputs_r>:
 8003362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003364:	4606      	mov	r6, r0
 8003366:	460f      	mov	r7, r1
 8003368:	4614      	mov	r4, r2
 800336a:	18d5      	adds	r5, r2, r3
 800336c:	42ac      	cmp	r4, r5
 800336e:	d101      	bne.n	8003374 <__sfputs_r+0x12>
 8003370:	2000      	movs	r0, #0
 8003372:	e007      	b.n	8003384 <__sfputs_r+0x22>
 8003374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003378:	463a      	mov	r2, r7
 800337a:	4630      	mov	r0, r6
 800337c:	f7ff ffda 	bl	8003334 <__sfputc_r>
 8003380:	1c43      	adds	r3, r0, #1
 8003382:	d1f3      	bne.n	800336c <__sfputs_r+0xa>
 8003384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003388 <_vfiprintf_r>:
 8003388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800338c:	460d      	mov	r5, r1
 800338e:	b09d      	sub	sp, #116	@ 0x74
 8003390:	4614      	mov	r4, r2
 8003392:	4698      	mov	r8, r3
 8003394:	4606      	mov	r6, r0
 8003396:	b118      	cbz	r0, 80033a0 <_vfiprintf_r+0x18>
 8003398:	6a03      	ldr	r3, [r0, #32]
 800339a:	b90b      	cbnz	r3, 80033a0 <_vfiprintf_r+0x18>
 800339c:	f7ff fdca 	bl	8002f34 <__sinit>
 80033a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80033a2:	07d9      	lsls	r1, r3, #31
 80033a4:	d405      	bmi.n	80033b2 <_vfiprintf_r+0x2a>
 80033a6:	89ab      	ldrh	r3, [r5, #12]
 80033a8:	059a      	lsls	r2, r3, #22
 80033aa:	d402      	bmi.n	80033b2 <_vfiprintf_r+0x2a>
 80033ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80033ae:	f7ff fec6 	bl	800313e <__retarget_lock_acquire_recursive>
 80033b2:	89ab      	ldrh	r3, [r5, #12]
 80033b4:	071b      	lsls	r3, r3, #28
 80033b6:	d501      	bpl.n	80033bc <_vfiprintf_r+0x34>
 80033b8:	692b      	ldr	r3, [r5, #16]
 80033ba:	b99b      	cbnz	r3, 80033e4 <_vfiprintf_r+0x5c>
 80033bc:	4629      	mov	r1, r5
 80033be:	4630      	mov	r0, r6
 80033c0:	f000 fb72 	bl	8003aa8 <__swsetup_r>
 80033c4:	b170      	cbz	r0, 80033e4 <_vfiprintf_r+0x5c>
 80033c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80033c8:	07dc      	lsls	r4, r3, #31
 80033ca:	d504      	bpl.n	80033d6 <_vfiprintf_r+0x4e>
 80033cc:	f04f 30ff 	mov.w	r0, #4294967295
 80033d0:	b01d      	add	sp, #116	@ 0x74
 80033d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033d6:	89ab      	ldrh	r3, [r5, #12]
 80033d8:	0598      	lsls	r0, r3, #22
 80033da:	d4f7      	bmi.n	80033cc <_vfiprintf_r+0x44>
 80033dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80033de:	f7ff feaf 	bl	8003140 <__retarget_lock_release_recursive>
 80033e2:	e7f3      	b.n	80033cc <_vfiprintf_r+0x44>
 80033e4:	2300      	movs	r3, #0
 80033e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80033e8:	2320      	movs	r3, #32
 80033ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80033ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80033f2:	2330      	movs	r3, #48	@ 0x30
 80033f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80035a4 <_vfiprintf_r+0x21c>
 80033f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80033fc:	f04f 0901 	mov.w	r9, #1
 8003400:	4623      	mov	r3, r4
 8003402:	469a      	mov	sl, r3
 8003404:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003408:	b10a      	cbz	r2, 800340e <_vfiprintf_r+0x86>
 800340a:	2a25      	cmp	r2, #37	@ 0x25
 800340c:	d1f9      	bne.n	8003402 <_vfiprintf_r+0x7a>
 800340e:	ebba 0b04 	subs.w	fp, sl, r4
 8003412:	d00b      	beq.n	800342c <_vfiprintf_r+0xa4>
 8003414:	465b      	mov	r3, fp
 8003416:	4622      	mov	r2, r4
 8003418:	4629      	mov	r1, r5
 800341a:	4630      	mov	r0, r6
 800341c:	f7ff ffa1 	bl	8003362 <__sfputs_r>
 8003420:	3001      	adds	r0, #1
 8003422:	f000 80a7 	beq.w	8003574 <_vfiprintf_r+0x1ec>
 8003426:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003428:	445a      	add	r2, fp
 800342a:	9209      	str	r2, [sp, #36]	@ 0x24
 800342c:	f89a 3000 	ldrb.w	r3, [sl]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 809f 	beq.w	8003574 <_vfiprintf_r+0x1ec>
 8003436:	2300      	movs	r3, #0
 8003438:	f04f 32ff 	mov.w	r2, #4294967295
 800343c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003440:	f10a 0a01 	add.w	sl, sl, #1
 8003444:	9304      	str	r3, [sp, #16]
 8003446:	9307      	str	r3, [sp, #28]
 8003448:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800344c:	931a      	str	r3, [sp, #104]	@ 0x68
 800344e:	4654      	mov	r4, sl
 8003450:	2205      	movs	r2, #5
 8003452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003456:	4853      	ldr	r0, [pc, #332]	@ (80035a4 <_vfiprintf_r+0x21c>)
 8003458:	f7fc feda 	bl	8000210 <memchr>
 800345c:	9a04      	ldr	r2, [sp, #16]
 800345e:	b9d8      	cbnz	r0, 8003498 <_vfiprintf_r+0x110>
 8003460:	06d1      	lsls	r1, r2, #27
 8003462:	bf44      	itt	mi
 8003464:	2320      	movmi	r3, #32
 8003466:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800346a:	0713      	lsls	r3, r2, #28
 800346c:	bf44      	itt	mi
 800346e:	232b      	movmi	r3, #43	@ 0x2b
 8003470:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003474:	f89a 3000 	ldrb.w	r3, [sl]
 8003478:	2b2a      	cmp	r3, #42	@ 0x2a
 800347a:	d015      	beq.n	80034a8 <_vfiprintf_r+0x120>
 800347c:	9a07      	ldr	r2, [sp, #28]
 800347e:	4654      	mov	r4, sl
 8003480:	2000      	movs	r0, #0
 8003482:	f04f 0c0a 	mov.w	ip, #10
 8003486:	4621      	mov	r1, r4
 8003488:	f811 3b01 	ldrb.w	r3, [r1], #1
 800348c:	3b30      	subs	r3, #48	@ 0x30
 800348e:	2b09      	cmp	r3, #9
 8003490:	d94b      	bls.n	800352a <_vfiprintf_r+0x1a2>
 8003492:	b1b0      	cbz	r0, 80034c2 <_vfiprintf_r+0x13a>
 8003494:	9207      	str	r2, [sp, #28]
 8003496:	e014      	b.n	80034c2 <_vfiprintf_r+0x13a>
 8003498:	eba0 0308 	sub.w	r3, r0, r8
 800349c:	fa09 f303 	lsl.w	r3, r9, r3
 80034a0:	4313      	orrs	r3, r2
 80034a2:	9304      	str	r3, [sp, #16]
 80034a4:	46a2      	mov	sl, r4
 80034a6:	e7d2      	b.n	800344e <_vfiprintf_r+0xc6>
 80034a8:	9b03      	ldr	r3, [sp, #12]
 80034aa:	1d19      	adds	r1, r3, #4
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	9103      	str	r1, [sp, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	bfbb      	ittet	lt
 80034b4:	425b      	neglt	r3, r3
 80034b6:	f042 0202 	orrlt.w	r2, r2, #2
 80034ba:	9307      	strge	r3, [sp, #28]
 80034bc:	9307      	strlt	r3, [sp, #28]
 80034be:	bfb8      	it	lt
 80034c0:	9204      	strlt	r2, [sp, #16]
 80034c2:	7823      	ldrb	r3, [r4, #0]
 80034c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80034c6:	d10a      	bne.n	80034de <_vfiprintf_r+0x156>
 80034c8:	7863      	ldrb	r3, [r4, #1]
 80034ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80034cc:	d132      	bne.n	8003534 <_vfiprintf_r+0x1ac>
 80034ce:	9b03      	ldr	r3, [sp, #12]
 80034d0:	1d1a      	adds	r2, r3, #4
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	9203      	str	r2, [sp, #12]
 80034d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80034da:	3402      	adds	r4, #2
 80034dc:	9305      	str	r3, [sp, #20]
 80034de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80035b4 <_vfiprintf_r+0x22c>
 80034e2:	7821      	ldrb	r1, [r4, #0]
 80034e4:	2203      	movs	r2, #3
 80034e6:	4650      	mov	r0, sl
 80034e8:	f7fc fe92 	bl	8000210 <memchr>
 80034ec:	b138      	cbz	r0, 80034fe <_vfiprintf_r+0x176>
 80034ee:	9b04      	ldr	r3, [sp, #16]
 80034f0:	eba0 000a 	sub.w	r0, r0, sl
 80034f4:	2240      	movs	r2, #64	@ 0x40
 80034f6:	4082      	lsls	r2, r0
 80034f8:	4313      	orrs	r3, r2
 80034fa:	3401      	adds	r4, #1
 80034fc:	9304      	str	r3, [sp, #16]
 80034fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003502:	4829      	ldr	r0, [pc, #164]	@ (80035a8 <_vfiprintf_r+0x220>)
 8003504:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003508:	2206      	movs	r2, #6
 800350a:	f7fc fe81 	bl	8000210 <memchr>
 800350e:	2800      	cmp	r0, #0
 8003510:	d03f      	beq.n	8003592 <_vfiprintf_r+0x20a>
 8003512:	4b26      	ldr	r3, [pc, #152]	@ (80035ac <_vfiprintf_r+0x224>)
 8003514:	bb1b      	cbnz	r3, 800355e <_vfiprintf_r+0x1d6>
 8003516:	9b03      	ldr	r3, [sp, #12]
 8003518:	3307      	adds	r3, #7
 800351a:	f023 0307 	bic.w	r3, r3, #7
 800351e:	3308      	adds	r3, #8
 8003520:	9303      	str	r3, [sp, #12]
 8003522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003524:	443b      	add	r3, r7
 8003526:	9309      	str	r3, [sp, #36]	@ 0x24
 8003528:	e76a      	b.n	8003400 <_vfiprintf_r+0x78>
 800352a:	fb0c 3202 	mla	r2, ip, r2, r3
 800352e:	460c      	mov	r4, r1
 8003530:	2001      	movs	r0, #1
 8003532:	e7a8      	b.n	8003486 <_vfiprintf_r+0xfe>
 8003534:	2300      	movs	r3, #0
 8003536:	3401      	adds	r4, #1
 8003538:	9305      	str	r3, [sp, #20]
 800353a:	4619      	mov	r1, r3
 800353c:	f04f 0c0a 	mov.w	ip, #10
 8003540:	4620      	mov	r0, r4
 8003542:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003546:	3a30      	subs	r2, #48	@ 0x30
 8003548:	2a09      	cmp	r2, #9
 800354a:	d903      	bls.n	8003554 <_vfiprintf_r+0x1cc>
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0c6      	beq.n	80034de <_vfiprintf_r+0x156>
 8003550:	9105      	str	r1, [sp, #20]
 8003552:	e7c4      	b.n	80034de <_vfiprintf_r+0x156>
 8003554:	fb0c 2101 	mla	r1, ip, r1, r2
 8003558:	4604      	mov	r4, r0
 800355a:	2301      	movs	r3, #1
 800355c:	e7f0      	b.n	8003540 <_vfiprintf_r+0x1b8>
 800355e:	ab03      	add	r3, sp, #12
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	462a      	mov	r2, r5
 8003564:	4b12      	ldr	r3, [pc, #72]	@ (80035b0 <_vfiprintf_r+0x228>)
 8003566:	a904      	add	r1, sp, #16
 8003568:	4630      	mov	r0, r6
 800356a:	f3af 8000 	nop.w
 800356e:	4607      	mov	r7, r0
 8003570:	1c78      	adds	r0, r7, #1
 8003572:	d1d6      	bne.n	8003522 <_vfiprintf_r+0x19a>
 8003574:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003576:	07d9      	lsls	r1, r3, #31
 8003578:	d405      	bmi.n	8003586 <_vfiprintf_r+0x1fe>
 800357a:	89ab      	ldrh	r3, [r5, #12]
 800357c:	059a      	lsls	r2, r3, #22
 800357e:	d402      	bmi.n	8003586 <_vfiprintf_r+0x1fe>
 8003580:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003582:	f7ff fddd 	bl	8003140 <__retarget_lock_release_recursive>
 8003586:	89ab      	ldrh	r3, [r5, #12]
 8003588:	065b      	lsls	r3, r3, #25
 800358a:	f53f af1f 	bmi.w	80033cc <_vfiprintf_r+0x44>
 800358e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003590:	e71e      	b.n	80033d0 <_vfiprintf_r+0x48>
 8003592:	ab03      	add	r3, sp, #12
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	462a      	mov	r2, r5
 8003598:	4b05      	ldr	r3, [pc, #20]	@ (80035b0 <_vfiprintf_r+0x228>)
 800359a:	a904      	add	r1, sp, #16
 800359c:	4630      	mov	r0, r6
 800359e:	f000 f879 	bl	8003694 <_printf_i>
 80035a2:	e7e4      	b.n	800356e <_vfiprintf_r+0x1e6>
 80035a4:	08003cc4 	.word	0x08003cc4
 80035a8:	08003cce 	.word	0x08003cce
 80035ac:	00000000 	.word	0x00000000
 80035b0:	08003363 	.word	0x08003363
 80035b4:	08003cca 	.word	0x08003cca

080035b8 <_printf_common>:
 80035b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035bc:	4616      	mov	r6, r2
 80035be:	4698      	mov	r8, r3
 80035c0:	688a      	ldr	r2, [r1, #8]
 80035c2:	690b      	ldr	r3, [r1, #16]
 80035c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80035c8:	4293      	cmp	r3, r2
 80035ca:	bfb8      	it	lt
 80035cc:	4613      	movlt	r3, r2
 80035ce:	6033      	str	r3, [r6, #0]
 80035d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80035d4:	4607      	mov	r7, r0
 80035d6:	460c      	mov	r4, r1
 80035d8:	b10a      	cbz	r2, 80035de <_printf_common+0x26>
 80035da:	3301      	adds	r3, #1
 80035dc:	6033      	str	r3, [r6, #0]
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	0699      	lsls	r1, r3, #26
 80035e2:	bf42      	ittt	mi
 80035e4:	6833      	ldrmi	r3, [r6, #0]
 80035e6:	3302      	addmi	r3, #2
 80035e8:	6033      	strmi	r3, [r6, #0]
 80035ea:	6825      	ldr	r5, [r4, #0]
 80035ec:	f015 0506 	ands.w	r5, r5, #6
 80035f0:	d106      	bne.n	8003600 <_printf_common+0x48>
 80035f2:	f104 0a19 	add.w	sl, r4, #25
 80035f6:	68e3      	ldr	r3, [r4, #12]
 80035f8:	6832      	ldr	r2, [r6, #0]
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	42ab      	cmp	r3, r5
 80035fe:	dc26      	bgt.n	800364e <_printf_common+0x96>
 8003600:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003604:	6822      	ldr	r2, [r4, #0]
 8003606:	3b00      	subs	r3, #0
 8003608:	bf18      	it	ne
 800360a:	2301      	movne	r3, #1
 800360c:	0692      	lsls	r2, r2, #26
 800360e:	d42b      	bmi.n	8003668 <_printf_common+0xb0>
 8003610:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003614:	4641      	mov	r1, r8
 8003616:	4638      	mov	r0, r7
 8003618:	47c8      	blx	r9
 800361a:	3001      	adds	r0, #1
 800361c:	d01e      	beq.n	800365c <_printf_common+0xa4>
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	6922      	ldr	r2, [r4, #16]
 8003622:	f003 0306 	and.w	r3, r3, #6
 8003626:	2b04      	cmp	r3, #4
 8003628:	bf02      	ittt	eq
 800362a:	68e5      	ldreq	r5, [r4, #12]
 800362c:	6833      	ldreq	r3, [r6, #0]
 800362e:	1aed      	subeq	r5, r5, r3
 8003630:	68a3      	ldr	r3, [r4, #8]
 8003632:	bf0c      	ite	eq
 8003634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003638:	2500      	movne	r5, #0
 800363a:	4293      	cmp	r3, r2
 800363c:	bfc4      	itt	gt
 800363e:	1a9b      	subgt	r3, r3, r2
 8003640:	18ed      	addgt	r5, r5, r3
 8003642:	2600      	movs	r6, #0
 8003644:	341a      	adds	r4, #26
 8003646:	42b5      	cmp	r5, r6
 8003648:	d11a      	bne.n	8003680 <_printf_common+0xc8>
 800364a:	2000      	movs	r0, #0
 800364c:	e008      	b.n	8003660 <_printf_common+0xa8>
 800364e:	2301      	movs	r3, #1
 8003650:	4652      	mov	r2, sl
 8003652:	4641      	mov	r1, r8
 8003654:	4638      	mov	r0, r7
 8003656:	47c8      	blx	r9
 8003658:	3001      	adds	r0, #1
 800365a:	d103      	bne.n	8003664 <_printf_common+0xac>
 800365c:	f04f 30ff 	mov.w	r0, #4294967295
 8003660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003664:	3501      	adds	r5, #1
 8003666:	e7c6      	b.n	80035f6 <_printf_common+0x3e>
 8003668:	18e1      	adds	r1, r4, r3
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	2030      	movs	r0, #48	@ 0x30
 800366e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003672:	4422      	add	r2, r4
 8003674:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003678:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800367c:	3302      	adds	r3, #2
 800367e:	e7c7      	b.n	8003610 <_printf_common+0x58>
 8003680:	2301      	movs	r3, #1
 8003682:	4622      	mov	r2, r4
 8003684:	4641      	mov	r1, r8
 8003686:	4638      	mov	r0, r7
 8003688:	47c8      	blx	r9
 800368a:	3001      	adds	r0, #1
 800368c:	d0e6      	beq.n	800365c <_printf_common+0xa4>
 800368e:	3601      	adds	r6, #1
 8003690:	e7d9      	b.n	8003646 <_printf_common+0x8e>
	...

08003694 <_printf_i>:
 8003694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003698:	7e0f      	ldrb	r7, [r1, #24]
 800369a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800369c:	2f78      	cmp	r7, #120	@ 0x78
 800369e:	4691      	mov	r9, r2
 80036a0:	4680      	mov	r8, r0
 80036a2:	460c      	mov	r4, r1
 80036a4:	469a      	mov	sl, r3
 80036a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80036aa:	d807      	bhi.n	80036bc <_printf_i+0x28>
 80036ac:	2f62      	cmp	r7, #98	@ 0x62
 80036ae:	d80a      	bhi.n	80036c6 <_printf_i+0x32>
 80036b0:	2f00      	cmp	r7, #0
 80036b2:	f000 80d2 	beq.w	800385a <_printf_i+0x1c6>
 80036b6:	2f58      	cmp	r7, #88	@ 0x58
 80036b8:	f000 80b9 	beq.w	800382e <_printf_i+0x19a>
 80036bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80036c4:	e03a      	b.n	800373c <_printf_i+0xa8>
 80036c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80036ca:	2b15      	cmp	r3, #21
 80036cc:	d8f6      	bhi.n	80036bc <_printf_i+0x28>
 80036ce:	a101      	add	r1, pc, #4	@ (adr r1, 80036d4 <_printf_i+0x40>)
 80036d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036d4:	0800372d 	.word	0x0800372d
 80036d8:	08003741 	.word	0x08003741
 80036dc:	080036bd 	.word	0x080036bd
 80036e0:	080036bd 	.word	0x080036bd
 80036e4:	080036bd 	.word	0x080036bd
 80036e8:	080036bd 	.word	0x080036bd
 80036ec:	08003741 	.word	0x08003741
 80036f0:	080036bd 	.word	0x080036bd
 80036f4:	080036bd 	.word	0x080036bd
 80036f8:	080036bd 	.word	0x080036bd
 80036fc:	080036bd 	.word	0x080036bd
 8003700:	08003841 	.word	0x08003841
 8003704:	0800376b 	.word	0x0800376b
 8003708:	080037fb 	.word	0x080037fb
 800370c:	080036bd 	.word	0x080036bd
 8003710:	080036bd 	.word	0x080036bd
 8003714:	08003863 	.word	0x08003863
 8003718:	080036bd 	.word	0x080036bd
 800371c:	0800376b 	.word	0x0800376b
 8003720:	080036bd 	.word	0x080036bd
 8003724:	080036bd 	.word	0x080036bd
 8003728:	08003803 	.word	0x08003803
 800372c:	6833      	ldr	r3, [r6, #0]
 800372e:	1d1a      	adds	r2, r3, #4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6032      	str	r2, [r6, #0]
 8003734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003738:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800373c:	2301      	movs	r3, #1
 800373e:	e09d      	b.n	800387c <_printf_i+0x1e8>
 8003740:	6833      	ldr	r3, [r6, #0]
 8003742:	6820      	ldr	r0, [r4, #0]
 8003744:	1d19      	adds	r1, r3, #4
 8003746:	6031      	str	r1, [r6, #0]
 8003748:	0606      	lsls	r6, r0, #24
 800374a:	d501      	bpl.n	8003750 <_printf_i+0xbc>
 800374c:	681d      	ldr	r5, [r3, #0]
 800374e:	e003      	b.n	8003758 <_printf_i+0xc4>
 8003750:	0645      	lsls	r5, r0, #25
 8003752:	d5fb      	bpl.n	800374c <_printf_i+0xb8>
 8003754:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003758:	2d00      	cmp	r5, #0
 800375a:	da03      	bge.n	8003764 <_printf_i+0xd0>
 800375c:	232d      	movs	r3, #45	@ 0x2d
 800375e:	426d      	negs	r5, r5
 8003760:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003764:	4859      	ldr	r0, [pc, #356]	@ (80038cc <_printf_i+0x238>)
 8003766:	230a      	movs	r3, #10
 8003768:	e011      	b.n	800378e <_printf_i+0xfa>
 800376a:	6821      	ldr	r1, [r4, #0]
 800376c:	6833      	ldr	r3, [r6, #0]
 800376e:	0608      	lsls	r0, r1, #24
 8003770:	f853 5b04 	ldr.w	r5, [r3], #4
 8003774:	d402      	bmi.n	800377c <_printf_i+0xe8>
 8003776:	0649      	lsls	r1, r1, #25
 8003778:	bf48      	it	mi
 800377a:	b2ad      	uxthmi	r5, r5
 800377c:	2f6f      	cmp	r7, #111	@ 0x6f
 800377e:	4853      	ldr	r0, [pc, #332]	@ (80038cc <_printf_i+0x238>)
 8003780:	6033      	str	r3, [r6, #0]
 8003782:	bf14      	ite	ne
 8003784:	230a      	movne	r3, #10
 8003786:	2308      	moveq	r3, #8
 8003788:	2100      	movs	r1, #0
 800378a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800378e:	6866      	ldr	r6, [r4, #4]
 8003790:	60a6      	str	r6, [r4, #8]
 8003792:	2e00      	cmp	r6, #0
 8003794:	bfa2      	ittt	ge
 8003796:	6821      	ldrge	r1, [r4, #0]
 8003798:	f021 0104 	bicge.w	r1, r1, #4
 800379c:	6021      	strge	r1, [r4, #0]
 800379e:	b90d      	cbnz	r5, 80037a4 <_printf_i+0x110>
 80037a0:	2e00      	cmp	r6, #0
 80037a2:	d04b      	beq.n	800383c <_printf_i+0x1a8>
 80037a4:	4616      	mov	r6, r2
 80037a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80037aa:	fb03 5711 	mls	r7, r3, r1, r5
 80037ae:	5dc7      	ldrb	r7, [r0, r7]
 80037b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037b4:	462f      	mov	r7, r5
 80037b6:	42bb      	cmp	r3, r7
 80037b8:	460d      	mov	r5, r1
 80037ba:	d9f4      	bls.n	80037a6 <_printf_i+0x112>
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d10b      	bne.n	80037d8 <_printf_i+0x144>
 80037c0:	6823      	ldr	r3, [r4, #0]
 80037c2:	07df      	lsls	r7, r3, #31
 80037c4:	d508      	bpl.n	80037d8 <_printf_i+0x144>
 80037c6:	6923      	ldr	r3, [r4, #16]
 80037c8:	6861      	ldr	r1, [r4, #4]
 80037ca:	4299      	cmp	r1, r3
 80037cc:	bfde      	ittt	le
 80037ce:	2330      	movle	r3, #48	@ 0x30
 80037d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037d8:	1b92      	subs	r2, r2, r6
 80037da:	6122      	str	r2, [r4, #16]
 80037dc:	f8cd a000 	str.w	sl, [sp]
 80037e0:	464b      	mov	r3, r9
 80037e2:	aa03      	add	r2, sp, #12
 80037e4:	4621      	mov	r1, r4
 80037e6:	4640      	mov	r0, r8
 80037e8:	f7ff fee6 	bl	80035b8 <_printf_common>
 80037ec:	3001      	adds	r0, #1
 80037ee:	d14a      	bne.n	8003886 <_printf_i+0x1f2>
 80037f0:	f04f 30ff 	mov.w	r0, #4294967295
 80037f4:	b004      	add	sp, #16
 80037f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	f043 0320 	orr.w	r3, r3, #32
 8003800:	6023      	str	r3, [r4, #0]
 8003802:	4833      	ldr	r0, [pc, #204]	@ (80038d0 <_printf_i+0x23c>)
 8003804:	2778      	movs	r7, #120	@ 0x78
 8003806:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	6831      	ldr	r1, [r6, #0]
 800380e:	061f      	lsls	r7, r3, #24
 8003810:	f851 5b04 	ldr.w	r5, [r1], #4
 8003814:	d402      	bmi.n	800381c <_printf_i+0x188>
 8003816:	065f      	lsls	r7, r3, #25
 8003818:	bf48      	it	mi
 800381a:	b2ad      	uxthmi	r5, r5
 800381c:	6031      	str	r1, [r6, #0]
 800381e:	07d9      	lsls	r1, r3, #31
 8003820:	bf44      	itt	mi
 8003822:	f043 0320 	orrmi.w	r3, r3, #32
 8003826:	6023      	strmi	r3, [r4, #0]
 8003828:	b11d      	cbz	r5, 8003832 <_printf_i+0x19e>
 800382a:	2310      	movs	r3, #16
 800382c:	e7ac      	b.n	8003788 <_printf_i+0xf4>
 800382e:	4827      	ldr	r0, [pc, #156]	@ (80038cc <_printf_i+0x238>)
 8003830:	e7e9      	b.n	8003806 <_printf_i+0x172>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	f023 0320 	bic.w	r3, r3, #32
 8003838:	6023      	str	r3, [r4, #0]
 800383a:	e7f6      	b.n	800382a <_printf_i+0x196>
 800383c:	4616      	mov	r6, r2
 800383e:	e7bd      	b.n	80037bc <_printf_i+0x128>
 8003840:	6833      	ldr	r3, [r6, #0]
 8003842:	6825      	ldr	r5, [r4, #0]
 8003844:	6961      	ldr	r1, [r4, #20]
 8003846:	1d18      	adds	r0, r3, #4
 8003848:	6030      	str	r0, [r6, #0]
 800384a:	062e      	lsls	r6, r5, #24
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	d501      	bpl.n	8003854 <_printf_i+0x1c0>
 8003850:	6019      	str	r1, [r3, #0]
 8003852:	e002      	b.n	800385a <_printf_i+0x1c6>
 8003854:	0668      	lsls	r0, r5, #25
 8003856:	d5fb      	bpl.n	8003850 <_printf_i+0x1bc>
 8003858:	8019      	strh	r1, [r3, #0]
 800385a:	2300      	movs	r3, #0
 800385c:	6123      	str	r3, [r4, #16]
 800385e:	4616      	mov	r6, r2
 8003860:	e7bc      	b.n	80037dc <_printf_i+0x148>
 8003862:	6833      	ldr	r3, [r6, #0]
 8003864:	1d1a      	adds	r2, r3, #4
 8003866:	6032      	str	r2, [r6, #0]
 8003868:	681e      	ldr	r6, [r3, #0]
 800386a:	6862      	ldr	r2, [r4, #4]
 800386c:	2100      	movs	r1, #0
 800386e:	4630      	mov	r0, r6
 8003870:	f7fc fcce 	bl	8000210 <memchr>
 8003874:	b108      	cbz	r0, 800387a <_printf_i+0x1e6>
 8003876:	1b80      	subs	r0, r0, r6
 8003878:	6060      	str	r0, [r4, #4]
 800387a:	6863      	ldr	r3, [r4, #4]
 800387c:	6123      	str	r3, [r4, #16]
 800387e:	2300      	movs	r3, #0
 8003880:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003884:	e7aa      	b.n	80037dc <_printf_i+0x148>
 8003886:	6923      	ldr	r3, [r4, #16]
 8003888:	4632      	mov	r2, r6
 800388a:	4649      	mov	r1, r9
 800388c:	4640      	mov	r0, r8
 800388e:	47d0      	blx	sl
 8003890:	3001      	adds	r0, #1
 8003892:	d0ad      	beq.n	80037f0 <_printf_i+0x15c>
 8003894:	6823      	ldr	r3, [r4, #0]
 8003896:	079b      	lsls	r3, r3, #30
 8003898:	d413      	bmi.n	80038c2 <_printf_i+0x22e>
 800389a:	68e0      	ldr	r0, [r4, #12]
 800389c:	9b03      	ldr	r3, [sp, #12]
 800389e:	4298      	cmp	r0, r3
 80038a0:	bfb8      	it	lt
 80038a2:	4618      	movlt	r0, r3
 80038a4:	e7a6      	b.n	80037f4 <_printf_i+0x160>
 80038a6:	2301      	movs	r3, #1
 80038a8:	4632      	mov	r2, r6
 80038aa:	4649      	mov	r1, r9
 80038ac:	4640      	mov	r0, r8
 80038ae:	47d0      	blx	sl
 80038b0:	3001      	adds	r0, #1
 80038b2:	d09d      	beq.n	80037f0 <_printf_i+0x15c>
 80038b4:	3501      	adds	r5, #1
 80038b6:	68e3      	ldr	r3, [r4, #12]
 80038b8:	9903      	ldr	r1, [sp, #12]
 80038ba:	1a5b      	subs	r3, r3, r1
 80038bc:	42ab      	cmp	r3, r5
 80038be:	dcf2      	bgt.n	80038a6 <_printf_i+0x212>
 80038c0:	e7eb      	b.n	800389a <_printf_i+0x206>
 80038c2:	2500      	movs	r5, #0
 80038c4:	f104 0619 	add.w	r6, r4, #25
 80038c8:	e7f5      	b.n	80038b6 <_printf_i+0x222>
 80038ca:	bf00      	nop
 80038cc:	08003cd5 	.word	0x08003cd5
 80038d0:	08003ce6 	.word	0x08003ce6

080038d4 <__sflush_r>:
 80038d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80038d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038dc:	0716      	lsls	r6, r2, #28
 80038de:	4605      	mov	r5, r0
 80038e0:	460c      	mov	r4, r1
 80038e2:	d454      	bmi.n	800398e <__sflush_r+0xba>
 80038e4:	684b      	ldr	r3, [r1, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	dc02      	bgt.n	80038f0 <__sflush_r+0x1c>
 80038ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	dd48      	ble.n	8003982 <__sflush_r+0xae>
 80038f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038f2:	2e00      	cmp	r6, #0
 80038f4:	d045      	beq.n	8003982 <__sflush_r+0xae>
 80038f6:	2300      	movs	r3, #0
 80038f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80038fc:	682f      	ldr	r7, [r5, #0]
 80038fe:	6a21      	ldr	r1, [r4, #32]
 8003900:	602b      	str	r3, [r5, #0]
 8003902:	d030      	beq.n	8003966 <__sflush_r+0x92>
 8003904:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003906:	89a3      	ldrh	r3, [r4, #12]
 8003908:	0759      	lsls	r1, r3, #29
 800390a:	d505      	bpl.n	8003918 <__sflush_r+0x44>
 800390c:	6863      	ldr	r3, [r4, #4]
 800390e:	1ad2      	subs	r2, r2, r3
 8003910:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003912:	b10b      	cbz	r3, 8003918 <__sflush_r+0x44>
 8003914:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003916:	1ad2      	subs	r2, r2, r3
 8003918:	2300      	movs	r3, #0
 800391a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800391c:	6a21      	ldr	r1, [r4, #32]
 800391e:	4628      	mov	r0, r5
 8003920:	47b0      	blx	r6
 8003922:	1c43      	adds	r3, r0, #1
 8003924:	89a3      	ldrh	r3, [r4, #12]
 8003926:	d106      	bne.n	8003936 <__sflush_r+0x62>
 8003928:	6829      	ldr	r1, [r5, #0]
 800392a:	291d      	cmp	r1, #29
 800392c:	d82b      	bhi.n	8003986 <__sflush_r+0xb2>
 800392e:	4a2a      	ldr	r2, [pc, #168]	@ (80039d8 <__sflush_r+0x104>)
 8003930:	410a      	asrs	r2, r1
 8003932:	07d6      	lsls	r6, r2, #31
 8003934:	d427      	bmi.n	8003986 <__sflush_r+0xb2>
 8003936:	2200      	movs	r2, #0
 8003938:	6062      	str	r2, [r4, #4]
 800393a:	04d9      	lsls	r1, r3, #19
 800393c:	6922      	ldr	r2, [r4, #16]
 800393e:	6022      	str	r2, [r4, #0]
 8003940:	d504      	bpl.n	800394c <__sflush_r+0x78>
 8003942:	1c42      	adds	r2, r0, #1
 8003944:	d101      	bne.n	800394a <__sflush_r+0x76>
 8003946:	682b      	ldr	r3, [r5, #0]
 8003948:	b903      	cbnz	r3, 800394c <__sflush_r+0x78>
 800394a:	6560      	str	r0, [r4, #84]	@ 0x54
 800394c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800394e:	602f      	str	r7, [r5, #0]
 8003950:	b1b9      	cbz	r1, 8003982 <__sflush_r+0xae>
 8003952:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003956:	4299      	cmp	r1, r3
 8003958:	d002      	beq.n	8003960 <__sflush_r+0x8c>
 800395a:	4628      	mov	r0, r5
 800395c:	f7ff fbf2 	bl	8003144 <_free_r>
 8003960:	2300      	movs	r3, #0
 8003962:	6363      	str	r3, [r4, #52]	@ 0x34
 8003964:	e00d      	b.n	8003982 <__sflush_r+0xae>
 8003966:	2301      	movs	r3, #1
 8003968:	4628      	mov	r0, r5
 800396a:	47b0      	blx	r6
 800396c:	4602      	mov	r2, r0
 800396e:	1c50      	adds	r0, r2, #1
 8003970:	d1c9      	bne.n	8003906 <__sflush_r+0x32>
 8003972:	682b      	ldr	r3, [r5, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0c6      	beq.n	8003906 <__sflush_r+0x32>
 8003978:	2b1d      	cmp	r3, #29
 800397a:	d001      	beq.n	8003980 <__sflush_r+0xac>
 800397c:	2b16      	cmp	r3, #22
 800397e:	d11e      	bne.n	80039be <__sflush_r+0xea>
 8003980:	602f      	str	r7, [r5, #0]
 8003982:	2000      	movs	r0, #0
 8003984:	e022      	b.n	80039cc <__sflush_r+0xf8>
 8003986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800398a:	b21b      	sxth	r3, r3
 800398c:	e01b      	b.n	80039c6 <__sflush_r+0xf2>
 800398e:	690f      	ldr	r7, [r1, #16]
 8003990:	2f00      	cmp	r7, #0
 8003992:	d0f6      	beq.n	8003982 <__sflush_r+0xae>
 8003994:	0793      	lsls	r3, r2, #30
 8003996:	680e      	ldr	r6, [r1, #0]
 8003998:	bf08      	it	eq
 800399a:	694b      	ldreq	r3, [r1, #20]
 800399c:	600f      	str	r7, [r1, #0]
 800399e:	bf18      	it	ne
 80039a0:	2300      	movne	r3, #0
 80039a2:	eba6 0807 	sub.w	r8, r6, r7
 80039a6:	608b      	str	r3, [r1, #8]
 80039a8:	f1b8 0f00 	cmp.w	r8, #0
 80039ac:	dde9      	ble.n	8003982 <__sflush_r+0xae>
 80039ae:	6a21      	ldr	r1, [r4, #32]
 80039b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80039b2:	4643      	mov	r3, r8
 80039b4:	463a      	mov	r2, r7
 80039b6:	4628      	mov	r0, r5
 80039b8:	47b0      	blx	r6
 80039ba:	2800      	cmp	r0, #0
 80039bc:	dc08      	bgt.n	80039d0 <__sflush_r+0xfc>
 80039be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039c6:	81a3      	strh	r3, [r4, #12]
 80039c8:	f04f 30ff 	mov.w	r0, #4294967295
 80039cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039d0:	4407      	add	r7, r0
 80039d2:	eba8 0800 	sub.w	r8, r8, r0
 80039d6:	e7e7      	b.n	80039a8 <__sflush_r+0xd4>
 80039d8:	dfbffffe 	.word	0xdfbffffe

080039dc <_fflush_r>:
 80039dc:	b538      	push	{r3, r4, r5, lr}
 80039de:	690b      	ldr	r3, [r1, #16]
 80039e0:	4605      	mov	r5, r0
 80039e2:	460c      	mov	r4, r1
 80039e4:	b913      	cbnz	r3, 80039ec <_fflush_r+0x10>
 80039e6:	2500      	movs	r5, #0
 80039e8:	4628      	mov	r0, r5
 80039ea:	bd38      	pop	{r3, r4, r5, pc}
 80039ec:	b118      	cbz	r0, 80039f6 <_fflush_r+0x1a>
 80039ee:	6a03      	ldr	r3, [r0, #32]
 80039f0:	b90b      	cbnz	r3, 80039f6 <_fflush_r+0x1a>
 80039f2:	f7ff fa9f 	bl	8002f34 <__sinit>
 80039f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f3      	beq.n	80039e6 <_fflush_r+0xa>
 80039fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003a00:	07d0      	lsls	r0, r2, #31
 8003a02:	d404      	bmi.n	8003a0e <_fflush_r+0x32>
 8003a04:	0599      	lsls	r1, r3, #22
 8003a06:	d402      	bmi.n	8003a0e <_fflush_r+0x32>
 8003a08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a0a:	f7ff fb98 	bl	800313e <__retarget_lock_acquire_recursive>
 8003a0e:	4628      	mov	r0, r5
 8003a10:	4621      	mov	r1, r4
 8003a12:	f7ff ff5f 	bl	80038d4 <__sflush_r>
 8003a16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a18:	07da      	lsls	r2, r3, #31
 8003a1a:	4605      	mov	r5, r0
 8003a1c:	d4e4      	bmi.n	80039e8 <_fflush_r+0xc>
 8003a1e:	89a3      	ldrh	r3, [r4, #12]
 8003a20:	059b      	lsls	r3, r3, #22
 8003a22:	d4e1      	bmi.n	80039e8 <_fflush_r+0xc>
 8003a24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a26:	f7ff fb8b 	bl	8003140 <__retarget_lock_release_recursive>
 8003a2a:	e7dd      	b.n	80039e8 <_fflush_r+0xc>

08003a2c <__swbuf_r>:
 8003a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2e:	460e      	mov	r6, r1
 8003a30:	4614      	mov	r4, r2
 8003a32:	4605      	mov	r5, r0
 8003a34:	b118      	cbz	r0, 8003a3e <__swbuf_r+0x12>
 8003a36:	6a03      	ldr	r3, [r0, #32]
 8003a38:	b90b      	cbnz	r3, 8003a3e <__swbuf_r+0x12>
 8003a3a:	f7ff fa7b 	bl	8002f34 <__sinit>
 8003a3e:	69a3      	ldr	r3, [r4, #24]
 8003a40:	60a3      	str	r3, [r4, #8]
 8003a42:	89a3      	ldrh	r3, [r4, #12]
 8003a44:	071a      	lsls	r2, r3, #28
 8003a46:	d501      	bpl.n	8003a4c <__swbuf_r+0x20>
 8003a48:	6923      	ldr	r3, [r4, #16]
 8003a4a:	b943      	cbnz	r3, 8003a5e <__swbuf_r+0x32>
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	4628      	mov	r0, r5
 8003a50:	f000 f82a 	bl	8003aa8 <__swsetup_r>
 8003a54:	b118      	cbz	r0, 8003a5e <__swbuf_r+0x32>
 8003a56:	f04f 37ff 	mov.w	r7, #4294967295
 8003a5a:	4638      	mov	r0, r7
 8003a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	6922      	ldr	r2, [r4, #16]
 8003a62:	1a98      	subs	r0, r3, r2
 8003a64:	6963      	ldr	r3, [r4, #20]
 8003a66:	b2f6      	uxtb	r6, r6
 8003a68:	4283      	cmp	r3, r0
 8003a6a:	4637      	mov	r7, r6
 8003a6c:	dc05      	bgt.n	8003a7a <__swbuf_r+0x4e>
 8003a6e:	4621      	mov	r1, r4
 8003a70:	4628      	mov	r0, r5
 8003a72:	f7ff ffb3 	bl	80039dc <_fflush_r>
 8003a76:	2800      	cmp	r0, #0
 8003a78:	d1ed      	bne.n	8003a56 <__swbuf_r+0x2a>
 8003a7a:	68a3      	ldr	r3, [r4, #8]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	60a3      	str	r3, [r4, #8]
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	6022      	str	r2, [r4, #0]
 8003a86:	701e      	strb	r6, [r3, #0]
 8003a88:	6962      	ldr	r2, [r4, #20]
 8003a8a:	1c43      	adds	r3, r0, #1
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d004      	beq.n	8003a9a <__swbuf_r+0x6e>
 8003a90:	89a3      	ldrh	r3, [r4, #12]
 8003a92:	07db      	lsls	r3, r3, #31
 8003a94:	d5e1      	bpl.n	8003a5a <__swbuf_r+0x2e>
 8003a96:	2e0a      	cmp	r6, #10
 8003a98:	d1df      	bne.n	8003a5a <__swbuf_r+0x2e>
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	f7ff ff9d 	bl	80039dc <_fflush_r>
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	d0d9      	beq.n	8003a5a <__swbuf_r+0x2e>
 8003aa6:	e7d6      	b.n	8003a56 <__swbuf_r+0x2a>

08003aa8 <__swsetup_r>:
 8003aa8:	b538      	push	{r3, r4, r5, lr}
 8003aaa:	4b29      	ldr	r3, [pc, #164]	@ (8003b50 <__swsetup_r+0xa8>)
 8003aac:	4605      	mov	r5, r0
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	460c      	mov	r4, r1
 8003ab2:	b118      	cbz	r0, 8003abc <__swsetup_r+0x14>
 8003ab4:	6a03      	ldr	r3, [r0, #32]
 8003ab6:	b90b      	cbnz	r3, 8003abc <__swsetup_r+0x14>
 8003ab8:	f7ff fa3c 	bl	8002f34 <__sinit>
 8003abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ac0:	0719      	lsls	r1, r3, #28
 8003ac2:	d422      	bmi.n	8003b0a <__swsetup_r+0x62>
 8003ac4:	06da      	lsls	r2, r3, #27
 8003ac6:	d407      	bmi.n	8003ad8 <__swsetup_r+0x30>
 8003ac8:	2209      	movs	r2, #9
 8003aca:	602a      	str	r2, [r5, #0]
 8003acc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ad0:	81a3      	strh	r3, [r4, #12]
 8003ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad6:	e033      	b.n	8003b40 <__swsetup_r+0x98>
 8003ad8:	0758      	lsls	r0, r3, #29
 8003ada:	d512      	bpl.n	8003b02 <__swsetup_r+0x5a>
 8003adc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ade:	b141      	cbz	r1, 8003af2 <__swsetup_r+0x4a>
 8003ae0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ae4:	4299      	cmp	r1, r3
 8003ae6:	d002      	beq.n	8003aee <__swsetup_r+0x46>
 8003ae8:	4628      	mov	r0, r5
 8003aea:	f7ff fb2b 	bl	8003144 <_free_r>
 8003aee:	2300      	movs	r3, #0
 8003af0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003af2:	89a3      	ldrh	r3, [r4, #12]
 8003af4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003af8:	81a3      	strh	r3, [r4, #12]
 8003afa:	2300      	movs	r3, #0
 8003afc:	6063      	str	r3, [r4, #4]
 8003afe:	6923      	ldr	r3, [r4, #16]
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	89a3      	ldrh	r3, [r4, #12]
 8003b04:	f043 0308 	orr.w	r3, r3, #8
 8003b08:	81a3      	strh	r3, [r4, #12]
 8003b0a:	6923      	ldr	r3, [r4, #16]
 8003b0c:	b94b      	cbnz	r3, 8003b22 <__swsetup_r+0x7a>
 8003b0e:	89a3      	ldrh	r3, [r4, #12]
 8003b10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b18:	d003      	beq.n	8003b22 <__swsetup_r+0x7a>
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	f000 f84f 	bl	8003bc0 <__smakebuf_r>
 8003b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b26:	f013 0201 	ands.w	r2, r3, #1
 8003b2a:	d00a      	beq.n	8003b42 <__swsetup_r+0x9a>
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	60a2      	str	r2, [r4, #8]
 8003b30:	6962      	ldr	r2, [r4, #20]
 8003b32:	4252      	negs	r2, r2
 8003b34:	61a2      	str	r2, [r4, #24]
 8003b36:	6922      	ldr	r2, [r4, #16]
 8003b38:	b942      	cbnz	r2, 8003b4c <__swsetup_r+0xa4>
 8003b3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003b3e:	d1c5      	bne.n	8003acc <__swsetup_r+0x24>
 8003b40:	bd38      	pop	{r3, r4, r5, pc}
 8003b42:	0799      	lsls	r1, r3, #30
 8003b44:	bf58      	it	pl
 8003b46:	6962      	ldrpl	r2, [r4, #20]
 8003b48:	60a2      	str	r2, [r4, #8]
 8003b4a:	e7f4      	b.n	8003b36 <__swsetup_r+0x8e>
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	e7f7      	b.n	8003b40 <__swsetup_r+0x98>
 8003b50:	20000018 	.word	0x20000018

08003b54 <_sbrk_r>:
 8003b54:	b538      	push	{r3, r4, r5, lr}
 8003b56:	4d06      	ldr	r5, [pc, #24]	@ (8003b70 <_sbrk_r+0x1c>)
 8003b58:	2300      	movs	r3, #0
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	4608      	mov	r0, r1
 8003b5e:	602b      	str	r3, [r5, #0]
 8003b60:	f7fd f80c 	bl	8000b7c <_sbrk>
 8003b64:	1c43      	adds	r3, r0, #1
 8003b66:	d102      	bne.n	8003b6e <_sbrk_r+0x1a>
 8003b68:	682b      	ldr	r3, [r5, #0]
 8003b6a:	b103      	cbz	r3, 8003b6e <_sbrk_r+0x1a>
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	bd38      	pop	{r3, r4, r5, pc}
 8003b70:	20000270 	.word	0x20000270

08003b74 <__swhatbuf_r>:
 8003b74:	b570      	push	{r4, r5, r6, lr}
 8003b76:	460c      	mov	r4, r1
 8003b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b7c:	2900      	cmp	r1, #0
 8003b7e:	b096      	sub	sp, #88	@ 0x58
 8003b80:	4615      	mov	r5, r2
 8003b82:	461e      	mov	r6, r3
 8003b84:	da0d      	bge.n	8003ba2 <__swhatbuf_r+0x2e>
 8003b86:	89a3      	ldrh	r3, [r4, #12]
 8003b88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b8c:	f04f 0100 	mov.w	r1, #0
 8003b90:	bf14      	ite	ne
 8003b92:	2340      	movne	r3, #64	@ 0x40
 8003b94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003b98:	2000      	movs	r0, #0
 8003b9a:	6031      	str	r1, [r6, #0]
 8003b9c:	602b      	str	r3, [r5, #0]
 8003b9e:	b016      	add	sp, #88	@ 0x58
 8003ba0:	bd70      	pop	{r4, r5, r6, pc}
 8003ba2:	466a      	mov	r2, sp
 8003ba4:	f000 f848 	bl	8003c38 <_fstat_r>
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	dbec      	blt.n	8003b86 <__swhatbuf_r+0x12>
 8003bac:	9901      	ldr	r1, [sp, #4]
 8003bae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003bb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003bb6:	4259      	negs	r1, r3
 8003bb8:	4159      	adcs	r1, r3
 8003bba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bbe:	e7eb      	b.n	8003b98 <__swhatbuf_r+0x24>

08003bc0 <__smakebuf_r>:
 8003bc0:	898b      	ldrh	r3, [r1, #12]
 8003bc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bc4:	079d      	lsls	r5, r3, #30
 8003bc6:	4606      	mov	r6, r0
 8003bc8:	460c      	mov	r4, r1
 8003bca:	d507      	bpl.n	8003bdc <__smakebuf_r+0x1c>
 8003bcc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	6123      	str	r3, [r4, #16]
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	6163      	str	r3, [r4, #20]
 8003bd8:	b003      	add	sp, #12
 8003bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bdc:	ab01      	add	r3, sp, #4
 8003bde:	466a      	mov	r2, sp
 8003be0:	f7ff ffc8 	bl	8003b74 <__swhatbuf_r>
 8003be4:	9f00      	ldr	r7, [sp, #0]
 8003be6:	4605      	mov	r5, r0
 8003be8:	4639      	mov	r1, r7
 8003bea:	4630      	mov	r0, r6
 8003bec:	f7ff fb16 	bl	800321c <_malloc_r>
 8003bf0:	b948      	cbnz	r0, 8003c06 <__smakebuf_r+0x46>
 8003bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bf6:	059a      	lsls	r2, r3, #22
 8003bf8:	d4ee      	bmi.n	8003bd8 <__smakebuf_r+0x18>
 8003bfa:	f023 0303 	bic.w	r3, r3, #3
 8003bfe:	f043 0302 	orr.w	r3, r3, #2
 8003c02:	81a3      	strh	r3, [r4, #12]
 8003c04:	e7e2      	b.n	8003bcc <__smakebuf_r+0xc>
 8003c06:	89a3      	ldrh	r3, [r4, #12]
 8003c08:	6020      	str	r0, [r4, #0]
 8003c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c0e:	81a3      	strh	r3, [r4, #12]
 8003c10:	9b01      	ldr	r3, [sp, #4]
 8003c12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003c16:	b15b      	cbz	r3, 8003c30 <__smakebuf_r+0x70>
 8003c18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	f000 f81d 	bl	8003c5c <_isatty_r>
 8003c22:	b128      	cbz	r0, 8003c30 <__smakebuf_r+0x70>
 8003c24:	89a3      	ldrh	r3, [r4, #12]
 8003c26:	f023 0303 	bic.w	r3, r3, #3
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	81a3      	strh	r3, [r4, #12]
 8003c30:	89a3      	ldrh	r3, [r4, #12]
 8003c32:	431d      	orrs	r5, r3
 8003c34:	81a5      	strh	r5, [r4, #12]
 8003c36:	e7cf      	b.n	8003bd8 <__smakebuf_r+0x18>

08003c38 <_fstat_r>:
 8003c38:	b538      	push	{r3, r4, r5, lr}
 8003c3a:	4d07      	ldr	r5, [pc, #28]	@ (8003c58 <_fstat_r+0x20>)
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	4604      	mov	r4, r0
 8003c40:	4608      	mov	r0, r1
 8003c42:	4611      	mov	r1, r2
 8003c44:	602b      	str	r3, [r5, #0]
 8003c46:	f7fc ff71 	bl	8000b2c <_fstat>
 8003c4a:	1c43      	adds	r3, r0, #1
 8003c4c:	d102      	bne.n	8003c54 <_fstat_r+0x1c>
 8003c4e:	682b      	ldr	r3, [r5, #0]
 8003c50:	b103      	cbz	r3, 8003c54 <_fstat_r+0x1c>
 8003c52:	6023      	str	r3, [r4, #0]
 8003c54:	bd38      	pop	{r3, r4, r5, pc}
 8003c56:	bf00      	nop
 8003c58:	20000270 	.word	0x20000270

08003c5c <_isatty_r>:
 8003c5c:	b538      	push	{r3, r4, r5, lr}
 8003c5e:	4d06      	ldr	r5, [pc, #24]	@ (8003c78 <_isatty_r+0x1c>)
 8003c60:	2300      	movs	r3, #0
 8003c62:	4604      	mov	r4, r0
 8003c64:	4608      	mov	r0, r1
 8003c66:	602b      	str	r3, [r5, #0]
 8003c68:	f7fc ff70 	bl	8000b4c <_isatty>
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	d102      	bne.n	8003c76 <_isatty_r+0x1a>
 8003c70:	682b      	ldr	r3, [r5, #0]
 8003c72:	b103      	cbz	r3, 8003c76 <_isatty_r+0x1a>
 8003c74:	6023      	str	r3, [r4, #0]
 8003c76:	bd38      	pop	{r3, r4, r5, pc}
 8003c78:	20000270 	.word	0x20000270

08003c7c <_init>:
 8003c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7e:	bf00      	nop
 8003c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c82:	bc08      	pop	{r3}
 8003c84:	469e      	mov	lr, r3
 8003c86:	4770      	bx	lr

08003c88 <_fini>:
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	bf00      	nop
 8003c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8e:	bc08      	pop	{r3}
 8003c90:	469e      	mov	lr, r3
 8003c92:	4770      	bx	lr
